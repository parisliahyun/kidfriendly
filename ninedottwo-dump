--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE "Paris";
ALTER ROLE "Paris" WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION;






--
-- Database creation
--

CREATE DATABASE "BucketList_development" WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE "GeneralAssessmently_development" WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE "GeneralAssessmently_test" WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE "Hunger_development" WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE "Ingredientio_development" WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE "Ingredientio_test" WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE "KidFriendly_development" WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE "KidFriendly_test" WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE "Paris" WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE actorsdb_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE broadway_db WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE broadwayly_revival_app_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE bucketlist_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE chopped_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE chopped_test WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE citi_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE citibike_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE costumely_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE hogwarts_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE hunger_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE hunger_test WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE moma_db WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE moolah_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE movies_db WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE projectio_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE receipts_db WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE roomly_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE roomly_test WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE sandbox WITH TEMPLATE = template0 OWNER = "Paris";
REVOKE ALL ON DATABASE template1 FROM PUBLIC;
REVOKE ALL ON DATABASE template1 FROM "Paris";
GRANT ALL ON DATABASE template1 TO "Paris";
GRANT CONNECT ON DATABASE template1 TO PUBLIC;
CREATE DATABASE todolly_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE tunr_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE turkey_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE users WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE watchio_development WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE wdinstagram WITH TEMPLATE = template0 OWNER = "Paris";
CREATE DATABASE wdinstagram2_app_development WITH TEMPLATE = template0 OWNER = "Paris";


\connect "BucketList_development"

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: activities; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE activities (
    id integer NOT NULL,
    title character varying(255),
    done boolean DEFAULT false,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.activities OWNER TO "Paris";

--
-- Name: activities_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activities_id_seq OWNER TO "Paris";

--
-- Name: activities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE activities_id_seq OWNED BY activities.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY activities ALTER COLUMN id SET DEFAULT nextval('activities_id_seq'::regclass);


--
-- Data for Name: activities; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY activities (id, title, done, created_at, updated_at) FROM stdin;
3	new	f	2013-12-05 16:37:27.858496	2013-12-05 16:37:30.392073
1	blee	f	2013-12-05 15:49:21.524749	2013-12-05 16:45:16.725349
\.


--
-- Name: activities_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('activities_id_seq', 3, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131204033100
\.


--
-- Name: activities_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY activities
    ADD CONSTRAINT activities_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect "GeneralAssessmently_development"

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: courses; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE courses (
    id integer NOT NULL,
    title character varying(50)
);


ALTER TABLE public.courses OWNER TO "Paris";

--
-- Name: courses_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE courses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.courses_id_seq OWNER TO "Paris";

--
-- Name: courses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE courses_id_seq OWNED BY courses.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: spreadsheets; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE spreadsheets (
    id integer NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    google_key character varying(255),
    course_id integer
);


ALTER TABLE public.spreadsheets OWNER TO "Paris";

--
-- Name: spreadsheets_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE spreadsheets_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.spreadsheets_id_seq OWNER TO "Paris";

--
-- Name: spreadsheets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE spreadsheets_id_seq OWNED BY spreadsheets.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY courses ALTER COLUMN id SET DEFAULT nextval('courses_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY spreadsheets ALTER COLUMN id SET DEFAULT nextval('spreadsheets_id_seq'::regclass);


--
-- Data for Name: courses; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY courses (id, title) FROM stdin;
1	WDI Sept 2013
2	WDI Jan 2014
3	WDI April 2014
4	WDI Sept 2014
5	WDI January 2015
\.


--
-- Name: courses_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('courses_id_seq', 5, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131224155800
20131224191814
20140106173922
20140106174131
\.


--
-- Data for Name: spreadsheets; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY spreadsheets (id, created_at, updated_at, google_key, course_id) FROM stdin;
15	\N	\N	0AuZMGuR3ulpfdEtLZVRrQ0NvVlFqWk9lOHJNQktwUmc	1
16	\N	\N	0AuZMGuR3ulpfdFpGNld2VmZqdk0xR1R4dXpvMUJvZFE	1
17	\N	\N	0AuZMGuR3ulpfdDAxU0pZdDJHbEp4WnN4aHh6Qk9JVXc	1
18	\N	\N	0AuZMGuR3ulpfdDM3RjZIZ0JUTHhhdEs3VnR4RXBWa1E	1
19	\N	\N	0AuZMGuR3ulpfdEtLZVRrQ0NvVlFqWk9lOHJNQktwUmc	2
20	\N	\N	0AuZMGuR3ulpfdFpGNld2VmZqdk0xR1R4dXpvMUJvZFE	3
21	\N	\N	0AuZMGuR3ulpfdFpGNld2VmZqdk0xR1R4dXpvMUJvZFE	3
22	\N	\N	0AuZMGuR3ulpfdFpGNld2VmZqdk0xR1R4dXpvMUJvZFE	3
23	\N	\N	0AuZMGuR3ulpfdFpGNld2VmZqdk0xR1R4dXpvMUJvZFE	3
24	\N	\N	0AuZMGuR3ulpfdFpGNld2VmZqdk0xR1R4dXpvMUJvZFE	3
25	\N	\N	0AuZMGuR3ulpfdFpGNld2VmZqdk0xR1R4dXpvMUJvZFE	3
26	\N	\N	0AuZMGuR3ulpfdDM3RjZIZ0JUTHhhdEs3VnR4RXBWa1E	3
\.


--
-- Name: spreadsheets_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('spreadsheets_id_seq', 26, true);


--
-- Name: courses_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY courses
    ADD CONSTRAINT courses_pkey PRIMARY KEY (id);


--
-- Name: spreadsheets_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY spreadsheets
    ADD CONSTRAINT spreadsheets_pkey PRIMARY KEY (id);


--
-- Name: unique_courses_title; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_courses_title ON courses USING btree (title);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect "GeneralAssessmently_test"

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect "Hunger_development"

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect "Ingredientio_development"

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect "Ingredientio_test"

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ingredients; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE ingredients (
    id integer NOT NULL,
    title character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.ingredients OWNER TO "Paris";

--
-- Name: ingredients_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE ingredients_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ingredients_id_seq OWNER TO "Paris";

--
-- Name: ingredients_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE ingredients_id_seq OWNED BY ingredients.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY ingredients ALTER COLUMN id SET DEFAULT nextval('ingredients_id_seq'::regclass);


--
-- Data for Name: ingredients; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY ingredients (id, title, created_at, updated_at) FROM stdin;
\.


--
-- Name: ingredients_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('ingredients_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131210142205
\.


--
-- Name: ingredients_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY ingredients
    ADD CONSTRAINT ingredients_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect "KidFriendly_development"

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: activities; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE activities (
    id integer NOT NULL,
    image_url character varying(255),
    description text,
    tags text[],
    date date,
    "time" time without time zone,
    price numeric,
    requester_id integer,
    vendor_id integer,
    scheduled_at timestamp without time zone,
    name character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    user_id integer,
    venue text,
    age_range text,
    headline text
);


ALTER TABLE public.activities OWNER TO "Paris";

--
-- Name: activities_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activities_id_seq OWNER TO "Paris";

--
-- Name: activities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE activities_id_seq OWNED BY activities.id;


--
-- Name: appointments; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE appointments (
    id integer NOT NULL,
    vendor_id integer,
    client_id integer,
    activity_id integer,
    date timestamp without time zone,
    start time without time zone,
    finish time without time zone,
    price numeric,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.appointments OWNER TO "Paris";

--
-- Name: appointments_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE appointments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.appointments_id_seq OWNER TO "Paris";

--
-- Name: appointments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE appointments_id_seq OWNED BY appointments.id;


--
-- Name: basic_profiles; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE basic_profiles (
    id integer NOT NULL,
    first_name character varying(255),
    last_name character varying(255),
    maiden_name character varying(255),
    formatted_name character varying(255),
    headline character varying(255),
    location character varying(255),
    industry character varying(255),
    summary character varying(255),
    specialties character varying(255),
    picture_url character varying(255),
    public_profile_url character varying(255),
    user_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.basic_profiles OWNER TO "Paris";

--
-- Name: basic_profiles_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE basic_profiles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.basic_profiles_id_seq OWNER TO "Paris";

--
-- Name: basic_profiles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE basic_profiles_id_seq OWNED BY basic_profiles.id;


--
-- Name: calendars; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE calendars (
    id integer NOT NULL,
    name character varying(255),
    description text,
    color character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.calendars OWNER TO "Paris";

--
-- Name: calendars_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE calendars_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.calendars_id_seq OWNER TO "Paris";

--
-- Name: calendars_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE calendars_id_seq OWNED BY calendars.id;


--
-- Name: comments; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE comments (
    id integer NOT NULL,
    content text,
    commentable_id integer,
    commentable_type character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    commenter_id integer
);


ALTER TABLE public.comments OWNER TO "Paris";

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.comments_id_seq OWNER TO "Paris";

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE comments_id_seq OWNED BY comments.id;


--
-- Name: connections; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE connections (
    id integer NOT NULL,
    connections text[],
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.connections OWNER TO "Paris";

--
-- Name: connections_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE connections_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.connections_id_seq OWNER TO "Paris";

--
-- Name: connections_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE connections_id_seq OWNED BY connections.id;


--
-- Name: linkedin_oauth_settings; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE linkedin_oauth_settings (
    id integer NOT NULL,
    atoken character varying(255),
    asecret character varying(255),
    user_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.linkedin_oauth_settings OWNER TO "Paris";

--
-- Name: linkedin_oauth_settings_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE linkedin_oauth_settings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.linkedin_oauth_settings_id_seq OWNER TO "Paris";

--
-- Name: linkedin_oauth_settings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE linkedin_oauth_settings_id_seq OWNED BY linkedin_oauth_settings.id;


--
-- Name: messages; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE messages (
    id integer NOT NULL,
    sender_id character varying(255) NOT NULL,
    recipient_id character varying(255),
    sender_deleted boolean,
    recipient_deleted boolean,
    subject character varying(255) NOT NULL,
    body text,
    read_at timestamp without time zone,
    container character varying(255) DEFAULT 'draft'::character varying,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.messages OWNER TO "Paris";

--
-- Name: messages_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.messages_id_seq OWNER TO "Paris";

--
-- Name: messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE messages_id_seq OWNED BY messages.id;


--
-- Name: rates; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rates (
    id integer NOT NULL,
    rater_id integer,
    rateable_id integer,
    rateable_type character varying(255),
    stars double precision NOT NULL,
    dimension character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.rates OWNER TO "Paris";

--
-- Name: rates_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rates_id_seq OWNER TO "Paris";

--
-- Name: rates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rates_id_seq OWNED BY rates.id;


--
-- Name: rating_caches; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rating_caches (
    id integer NOT NULL,
    cacheable_id integer,
    cacheable_type character varying(255),
    avg double precision NOT NULL,
    qty integer NOT NULL,
    dimension character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.rating_caches OWNER TO "Paris";

--
-- Name: rating_caches_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rating_caches_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rating_caches_id_seq OWNER TO "Paris";

--
-- Name: rating_caches_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rating_caches_id_seq OWNED BY rating_caches.id;


--
-- Name: schedules; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schedules (
    id integer NOT NULL,
    name character varying(255),
    description text,
    is_all_day boolean,
    from_date date,
    from_time time without time zone,
    to_date date,
    to_time time without time zone,
    repeats character varying(255),
    repeats_every_n_days integer,
    repeats_every_n_weeks integer,
    repeats_weekly_each_days_of_the_week_mask integer,
    repeats_every_n_months integer,
    repeats_monthly character varying(255),
    repeats_monthly_each_days_of_the_month_mask integer,
    repeats_monthly_on_ordinals_mask integer,
    repeats_monthly_on_days_of_the_week_mask integer,
    repeats_every_n_years integer,
    repeats_yearly_each_months_of_the_year_mask integer,
    repeats_yearly_on boolean,
    repeats_yearly_on_ordinals_mask integer,
    repeats_yearly_on_days_of_the_week_mask integer,
    repeat_ends character varying(255),
    repeat_ends_on date,
    time_zone character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    calendar_id integer,
    user_id integer
);


ALTER TABLE public.schedules OWNER TO "Paris";

--
-- Name: schedules_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE schedules_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.schedules_id_seq OWNER TO "Paris";

--
-- Name: schedules_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE schedules_id_seq OWNED BY schedules.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: taggings; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE taggings (
    id integer NOT NULL,
    tag_id integer,
    taggable_id integer,
    taggable_type character varying(255),
    tagger_id integer,
    tagger_type character varying(255),
    context character varying(128),
    created_at timestamp without time zone
);


ALTER TABLE public.taggings OWNER TO "Paris";

--
-- Name: taggings_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE taggings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.taggings_id_seq OWNER TO "Paris";

--
-- Name: taggings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE taggings_id_seq OWNED BY taggings.id;


--
-- Name: tags; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE tags (
    id integer NOT NULL,
    name character varying(255)
);


ALTER TABLE public.tags OWNER TO "Paris";

--
-- Name: tags_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tags_id_seq OWNER TO "Paris";

--
-- Name: tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE tags_id_seq OWNED BY tags.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    email character varying(255) DEFAULT ''::character varying NOT NULL,
    encrypted_password character varying(255) DEFAULT ''::character varying NOT NULL,
    reset_password_token character varying(255),
    reset_password_sent_at timestamp without time zone,
    remember_created_at timestamp without time zone,
    sign_in_count integer DEFAULT 0 NOT NULL,
    current_sign_in_at timestamp without time zone,
    last_sign_in_at timestamp without time zone,
    current_sign_in_ip character varying(255),
    last_sign_in_ip character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    name character varying(255),
    first_name character varying(255),
    last_name character varying(255),
    role character varying(255),
    image_url character varying(255),
    about text,
    provider character varying(255),
    uid character varying(255),
    availability text,
    interests text,
    skills text,
    certifications text
);


ALTER TABLE public.users OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY activities ALTER COLUMN id SET DEFAULT nextval('activities_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY appointments ALTER COLUMN id SET DEFAULT nextval('appointments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY basic_profiles ALTER COLUMN id SET DEFAULT nextval('basic_profiles_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY calendars ALTER COLUMN id SET DEFAULT nextval('calendars_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY comments ALTER COLUMN id SET DEFAULT nextval('comments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY connections ALTER COLUMN id SET DEFAULT nextval('connections_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY linkedin_oauth_settings ALTER COLUMN id SET DEFAULT nextval('linkedin_oauth_settings_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY messages ALTER COLUMN id SET DEFAULT nextval('messages_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rates ALTER COLUMN id SET DEFAULT nextval('rates_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rating_caches ALTER COLUMN id SET DEFAULT nextval('rating_caches_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY schedules ALTER COLUMN id SET DEFAULT nextval('schedules_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY taggings ALTER COLUMN id SET DEFAULT nextval('taggings_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY tags ALTER COLUMN id SET DEFAULT nextval('tags_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: activities; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY activities (id, image_url, description, tags, date, "time", price, requester_id, vendor_id, scheduled_at, name, created_at, updated_at, user_id, venue, age_range, headline) FROM stdin;
109	http://hoop76.com/wp-content/uploads/2013/10/fun.gif	test activity for teacher	\N	\N	\N	28.0	\N	56	\N	\N	2013-12-18 16:51:23.778629	2013-12-18 16:51:23.778629	56	\N	\N	\N
110	http://centennialvacuum.com/wp-content/uploads/2013/02/typewriter.gif	Creative writing exercises for young minds.	\N	\N	\N	20.0	\N	54	\N	Fiction	2014-01-19 20:13:04.476536	2014-01-28 19:37:16.665773	\N	Flexible. I have several "satellite offices" in Hermosa Beach including Lark Cafe (I'm friends with the owner, which means free lattes for Mom and Dad!). I'm also happy to open up my studio right off of the PCH in Hermosa Beach (views of the ocean grease the creative wheels!). I'm also available to make house calls within the South Bay area. 	6-12	Creative writing exercises for young minds.
104	http://cdni.wired.co.uk/620x413/a_c/coding.jpg	For budding hackers.	\N	\N	\N	28.0	\N	53	\N	learn to code	2013-12-18 16:25:46.389054	2014-01-28 22:29:30.079865	6			For budding hackers.
107	http://4.bp.blogspot.com/-u6pLphFdy3o/TpuEoklgM3I/AAAAAAAAAFI/BIk9vFQhqD0/s1600/business-child-kid-computer-intern.jpg	Bossy pants 101. The art of wheeling and dealing, such as, negotiation skills you can use on chore day.	\N	\N	\N	28.0	\N	53	\N	Young moguls	2013-12-18 16:25:46.398114	2014-01-28 22:29:42.290936	6			Bossy pants 101. The art of wheeling and dealing, such as, negotiation skills you can use on chore day.
106	http://drohm.nl/kinderenaanboord/uploads/afbeeldingen/Sailing%20Kids%20Meridiaan.jpg	Play and plunder! Learn how pirates navigate the stars. Physics, geometry and scallywaggardry taught by a real-life retired pirate (and Cal Tech professor) in Venice Beach.	\N	\N	\N	28.0	\N	53	\N	sail like a pirate	2013-12-18 16:25:46.395174	2014-01-28 22:30:17.38936	6			Play and plunder! Learn how pirates navigate the stars.
108	http://www.scientificamerican.com/media/inline/revealing-psychology-playing-card-magic_1.jpg	Ta-dah! Learn magic tricks from Houdini's very distant relative.	\N	\N	\N	28.0	\N	53	\N	magic!	2013-12-18 16:25:46.400959	2014-01-28 22:30:45.611387	6			Ta-dah! Learn magic tricks from Houdini's very distant relative.
105	http://edanafashion.files.wordpress.com/2013/03/a11.jpg?w=620	Makeup! And yes. We will end with music, snacks and a runway show.	\N	\N	\N	28.0	\N	53	\N	makeup!	2013-12-18 16:25:46.392337	2014-01-28 22:30:58.888384	6			Makeup! And yes. We will end with music, snacks and a runway show.
103	http://i1292.photobucket.com/albums/b561/parisliahyun/IMG_23731_zpsd37ad61f.jpg	Learn the secret ingredients of yummy pizza from famed Mozza chef (and 'pie' lover), Frank Fermin.	\N	\N	\N	28.0	\N	53	\N	pizza making	2013-12-18 16:25:46.379875	2014-01-28 22:31:16.581486	6			Learn the secret ingredients of yummy pizza from famed Mozza chef (and 'pie' lover), Frank Fermin.
\.


--
-- Name: activities_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('activities_id_seq', 110, true);


--
-- Data for Name: appointments; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY appointments (id, vendor_id, client_id, activity_id, date, start, finish, price, created_at, updated_at) FROM stdin;
12	53	54	104	\N	\N	\N	\N	2013-12-18 18:11:51.093293	2013-12-18 18:11:51.093293
13	53	54	103	\N	\N	\N	\N	2013-12-19 18:06:02.589612	2013-12-19 18:06:02.589612
14	53	54	103	\N	\N	\N	\N	2013-12-19 18:06:03.398896	2013-12-19 18:06:03.398896
15	53	54	104	\N	\N	\N	\N	2014-01-14 21:44:33.221964	2014-01-14 21:44:33.221964
16	53	54	104	\N	\N	\N	\N	2014-01-20 00:24:05.792071	2014-01-20 00:24:05.792071
17	53	54	104	\N	\N	\N	\N	2014-01-29 02:35:11.766394	2014-01-29 02:35:11.766394
18	53	54	103	\N	\N	\N	\N	2014-01-30 00:27:03.68874	2014-01-30 00:27:03.68874
19	53	54	106	\N	\N	\N	\N	2014-01-30 00:47:33.981462	2014-01-30 00:47:33.981462
20	53	54	106	\N	\N	\N	\N	2014-01-30 00:48:16.870745	2014-01-30 00:48:16.870745
\.


--
-- Name: appointments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('appointments_id_seq', 20, true);


--
-- Data for Name: basic_profiles; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY basic_profiles (id, first_name, last_name, maiden_name, formatted_name, headline, location, industry, summary, specialties, picture_url, public_profile_url, user_id, created_at, updated_at) FROM stdin;
2	Paris Lia	Hyun	\N	Paris Lia Hyun	Content Strategist - Digital Media	Greater Los Angeles Area	Online Media			http://m.c.lnkd.licdn.com/mpr/mprx/0_vrCZ-3KtCrRSK09rzBhw-C31mK0grsBrccnF-C8flvISfO8KJ9tNyGq38OxCPgnpN18QjL-1Ul4t	http://www.linkedin.com/pub/paris-lia-hyun/4/731/a91	54	2013-12-17 18:00:57.504014	2013-12-17 18:00:57.504014
3	Paris	Hyun	\N	Paris Hyun	Digital Strategist +  Full Stack Developer	Greater Los Angeles Area	Online Media			http://m.c.lnkd.licdn.com/mpr/mprx/0_vrCZ-3KtCrRSK09rzBhw-C31mK0grsBrccnF-C8flvISfO8KJ9tNyGq38OxCPgnpN18QjL-1Ul4t	http://www.linkedin.com/pub/paris-hyun/4/731/a91	58	2014-01-29 00:56:11.72397	2014-01-29 00:56:11.72397
\.


--
-- Name: basic_profiles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('basic_profiles_id_seq', 3, true);


--
-- Data for Name: calendars; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY calendars (id, name, description, color, created_at, updated_at) FROM stdin;
\.


--
-- Name: calendars_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('calendars_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY comments (id, content, commentable_id, commentable_type, created_at, updated_at, commenter_id) FROM stdin;
14	Frank is amazing. My daughter and I really enjoyed learning all about how to make pizza! Highly recommend. 	53	User	2013-12-19 00:02:51.154432	2013-12-19 00:02:51.154432	\N
15	Totally awesome lady and I had fun watching my kids write a science fiction short story on a Sunday afternoon. Highly recommend.	54	User	2013-12-19 01:55:26.512074	2013-12-19 01:55:26.512074	\N
16	This was a fun activity for my kids who are 8 and 12. We've booked this for every Saturday from 2-4pm for the next month. 	104	Activity	2013-12-19 02:07:23.792792	2013-12-19 02:07:23.792792	\N
17	asdf	106	Activity	2013-12-19 14:28:00.441057	2013-12-19 14:28:00.441057	\N
18	My son loved this two hour writing session with Paris. We met at Griffith Park and sat under the trees on a beautiful day and my son learned all about writing a story. He's still working on it two weeks later! Highly recommend.	110	Activity	2014-01-27 17:59:55.975115	2014-01-27 17:59:55.975115	\N
19	This is a new comment.	54	User	2014-01-28 19:50:38.000138	2014-01-28 19:50:38.000138	54
20	Great activity. 	104	Activity	2014-01-28 22:04:04.662926	2014-01-28 22:04:04.662926	54
21	Test.	106	Activity	2014-01-28 22:04:31.895633	2014-01-28 22:04:31.895633	54
22	test.	109	Activity	2014-01-28 22:05:16.384054	2014-01-28 22:05:16.384054	54
23	wteriu ads;kjf aiouwer ad;kjf ad f iowuer weiurweoiuer .	106	Activity	2014-01-28 22:06:57.411422	2014-01-28 22:06:57.411422	54
24	Another comment.	54	User	2014-01-28 22:19:12.055092	2014-01-28 22:19:12.055092	54
25	A review.	103	Activity	2014-01-28 22:19:29.310919	2014-01-28 22:19:29.310919	54
26	Test	110	Activity	2014-01-28 22:36:59.125183	2014-01-28 22:36:59.125183	53
27	I'm leaving a comment about myself! 	54	User	2014-01-29 02:33:44.816151	2014-01-29 02:33:44.816151	54
28	Here's a super long review to see if the margins are right. Here's a super long review to see if the margins are right. Here's a super long review to see if the margins are right. Here's a super long review to see if the margins are right. Here's a super long review to see if the margins are right. Here's a super long review to see if the margins are right. Here's a super long review to see if the margins are right.	54	User	2014-01-29 21:02:15.576045	2014-01-29 21:02:15.576045	54
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('comments_id_seq', 28, true);


--
-- Data for Name: connections; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY connections (id, connections, created_at, updated_at) FROM stdin;
\.


--
-- Name: connections_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('connections_id_seq', 1, false);


--
-- Data for Name: linkedin_oauth_settings; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY linkedin_oauth_settings (id, atoken, asecret, user_id, created_at, updated_at) FROM stdin;
1	eecedf96-7455-42b8-b583-afee8c08f641	f53fa26f-1df6-4f3c-ab6e-e6c1b0cb55f1	54	2013-12-17 17:06:33.136372	2013-12-17 17:06:33.136372
2	301ca332-9255-4705-b2e8-2646fde7ec43	d353f0b5-949a-4cc6-9837-a0dba9a20e6f	53	2014-01-29 00:51:31.286039	2014-01-29 00:51:31.286039
3	301ca332-9255-4705-b2e8-2646fde7ec43	d353f0b5-949a-4cc6-9837-a0dba9a20e6f	58	2014-01-29 00:54:29.73537	2014-01-29 00:54:29.73537
\.


--
-- Name: linkedin_oauth_settings_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('linkedin_oauth_settings_id_seq', 3, true);


--
-- Data for Name: messages; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY messages (id, sender_id, recipient_id, sender_deleted, recipient_deleted, subject, body, read_at, container, created_at, updated_at) FROM stdin;
1	2	2	\N	\N	asdf	asdf	\N	draft	2013-12-10 16:52:09.195455	2013-12-10 16:52:09.195455
2	20	20	\N	\N	this	this	\N	draft	2013-12-10 22:48:35.201766	2013-12-10 22:48:35.201766
3	20	20	\N	\N	hey it's you	it's you!!!	\N	draft	2013-12-10 22:49:11.93086	2013-12-10 22:49:11.93086
4	32	32	\N	\N	asdfasdf	asdfasdfsadf	\N	draft	2013-12-11 15:13:08.312058	2013-12-11 15:13:08.312058
5	45	45	\N	\N	a message	a message for that.	\N	draft	2013-12-11 18:32:38.393039	2013-12-11 18:32:38.393039
6	48	48	\N	\N	blah	blah	\N	draft	2013-12-11 22:33:14.827438	2013-12-11 22:33:14.827438
7	47	48	\N	\N	lhljh	;kj;k	\N	draft	2013-12-12 21:13:32.312165	2013-12-12 21:13:32.312165
8	53	53	\N	\N	jklj	oip	\N	draft	2013-12-16 04:51:08.784847	2013-12-16 04:51:08.784847
9	53	53	\N	\N	sadfsf	eeeeeee	\N	draft	2013-12-16 04:52:14.082318	2013-12-16 04:52:14.082318
10	53	53	\N	\N	jjjjjj	nnnnn	\N	draft	2013-12-16 04:53:11.161841	2013-12-16 04:53:11.161841
11	53	53	\N	\N	oooo	ppp	\N	draft	2013-12-16 04:54:34.156824	2013-12-16 04:54:34.156824
12	54	54	\N	\N	ad	asdf	\N	draft	2013-12-17 05:48:40.722146	2013-12-17 05:48:40.722146
13	54	54	\N	\N	asdfasdf	wieorpiwoer	\N	draft	2013-12-17 18:43:36.327843	2013-12-17 18:43:36.327843
14	54	54	\N	\N	another nother test	;akj;d	\N	draft	2013-12-17 18:45:52.209725	2013-12-17 18:45:52.209725
15	54	54	\N	\N	afd;kajsdf	wieuroiuwer	\N	draft	2013-12-17 18:46:42.650673	2013-12-17 18:46:42.650673
16	54	53	\N	\N	sent message	sent message	\N	draft	2013-12-18 03:21:18.458549	2013-12-18 03:21:18.458549
17	54	53	\N	\N	hi this is paris	hi this is paris	\N	draft	2013-12-18 03:26:17.01297	2013-12-18 03:26:17.01297
18	54	53	\N	\N	sadf	sadfasdfsdf	\N	draft	2013-12-19 04:11:47.349822	2013-12-19 04:11:47.349822
19	54	54	\N	\N	eeeeee		\N	draft	2013-12-19 04:13:19.156743	2013-12-19 04:13:19.156743
20	54	54	\N	\N	ddd	ddd	\N	draft	2013-12-19 04:33:27.287938	2013-12-19 04:33:27.287938
21	54	54	\N	\N	sdafasdf	asdfsadf	\N	draft	2013-12-19 04:39:33.667171	2013-12-19 04:39:33.667171
22	54	53	\N	\N	hello	hello	\N	draft	2014-01-14 21:44:06.067411	2014-01-14 21:44:06.067411
23	54	54	\N	\N	asdf	sadf	\N	draft	2014-01-19 20:19:18.498256	2014-01-19 20:19:18.498256
24	54	54	\N	\N	hi	hi	\N	draft	2014-01-19 20:36:31.294883	2014-01-19 20:36:31.294883
25	54	54	\N	\N	d	s	\N	draft	2014-01-20 00:13:21.595225	2014-01-20 00:13:21.595225
26	54	54	\N	\N	d	d	\N	draft	2014-01-20 00:16:22.279424	2014-01-20 00:16:22.279424
27	54	54	\N	\N	d	d	\N	draft	2014-01-20 00:24:42.411304	2014-01-20 00:24:42.411304
28	54	54	\N	\N	s	s	\N	draft	2014-01-20 00:41:37.407466	2014-01-20 00:41:37.407466
29	54	54	\N	\N	d	d	\N	draft	2014-01-20 00:42:24.499189	2014-01-20 00:42:24.499189
30	54	54	\N	\N	l	l	\N	draft	2014-01-20 00:50:46.757199	2014-01-20 00:50:46.757199
31	54	54	\N	\N	d	d	\N	draft	2014-01-20 00:53:03.333401	2014-01-20 00:53:03.333401
32	54	54	\N	\N	s	s	\N	draft	2014-01-20 00:57:40.614203	2014-01-20 00:57:40.614203
33	54	54	\N	\N	f	f	\N	draft	2014-01-20 00:58:11.281282	2014-01-20 00:58:11.281282
34	54	54	\N	\N	dd	dd	\N	draft	2014-01-26 18:58:42.145643	2014-01-26 18:58:42.145643
35	54	54	\N	\N	asdfasdf	sadfasdf	\N	draft	2014-01-26 19:07:35.934413	2014-01-26 19:07:35.934413
36	54	54	\N	\N	eeeee	eeee	\N	draft	2014-01-26 19:19:28.284008	2014-01-26 19:19:28.284008
37	54	53	\N	\N	ee	eee	\N	draft	2014-01-28 16:46:41.513139	2014-01-28 16:46:41.513139
38	54	54	\N	\N	d	d	\N	draft	2014-01-28 17:02:30.757502	2014-01-28 17:02:30.757502
39	54	54	\N	\N	q	q	\N	draft	2014-01-28 17:13:15.159502	2014-01-28 17:13:15.159502
40	54	54	\N	\N	q	q	\N	draft	2014-01-28 17:13:15.398511	2014-01-28 17:13:15.398511
41	54	54	\N	\N	q	q	\N	draft	2014-01-28 17:13:15.541435	2014-01-28 17:13:15.541435
42	54	54	\N	\N	q	q	\N	draft	2014-01-28 17:13:15.766175	2014-01-28 17:13:15.766175
43	54	54	\N	\N	fsdf	fadsf	\N	draft	2014-01-28 17:21:23.014545	2014-01-28 17:21:23.014545
44	54	54	\N	\N	www	www	\N	draft	2014-01-28 17:25:35.893729	2014-01-28 17:25:35.893729
45	54	54	\N	\N	aaa	aa	\N	draft	2014-01-28 17:35:04.462342	2014-01-28 17:35:04.462342
46	54	54	\N	\N	d	d	\N	draft	2014-01-28 17:54:30.64481	2014-01-28 17:54:30.64481
47	54	54	\N	\N	d	d	\N	draft	2014-01-28 18:00:18.778973	2014-01-28 18:00:18.778973
48	54	54	\N	\N	bb	bbb	\N	draft	2014-01-28 18:04:18.427199	2014-01-28 18:04:18.427199
\.


--
-- Name: messages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('messages_id_seq', 48, true);


--
-- Data for Name: rates; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rates (id, rater_id, rateable_id, rateable_type, stars, dimension, created_at, updated_at) FROM stdin;
1	54	54	User	3	\N	2013-12-17 19:01:38.021617	2013-12-17 19:01:38.021617
2	54	54	User	5	\N	2013-12-17 19:01:50.73999	2013-12-17 19:01:50.73999
6	54	53	User	3	\N	2013-12-18 03:32:19.543487	2013-12-18 03:32:19.543487
7	53	53	User	5	\N	2013-12-18 21:59:11.470441	2013-12-18 21:59:11.470441
8	53	108	Activity	4	\N	2013-12-19 00:48:12.950282	2013-12-19 00:48:12.950282
9	54	54	User	5	\N	2013-12-19 01:53:59.296312	2013-12-19 01:53:59.296312
10	54	104	Activity	5	\N	2013-12-19 02:06:44.389515	2013-12-19 02:06:44.389515
11	54	110	Activity	3	\N	2014-01-19 20:31:08.760036	2014-01-19 20:31:08.760036
12	54	110	Activity	5	\N	2014-01-19 20:31:08.936354	2014-01-19 20:31:08.936354
13	54	110	Activity	5	\N	2014-01-19 20:31:09.09912	2014-01-19 20:31:09.09912
\.


--
-- Name: rates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rates_id_seq', 13, true);


--
-- Data for Name: rating_caches; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rating_caches (id, cacheable_id, cacheable_type, avg, qty, dimension, created_at, updated_at) FROM stdin;
4	53	User	4	2	\N	2013-12-18 03:32:19.580095	2013-12-18 21:59:11.480946
5	108	Activity	4	1	\N	2013-12-19 00:48:12.98323	2013-12-19 00:48:12.98323
1	54	User	4.33333333333333304	3	\N	2013-12-17 19:01:39.022892	2013-12-19 01:53:59.365167
6	104	Activity	5	1	\N	2013-12-19 02:06:44.417839	2013-12-19 02:06:44.417839
7	110	Activity	4.33333333333333304	3	\N	2014-01-19 20:31:08.832928	2014-01-19 20:31:09.104554
\.


--
-- Name: rating_caches_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rating_caches_id_seq', 7, true);


--
-- Data for Name: schedules; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schedules (id, name, description, is_all_day, from_date, from_time, to_date, to_time, repeats, repeats_every_n_days, repeats_every_n_weeks, repeats_weekly_each_days_of_the_week_mask, repeats_every_n_months, repeats_monthly, repeats_monthly_each_days_of_the_month_mask, repeats_monthly_on_ordinals_mask, repeats_monthly_on_days_of_the_week_mask, repeats_every_n_years, repeats_yearly_each_months_of_the_year_mask, repeats_yearly_on, repeats_yearly_on_ordinals_mask, repeats_yearly_on_days_of_the_week_mask, repeat_ends, repeat_ends_on, time_zone, created_at, updated_at, calendar_id, user_id) FROM stdin;
14	new	\N	\N	2013-12-31	12:59:00	2013-12-31	12:59:00	\N	\N	3	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2013-12-14 04:10:01.277481	2013-12-14 04:10:01.277481	\N	\N
\.


--
-- Name: schedules_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('schedules_id_seq', 14, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131210014621
20131210023531
20131210024704
20131210024958
20131210161513
20131212005916
20131212210911437
20131212213430
20131213160554
20131213160928
20131213161154
20131213192730
20131212210911439
20131213202743
20131213203019
20131214035608
20131215031052
20131215140054
20131215151707
20131217012348
20131217165624
20131217165833
20131217174007
20131218232042
20131218233142
20131218233841
20131218233939
20140128190207
20140128190525
20140128190916
\.


--
-- Data for Name: taggings; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY taggings (id, tag_id, taggable_id, taggable_type, tagger_id, tagger_type, context, created_at) FROM stdin;
1	1	38	Activity	\N	\N	tags	2013-12-15 15:21:27.539065
2	2	39	Activity	\N	\N	tags	2013-12-15 15:22:18.306477
3	3	39	Activity	\N	\N	tags	2013-12-15 15:22:18.313639
4	4	39	Activity	\N	\N	tags	2013-12-15 15:22:18.326476
5	5	39	Activity	\N	\N	tags	2013-12-15 15:22:31.384163
6	6	39	Activity	\N	\N	tags	2013-12-15 15:22:31.39305
32	29	109	Activity	\N	\N	tags	2013-12-18 16:51:24.268984
34	7	104	Activity	\N	\N	tags	2013-12-18 22:31:35.500944
35	17	103	Activity	\N	\N	tags	2013-12-18 22:32:17.33376
36	17	53	User	\N	\N	tags	2013-12-18 23:46:12.933032
37	20	107	Activity	\N	\N	tags	2013-12-19 00:09:35.1047
38	18	105	Activity	\N	\N	tags	2013-12-19 00:43:46.999009
39	31	106	Activity	\N	\N	tags	2013-12-19 00:44:28.319515
40	26	108	Activity	\N	\N	tags	2013-12-19 00:47:21.463105
45	32	110	Activity	\N	\N	tags	2014-01-27 17:46:36.640389
\.


--
-- Name: taggings_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('taggings_id_seq', 45, true);


--
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY tags (id, name) FROM stdin;
1	work
2	one
3	two
4	three
5	four
6	five
7	coding
8	hanging out
9	haha
10	being cool
11	skateboarding
12	fun
13	good times
14	tag 1
15	tag 2
16	tag 3
17	cooking
18	makeup
19	fashion
20	leadership
21	physics
22	astronomy
23	computer science
24	math
25	performance
26	magic
27	nature
28	Animals
29	activity
30	Cooking!
31	pirate adventure
32	creative writing
33	Creating writing
34	CREATIVE
\.


--
-- Name: tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('tags_id_seq', 34, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY users (id, email, encrypted_password, reset_password_token, reset_password_sent_at, remember_created_at, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, created_at, updated_at, name, first_name, last_name, role, image_url, about, provider, uid, availability, interests, skills, certifications) FROM stdin;
60	amanda@gmail.com	$2a$10$b9GGh6pIeONuxuGZ7CCW4uUSt6C7JrvSDU/EY8tTTWTDELNhzf6SS	\N	\N	\N	1	2014-01-30 00:10:13.446298	2014-01-30 00:10:13.446298	127.0.0.1	127.0.0.1	2014-01-30 00:10:12.445919	2014-01-30 00:13:13.196586	Amanda Neil	\N	\N	vendor	http://i1292.photobucket.com/albums/b561/parisliahyun/7944361b-04ec-4922-961e-d384d641c7a9_zps3b83391e.jpg	They call me the ‘keep going’ specialist. When kids hit the steep part of the learning curve it’s natural for them to feel discouraged and want to quit. I started teaching piano to kids when I was a senior in high school and have built up a bag of tricks to keep young students fired up about learning. My Yellow Submarine activity is a fun, one hour lesson where we learn, duet-style how to play the famous Beatles song. When your kid leaves the activity they’ll have a brand new song they can play to show off to friends and family. My 45-minute ‘Fun Way to Play Scales’ activity is good for a single learner or a group of siblings or friends. Your kids will learn three fast techniques for practicing scales that they’ll love to do alone and with their peers.	\N	\N	My activities work great as reinforcement for weekly lessons your kids are already receiving. I also have a few openings for lessons during the weekday. Quarterly “themed” recitals are held at The Barn in downtown Auburn. Please message me before booking.	Teaching, playing piano.	Piano	Berklee School of Music, Class of 2013.
54	parisliahyun@gmail.com	$2a$10$0I/eP9BYbuOpMBR2c564xeqbUE84Bv5e84APhF049jAuEiBBXGrhW	\N	\N	\N	47	2014-02-04 00:47:20.2528	2014-01-30 00:19:02.077265	127.0.0.1	127.0.0.1	2013-12-16 19:04:24.490547	2014-02-04 00:47:20.272014	Paris Hyun	\N	\N	vendor	http://i1292.photobucket.com/albums/b561/parisliahyun/ScreenShot2013-12-18at31252PM_zpsa05e7fef.png	Here's my profile full of interesting facts about me. 	\N	\N	Mondays and Saturdays, especially during the summer. 	My interests: I love this, this, this and this.\r\nI love teaching kids a bunch of cool stuff.		
56	teacher@gmail.com	$2a$10$C8RmqnGxZ6cADUH/rWEbD.2g1JieUWBzrbtnJ1JaZDpNBGMZejcOK	\N	\N	\N	1	2013-12-18 16:50:36.668227	2013-12-18 16:50:36.668227	127.0.0.1	127.0.0.1	2013-12-18 16:50:36.662189	2013-12-18 16:50:36.669049	Teacher	\N	\N	vendor	\N	\N	\N	\N	\N	\N	\N	\N
57	rachel@gmail.com	$2a$10$lbQHFqReQFy9.5HdLIBuQ.JWsgv7bzpOAzXEaQxJ244itSOwSApDO	\N	\N	\N	2	2014-01-27 17:18:13.660938	2014-01-27 17:04:52.440846	127.0.0.1	127.0.0.1	2014-01-27 17:04:52.336374	2014-01-27 17:21:02.319964	rachel	\N	\N	none	http://www.wendyshow.com/wp-content/uploads/rachelmaddow.jpg		\N	\N	\N		\N	\N
58	hey@gmail.com	$2a$10$K5jOLOB4H5KHkv4lI.K7IuVrnwfx6eZZjTM250/04v1Bd6RQbu.IO	\N	\N	\N	2	2014-01-29 01:00:41.866987	2014-01-29 00:54:22.968567	127.0.0.1	127.0.0.1	2014-01-29 00:54:22.914471	2014-01-29 01:00:41.868735	hey	\N	\N	none	\N	\N	\N	\N	\N	\N	\N	\N
53	frank@gmail.com	$2a$10$jOnHoTCHxonRV.XVIcDeVOXhvYGOaRUANHgQpDx9QoLHwSsQNWgge	\N	\N	\N	11	2014-01-29 03:02:20.713583	2014-01-29 01:01:04.90906	127.0.0.1	127.0.0.1	2013-12-16 00:30:43.969894	2014-01-29 03:02:20.715619	Frank Fermin	\N	\N	vendor	http://www.trbimg.com/img-522a6461/turbine/la-dd-chef-of-the-moment-frank-fermin-20130906-001/600	Stuff about me.	\N	\N	Generally available on the weekends. Please email me before you book.	cooking	cooking, especially pizza.	\N
59	blee@gmail.com	$2a$10$JcSMtTtyjwz58nzftY/A0.AiEJ7IWPoit3R7R59e25foiRPgKVOC6	\N	\N	\N	2	2014-01-29 22:22:04.441225	2014-01-29 03:02:53.016347	127.0.0.1	127.0.0.1	2014-01-29 03:02:53.007269	2014-01-29 22:22:04.443272	blee	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
55	jeff.konowitch@ga.co	$2a$10$38m7gpsXboP27PhMxuONTuDQMRhDy70iJiEjgZ/EThzkBTkrA5A7m	\N	\N	\N	1	2013-12-17 20:56:24.575189	2013-12-17 20:56:24.575189	127.0.0.1	127.0.0.1	2013-12-17 20:56:24.106752	2013-12-17 20:56:24.57767	Jeff	\N	\N	vendor	\N	\N	\N	\N	\N	\N	\N	\N
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('users_id_seq', 60, true);


--
-- Name: activities_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY activities
    ADD CONSTRAINT activities_pkey PRIMARY KEY (id);


--
-- Name: appointments_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY appointments
    ADD CONSTRAINT appointments_pkey PRIMARY KEY (id);


--
-- Name: basic_profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY basic_profiles
    ADD CONSTRAINT basic_profiles_pkey PRIMARY KEY (id);


--
-- Name: calendars_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY calendars
    ADD CONSTRAINT calendars_pkey PRIMARY KEY (id);


--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: connections_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY connections
    ADD CONSTRAINT connections_pkey PRIMARY KEY (id);


--
-- Name: linkedin_oauth_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY linkedin_oauth_settings
    ADD CONSTRAINT linkedin_oauth_settings_pkey PRIMARY KEY (id);


--
-- Name: messages_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);


--
-- Name: rates_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rates
    ADD CONSTRAINT rates_pkey PRIMARY KEY (id);


--
-- Name: rating_caches_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rating_caches
    ADD CONSTRAINT rating_caches_pkey PRIMARY KEY (id);


--
-- Name: schedules_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY schedules
    ADD CONSTRAINT schedules_pkey PRIMARY KEY (id);


--
-- Name: taggings_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY taggings
    ADD CONSTRAINT taggings_pkey PRIMARY KEY (id);


--
-- Name: tags_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: index_activities_on_tags; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_activities_on_tags ON activities USING gin (tags);


--
-- Name: index_comments_on_commentable_id_and_commentable_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_comments_on_commentable_id_and_commentable_type ON comments USING btree (commentable_id, commentable_type);


--
-- Name: index_rates_on_rateable_id_and_rateable_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_rates_on_rateable_id_and_rateable_type ON rates USING btree (rateable_id, rateable_type);


--
-- Name: index_rates_on_rater_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_rates_on_rater_id ON rates USING btree (rater_id);


--
-- Name: index_rating_caches_on_cacheable_id_and_cacheable_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_rating_caches_on_cacheable_id_and_cacheable_type ON rating_caches USING btree (cacheable_id, cacheable_type);


--
-- Name: index_taggings_on_tag_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_taggings_on_tag_id ON taggings USING btree (tag_id);


--
-- Name: index_taggings_on_taggable_id_and_taggable_type_and_context; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_taggings_on_taggable_id_and_taggable_type_and_context ON taggings USING btree (taggable_id, taggable_type, context);


--
-- Name: index_users_on_email; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_email ON users USING btree (email);


--
-- Name: index_users_on_reset_password_token; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_reset_password_token ON users USING btree (reset_password_token);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect "KidFriendly_test"

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
0
\.


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect "Paris"

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect actorsdb_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: actors; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE actors (
    id integer NOT NULL,
    name character varying(255),
    photo_url text,
    birth_date date
);


ALTER TABLE public.actors OWNER TO "Paris";

--
-- Name: actors_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE actors_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.actors_id_seq OWNER TO "Paris";

--
-- Name: actors_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE actors_id_seq OWNED BY actors.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY actors ALTER COLUMN id SET DEFAULT nextval('actors_id_seq'::regclass);


--
-- Data for Name: actors; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY actors (id, name, photo_url, birth_date) FROM stdin;
1	Alan Cumming	\N	\N
2	Grace Kelly	http://blog.netrobe.com/wp-content/uploads/2011/10/7TUxy.jpeg	1929-11-12
3	Grace Kelly		\N
4	Grace Kelly	http://blog.netrobe.com/wp-content/uploads/2011/10/7TUxy.jpeg	1929-11-12
5	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
6	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
7	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
8	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
9	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
10	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
11	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
12	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
13	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
14	bob hope	http://www.punoftheday.com/images/bob-hope.jpg	1903-05-29
15	kermit	http://images2.fanpop.com/images/photos/3200000/Kermit-the-muppets-3206566-1024-768.jpg	\N
\.


--
-- Name: actors_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('actors_id_seq', 15, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131015180546
20131015184403
\.


--
-- Name: actors_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY actors
    ADD CONSTRAINT actors_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect broadway_db

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: shows; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE shows (
    id integer NOT NULL,
    title character varying(50),
    year text,
    composer character varying(50),
    img_url text
);


ALTER TABLE public.shows OWNER TO "Paris";

--
-- Name: shows_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE shows_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.shows_id_seq OWNER TO "Paris";

--
-- Name: shows_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE shows_id_seq OWNED BY shows.id;


--
-- Name: songs; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE songs (
    id integer NOT NULL,
    song_title character varying(50),
    embed_url text,
    show_id integer
);


ALTER TABLE public.songs OWNER TO "Paris";

--
-- Name: songs_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE songs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.songs_id_seq OWNER TO "Paris";

--
-- Name: songs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE songs_id_seq OWNED BY songs.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY shows ALTER COLUMN id SET DEFAULT nextval('shows_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY songs ALTER COLUMN id SET DEFAULT nextval('songs_id_seq'::regclass);


--
-- Data for Name: shows; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY shows (id, title, year, composer, img_url) FROM stdin;
1	Little Shop of Horrors	1982	Alan Menken	http://static.guim.co.uk/sys-images/Arts/Arts_/Pictures/2011/11/25/1322221103019/Audrey-II-in-Little-Shop--007.jpg
2	A Chorus Line	1975	Marvin Hamlisch	http://makemusicals.com/wp-content/uploads/2011/02/ChorusLine.jpg
3	Cabaret	1966	John Kander	http://1.bp.blogspot.com/-rAwnw1SUmnU/TnrSMNNC8lI/AAAAAAAAAKc/IiogZLn7rUE/s640/cabaret+image.jpg
4	Rent	1994	Jonathan Larson	http://upload.wikimedia.org/wikipedia/en/e/ea/Rentpostera.jpg
5	The Phantom of the Opera	1986	Andrew Lloyd Webber	http://upload.wikimedia.org/wikipedia/en/f/f8/Phantom.jpg
\.


--
-- Name: shows_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('shows_id_seq', 5, true);


--
-- Data for Name: songs; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY songs (id, song_title, embed_url, show_id) FROM stdin;
2	Dentist!	http://www.youtube.com/watch?v=bOtMizMQ6oM	1
3	Suppertime	http://www.youtube.com/watch?v=6RRh-g-CC8g	1
4	Cabaret	http://www.youtube.com/watch?v=moOamKxW844	3
5	Tomorrow Belongs to Me	http://www.youtube.com/watch?v=29Mg6Gfh9Co	3
6	The Money Song	http://www.youtube.com/watch?v=I8P80A8vy9I	3
9	What I Did for Love	http://www.youtube.com/watch?v=-h7ehLC6aAk	2
8	Dance: Ten; Looks: Three	http://www.youtube.com/watch?v=Q-yjj6_LBCs	2
7	One	http://www.youtube.com/watch?v=tyZeGOsR9IA	2
1	Suddenly Seymour	http://www.youtube.com/watch?v=b66p8dLLwf8	1
10	I Hope I Get It	http://www.youtube.com/watch?v=EUKF2F9uYXU	2
\.


--
-- Name: songs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('songs_id_seq', 10, true);


--
-- Name: shows_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY shows
    ADD CONSTRAINT shows_pkey PRIMARY KEY (id);


--
-- Name: songs_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY songs
    ADD CONSTRAINT songs_pkey PRIMARY KEY (id);


--
-- Name: songs_show_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY songs
    ADD CONSTRAINT songs_show_id_fkey FOREIGN KEY (show_id) REFERENCES shows(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect broadwayly_revival_app_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: shows; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE shows (
    id integer NOT NULL,
    title character varying(255),
    year text,
    composer text,
    img_url text
);


ALTER TABLE public.shows OWNER TO "Paris";

--
-- Name: shows_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE shows_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.shows_id_seq OWNER TO "Paris";

--
-- Name: shows_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE shows_id_seq OWNED BY shows.id;


--
-- Name: songs; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE songs (
    id integer NOT NULL,
    song_title character varying(255),
    embed_url text,
    show_id integer
);


ALTER TABLE public.songs OWNER TO "Paris";

--
-- Name: songs_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE songs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.songs_id_seq OWNER TO "Paris";

--
-- Name: songs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE songs_id_seq OWNED BY songs.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY shows ALTER COLUMN id SET DEFAULT nextval('shows_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY songs ALTER COLUMN id SET DEFAULT nextval('songs_id_seq'::regclass);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131016210119
20131016210533
20131016233322
20131017000454
\.


--
-- Data for Name: shows; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY shows (id, title, year, composer, img_url) FROM stdin;
1	Little Shop of Horrors	1982	Alan Menken	http://static.guim.co.uk/sys-images/Arts/Arts_/Pictures/2011/11/25/1322221103019/Audrey-II-in-Little-Shop--007.jpg
2	A Chorus Line	1975	Marvin Hamlisch	http://makemusicals.com/wp-content/uploads/2011/02/ChorusLine.jpg
3	Cabaret	1966	John Kander	http://1.bp.blogspot.com/-rAwnw1SUmnU/TnrSMNNC8lI/AAAAAAAAAKc/IiogZLn7rUE/s640/cabaret+image.jpg
4	Rent	1994	Jonathan Larson	http://upload.wikimedia.org/wikipedia/en/e/ea/Rentpostera.jpg
5	The Producers	2001	Mel Brooks	http://upload.wikimedia.org/wikipedia/en/b/be/Playbill.png
6	Guys and Dolls	1955	Frank Loesser	http://upload.wikimedia.org/wikipedia/en/f/f6/Guys_and_dolls_movieposter.jpg
7	Sweeney Todd: The Demon Barber of Fleet Street	1979	Stephen Sondheim	http://upload.wikimedia.org/wikipedia/en/2/2a/SweeneyToddLogo.jpg
8	Miss Saigon	1989	Claude-Michel Schönberg	http://upload.wikimedia.org/wikipedia/en/5/5c/MissSaigonPoster.jpg
9	The Sound of Music	1965	Rogers & Hammerstein	http://upload.wikimedia.org/wikipedia/en/c/c6/Sound_of_music.jpg
\.


--
-- Name: shows_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('shows_id_seq', 9, true);


--
-- Data for Name: songs; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY songs (id, song_title, embed_url, show_id) FROM stdin;
1	Suddenly Seymour	http://www.youtube.com/watch?v=6RRh-g-CC8g	1
2	Suppertime	http://www.youtube.com/watch?v=b66p8dLLwf8	1
3	Dentist!	http://www.youtube.com/watch?v=bOtMizMQ6oM	1
4	What I Did for Love	http://www.youtube.com/watch?v=-h7ehLC6aAk	2
5	Dance: Ten; Looks: Three	http://www.youtube.com/watch?v=Q-yjj6_LBCs	2
6	One	http://www.youtube.com/watch?v=tyZeGOsR9IA	2
7	Cabaret	http://www.youtube.com/watch?v=moOamKxW844	3
8	Tomorrow Belongs to Me	http://www.youtube.com/watch?v=29Mg6Gfh9Co	3
9	The Money Song	http://www.youtube.com/watch?v=I8P80A8vy9I	3
10	Suddenly Seymour	http://www.youtube.com/watch?v=6RRh-g-CC8g	1
11	Suppertime	http://www.youtube.com/watch?v=b66p8dLLwf8	1
12	Dentist!	http://www.youtube.com/watch?v=bOtMizMQ6oM	1
13	What I Did for Love	http://www.youtube.com/watch?v=-h7ehLC6aAk	2
14	Dance: Ten; Looks: Three	http://www.youtube.com/watch?v=Q-yjj6_LBCs	2
15	One	http://www.youtube.com/watch?v=tyZeGOsR9IA	2
16	Cabaret	http://www.youtube.com/watch?v=moOamKxW844	3
17	Tomorrow Belongs to Me	http://www.youtube.com/watch?v=29Mg6Gfh9Co	3
18	The Money Song	http://www.youtube.com/watch?v=I8P80A8vy9I	3
19	Wilkommen	http://www.youtube.com/watch?v=hBlB8RAJEEc	\N
20	No Place Like London	http://www.youtube.com/watch?v=xamDprXBtBg	\N
21	No Place Like London	http://www.youtube.com/watch?v=xamDprXBtBg	\N
22	No Place Like London	http://www.youtube.com/watch?v=xamDprXBtBg	\N
23	No Place Like London	http://www.youtube.com/watch?v=xamDprXBtBg	\N
24	No Place Like London	http://www.youtube.com/watch?v=xamDprXBtBg	\N
25	No Place Like London	http://www.youtube.com/watch?v=xamDprXBtBg	\N
26	No Place Like London	http://www.youtube.com/watch?v=xamDprXBtBg	\N
27	Not While I'm Around	http://www.youtube.com/watch?v=NzjXhJadBKY	\N
28	Epiphany	http://www.youtube.com/watch?v=TxoFi5Lie34	7
29	Rocking the Boat	http://www.youtube.com/watch?v=o7kzsZreG0o	6
30	Sun and Moon	http://www.youtube.com/watch?v=-OntDHKsZy0	8
31	Do Re Mi Fa	http://www.youtube.com/watch?v=xIjobdArtiA	9
\.


--
-- Name: songs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('songs_id_seq', 31, true);


--
-- Name: shows_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY shows
    ADD CONSTRAINT shows_pkey PRIMARY KEY (id);


--
-- Name: songs_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY songs
    ADD CONSTRAINT songs_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect bucketlist_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect chopped_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: chefs; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE chefs (
    id integer NOT NULL,
    name character varying(255)
);


ALTER TABLE public.chefs OWNER TO "Paris";

--
-- Name: chefs_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE chefs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.chefs_id_seq OWNER TO "Paris";

--
-- Name: chefs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE chefs_id_seq OWNED BY chefs.id;


--
-- Name: dishes; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE dishes (
    id integer NOT NULL,
    name character varying(255),
    type character varying(255),
    score_id integer,
    chef_id integer
);


ALTER TABLE public.dishes OWNER TO "Paris";

--
-- Name: dishes_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE dishes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dishes_id_seq OWNER TO "Paris";

--
-- Name: dishes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE dishes_id_seq OWNED BY dishes.id;


--
-- Name: episodes; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE episodes (
    id integer NOT NULL,
    judge_id integer,
    chef_id integer,
    dish_id integer,
    round_id integer,
    winner character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.episodes OWNER TO "Paris";

--
-- Name: episodes_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE episodes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.episodes_id_seq OWNER TO "Paris";

--
-- Name: episodes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE episodes_id_seq OWNED BY episodes.id;


--
-- Name: judges; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE judges (
    id integer NOT NULL,
    name character varying(255)
);


ALTER TABLE public.judges OWNER TO "Paris";

--
-- Name: judges_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE judges_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.judges_id_seq OWNER TO "Paris";

--
-- Name: judges_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE judges_id_seq OWNED BY judges.id;


--
-- Name: rounds; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rounds (
    id integer NOT NULL,
    type character varying(255),
    judge_id integer,
    dish_id integer
);


ALTER TABLE public.rounds OWNER TO "Paris";

--
-- Name: rounds_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rounds_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rounds_id_seq OWNER TO "Paris";

--
-- Name: rounds_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rounds_id_seq OWNED BY rounds.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: scores; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE scores (
    id integer NOT NULL,
    score_value integer
);


ALTER TABLE public.scores OWNER TO "Paris";

--
-- Name: scores_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE scores_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.scores_id_seq OWNER TO "Paris";

--
-- Name: scores_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE scores_id_seq OWNED BY scores.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY chefs ALTER COLUMN id SET DEFAULT nextval('chefs_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY dishes ALTER COLUMN id SET DEFAULT nextval('dishes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY episodes ALTER COLUMN id SET DEFAULT nextval('episodes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY judges ALTER COLUMN id SET DEFAULT nextval('judges_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rounds ALTER COLUMN id SET DEFAULT nextval('rounds_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY scores ALTER COLUMN id SET DEFAULT nextval('scores_id_seq'::regclass);


--
-- Data for Name: chefs; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY chefs (id, name) FROM stdin;
\.


--
-- Name: chefs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('chefs_id_seq', 1, false);


--
-- Data for Name: dishes; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY dishes (id, name, type, score_id, chef_id) FROM stdin;
\.


--
-- Name: dishes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('dishes_id_seq', 1, false);


--
-- Data for Name: episodes; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY episodes (id, judge_id, chef_id, dish_id, round_id, winner, created_at, updated_at) FROM stdin;
\.


--
-- Name: episodes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('episodes_id_seq', 1, false);


--
-- Data for Name: judges; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY judges (id, name) FROM stdin;
\.


--
-- Name: judges_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('judges_id_seq', 1, false);


--
-- Data for Name: rounds; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rounds (id, type, judge_id, dish_id) FROM stdin;
\.


--
-- Name: rounds_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rounds_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131120203802
20131120203848
20131120203857
20131120203904
20131120203914
20131120204015
20131120215644
20131120220200
20131120220214
20131120220252
20131120220308
20131120220324
20131121010546
\.


--
-- Data for Name: scores; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY scores (id, score_value) FROM stdin;
\.


--
-- Name: scores_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('scores_id_seq', 1, false);


--
-- Name: chefs_tables_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY chefs
    ADD CONSTRAINT chefs_tables_pkey PRIMARY KEY (id);


--
-- Name: dishes_tables_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY dishes
    ADD CONSTRAINT dishes_tables_pkey PRIMARY KEY (id);


--
-- Name: episodes_tables_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY episodes
    ADD CONSTRAINT episodes_tables_pkey PRIMARY KEY (id);


--
-- Name: judges_tables_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY judges
    ADD CONSTRAINT judges_tables_pkey PRIMARY KEY (id);


--
-- Name: rounds_tables_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rounds
    ADD CONSTRAINT rounds_tables_pkey PRIMARY KEY (id);


--
-- Name: scores_tables_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY scores
    ADD CONSTRAINT scores_tables_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect chopped_test

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: chefs; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE chefs (
    id integer NOT NULL,
    name character varying(255)
);


ALTER TABLE public.chefs OWNER TO "Paris";

--
-- Name: chefs_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE chefs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.chefs_id_seq OWNER TO "Paris";

--
-- Name: chefs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE chefs_id_seq OWNED BY chefs.id;


--
-- Name: dishes; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE dishes (
    id integer NOT NULL,
    name character varying(255),
    type character varying(255),
    score_id integer,
    chef_id integer
);


ALTER TABLE public.dishes OWNER TO "Paris";

--
-- Name: dishes_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE dishes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dishes_id_seq OWNER TO "Paris";

--
-- Name: dishes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE dishes_id_seq OWNED BY dishes.id;


--
-- Name: episodes; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE episodes (
    id integer NOT NULL,
    judge_id integer,
    chef_id integer,
    dish_id integer,
    round_id integer,
    winner character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.episodes OWNER TO "Paris";

--
-- Name: episodes_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE episodes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.episodes_id_seq OWNER TO "Paris";

--
-- Name: episodes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE episodes_id_seq OWNED BY episodes.id;


--
-- Name: judges; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE judges (
    id integer NOT NULL,
    name character varying(255)
);


ALTER TABLE public.judges OWNER TO "Paris";

--
-- Name: judges_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE judges_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.judges_id_seq OWNER TO "Paris";

--
-- Name: judges_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE judges_id_seq OWNED BY judges.id;


--
-- Name: rounds; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rounds (
    id integer NOT NULL,
    type character varying(255),
    judge_id integer,
    dish_id integer
);


ALTER TABLE public.rounds OWNER TO "Paris";

--
-- Name: rounds_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rounds_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rounds_id_seq OWNER TO "Paris";

--
-- Name: rounds_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rounds_id_seq OWNED BY rounds.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: scores; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE scores (
    id integer NOT NULL,
    score_value integer
);


ALTER TABLE public.scores OWNER TO "Paris";

--
-- Name: scores_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE scores_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.scores_id_seq OWNER TO "Paris";

--
-- Name: scores_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE scores_id_seq OWNED BY scores.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY chefs ALTER COLUMN id SET DEFAULT nextval('chefs_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY dishes ALTER COLUMN id SET DEFAULT nextval('dishes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY episodes ALTER COLUMN id SET DEFAULT nextval('episodes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY judges ALTER COLUMN id SET DEFAULT nextval('judges_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rounds ALTER COLUMN id SET DEFAULT nextval('rounds_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY scores ALTER COLUMN id SET DEFAULT nextval('scores_id_seq'::regclass);


--
-- Data for Name: chefs; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY chefs (id, name) FROM stdin;
\.


--
-- Name: chefs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('chefs_id_seq', 1, false);


--
-- Data for Name: dishes; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY dishes (id, name, type, score_id, chef_id) FROM stdin;
\.


--
-- Name: dishes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('dishes_id_seq', 1, false);


--
-- Data for Name: episodes; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY episodes (id, judge_id, chef_id, dish_id, round_id, winner, created_at, updated_at) FROM stdin;
\.


--
-- Name: episodes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('episodes_id_seq', 1, false);


--
-- Data for Name: judges; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY judges (id, name) FROM stdin;
\.


--
-- Name: judges_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('judges_id_seq', 1, false);


--
-- Data for Name: rounds; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rounds (id, type, judge_id, dish_id) FROM stdin;
\.


--
-- Name: rounds_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rounds_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131121010546
20131120203802
20131120203848
20131120203857
20131120203904
20131120203914
20131120204015
20131120215644
20131120220200
20131120220214
20131120220252
20131120220308
20131120220324
\.


--
-- Data for Name: scores; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY scores (id, score_value) FROM stdin;
\.


--
-- Name: scores_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('scores_id_seq', 1, false);


--
-- Name: chefs_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY chefs
    ADD CONSTRAINT chefs_pkey PRIMARY KEY (id);


--
-- Name: dishes_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY dishes
    ADD CONSTRAINT dishes_pkey PRIMARY KEY (id);


--
-- Name: episodes_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY episodes
    ADD CONSTRAINT episodes_pkey PRIMARY KEY (id);


--
-- Name: judges_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY judges
    ADD CONSTRAINT judges_pkey PRIMARY KEY (id);


--
-- Name: rounds_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rounds
    ADD CONSTRAINT rounds_pkey PRIMARY KEY (id);


--
-- Name: scores_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY scores
    ADD CONSTRAINT scores_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect citi_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: favorites; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE favorites (
    id integer NOT NULL,
    address character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    favorable_id integer,
    favorable_type character varying(255),
    user_id integer
);


ALTER TABLE public.favorites OWNER TO "Paris";

--
-- Name: favorites_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE favorites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.favorites_id_seq OWNER TO "Paris";

--
-- Name: favorites_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE favorites_id_seq OWNED BY favorites.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    username character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    password_digest character varying(255) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.users OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY favorites ALTER COLUMN id SET DEFAULT nextval('favorites_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: favorites; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY favorites (id, address, created_at, updated_at, favorable_id, favorable_type, user_id) FROM stdin;
1	126 St. Marks St 10009	2013-10-23 02:51:33.604518	2013-10-23 02:51:33.604518	\N	\N	3
2	10 E 21 St  New York, NY 10010	2013-10-23 02:53:08.286882	2013-10-23 02:53:08.286882	\N	\N	3
3	374 Avenue of the Americas, New York, NY ‎	2013-10-23 03:04:43.429161	2013-10-23 03:04:43.429161	\N	\N	3
4	374 Avenue of the Americas, New York, NY ‎	2013-10-23 03:08:20.254889	2013-10-23 03:08:20.254889	\N	\N	3
5	10 E 21 St  New York, NY 10010	2013-10-23 03:10:12.828329	2013-10-23 03:10:12.828329	\N	\N	3
6	10 E 21 St  New York, NY 10010	2013-10-23 03:11:07.712275	2013-10-23 03:11:07.712275	\N	\N	3
7	126 St. Marks St 10009	2013-10-23 03:27:42.855311	2013-10-23 03:27:42.855311	\N	\N	3
8	10 E 21 St  New York, NY 10010	2013-10-23 13:16:33.115104	2013-10-23 13:16:33.115104	\N	\N	3
9	126 St. Marks St 10009	2013-10-23 14:29:39.945703	2013-10-23 14:29:39.945703	\N	\N	3
10	126 St. Marks St 10009	2013-10-23 15:27:41.10717	2013-10-23 15:27:41.10717	\N	\N	3
11	126 St. Marks St 10009	2013-10-23 15:29:48.764407	2013-10-23 15:29:48.764407	\N	\N	3
12	10 E 21 St  New York, NY 10010	2013-10-23 17:55:42.903468	2013-10-23 17:55:42.903468	\N	\N	1
13	10 E 21 St  New York, NY 10010	2013-10-23 18:00:45.028695	2013-10-23 18:00:45.028695	\N	\N	1
14	10 E 21 St  New York, NY 10010	2013-10-23 18:13:13.326267	2013-10-23 18:13:13.326267	\N	\N	1
15	10 E 21 St  New York, NY 10010	2013-10-23 18:46:55.006627	2013-10-23 18:46:55.006627	\N	\N	2
16	374 Avenue of the Americas, New York, NY ‎	2013-10-23 18:50:26.148471	2013-10-23 18:50:26.148471	\N	\N	2
17	penn station	2013-10-23 18:51:01.976057	2013-10-23 18:51:01.976057	\N	\N	2
18	126 St. Marks St 10009	2013-10-23 19:39:44.736094	2013-10-23 19:39:44.736094	\N	\N	3
19	126 St. Marks St 10009	2013-10-23 21:08:53.359311	2013-10-23 21:08:53.359311	\N	\N	2
20	126 St. Marks St 10009	2013-10-23 21:17:08.074635	2013-10-23 21:17:08.074635	\N	\N	3
21	4 Pennsylvania Plaza, New York, NY 10001	2013-10-23 21:18:52.687754	2013-10-23 21:18:52.687754	\N	\N	4
22	374 Avenue of the Americas, New York, NY ‎	2013-10-24 13:46:34.099283	2013-10-24 13:46:34.099283	\N	\N	3
23	10 E 21 St  New York, NY 10010	2013-10-24 15:11:57.172266	2013-10-24 15:11:57.172266	\N	\N	8
24	10 E 21 St  New York, NY 10010	2013-10-24 15:55:10.759661	2013-10-24 15:55:10.759661	\N	\N	3
25	Go	2013-10-24 17:20:05.503153	2013-10-24 17:20:05.503153	\N	\N	3
26	Go	2013-10-24 17:23:50.378193	2013-10-24 17:23:50.378193	\N	\N	3
27	10 bedford ave brooklyn	2013-10-24 22:01:34.076789	2013-10-24 22:01:34.076789	\N	\N	3
28	10 bedford ave brooklyn	2013-10-24 22:06:05.202469	2013-10-24 22:06:05.202469	\N	\N	3
29	10 E 21 St  New York, NY 10010	2013-10-25 01:40:19.276772	2013-10-25 01:40:19.276772	\N	\N	10
30	10 E 21 St  New York, NY 10010	2013-10-25 01:40:56.192429	2013-10-25 01:40:56.192429	\N	\N	10
31	10 E 21 St  New York, NY 10010	2013-10-25 01:42:10.611731	2013-10-25 01:42:10.611731	\N	\N	10
32	126 St. Marks St 10009	2013-10-25 01:49:04.112217	2013-10-25 01:49:04.112217	\N	\N	10
33	126 St. Marks St 10009	2013-10-25 04:52:58.409308	2013-10-25 04:52:58.409308	\N	\N	10
34	110 troutman ave brooklyn	2013-10-25 04:56:17.011122	2013-10-25 04:56:17.011122	\N	\N	3
35	110 troutman ave brooklyn	2013-10-25 04:56:29.875315	2013-10-25 04:56:29.875315	\N	\N	3
36	901 6th Ave, New York, NY 	2013-10-25 12:01:22.68546	2013-10-25 12:01:22.68546	\N	\N	13
37	10 E 21 St  New York, NY 10010	2013-10-27 16:05:15.381662	2013-10-27 16:05:15.381662	\N	\N	3
\.


--
-- Name: favorites_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('favorites_id_seq', 37, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131021171806
20131021200947
20131023001031
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY users (id, username, email, password_digest, created_at, updated_at) FROM stdin;
1	jake	jake@gmail.com	$2a$10$xQizTmm83uSTlM22fA.Ca.OP.LXgA8VrnTQCVciH6eIw4oE.XHozu	2013-10-21 20:27:02.315777	2013-10-21 20:27:02.315777
3	paris	parisliahyun@gmail.com	$2a$10$4OhoTdZGOoRC0sFmAg9Ht.cMu8L.7zOiWh0Rq7KwLJDUT2rNMnd8u	2013-10-22 20:46:01.156285	2013-10-22 20:46:01.156285
4	tomdog	tomdog@gmail.com	$2a$10$YcPAoB5uGDBHyYKPBw7HIuyrOPBhpmpDEBOIs3zhn9ckOvRN0.eSq	2013-10-23 21:17:46.480779	2013-10-23 21:17:46.480779
5	jiles	jiles@gmail.com	$2a$10$2LzaRUaR/7i2hsPKeYesSeoPVm8CUyNWrcSvAdVts93Mjds7nAGt.	2013-10-24 14:56:40.793667	2013-10-24 14:56:40.793667
6	new	new@gmail.com	$2a$10$6jxhPwCpIKKi/0HQsA0t0.zy7Ey1cV7pBR47XkiNdZuaU9i.F8JL.	2013-10-24 15:05:19.422809	2013-10-24 15:05:19.422809
7	shmee2	shmee2@gmail.com	$2a$10$z58DOJxq2vt1RQdYIoEsp.PDaXSumi8lnHuleOYA3ebA/aG3.IYM6	2013-10-24 15:07:51.813408	2013-10-24 15:07:51.813408
8	wow	wow@gmail.com	$2a$10$FQpTeojUCB66KAxcx3QWw.4hZ69i21XTZ1P5lCz1EkWv0iIfLaZJO	2013-10-24 15:09:06.683502	2013-10-24 15:09:06.683502
9	la	la@gmail.com	$2a$10$tODVNUfbmFNZpdK5ainwruIsGF06cHi2GJMzvmNojfyiCFVZS31CG	2013-10-24 18:16:47.64444	2013-10-24 18:16:47.64444
10	ack	ack@gmail.com	$2a$10$qUb2HjJ.kKfVO86MCzO9QejhTiMx4PObMiBT62F9Z/QCEz2iZI9/C	2013-10-25 01:33:16.24543	2013-10-25 01:33:16.24543
11	p	p@gmail.com	$2a$10$LOAdAV9VWE9eqK1eKScFHOnahgkPHUka8DYBBGR.3dwFZM/ovm6Pa	2013-10-25 04:50:11.455311	2013-10-25 04:50:11.455311
12	wee	wee@gmail.com	$2a$10$EfeKi1wIE1Kd2PuJpkd16e5OiECZS7Vprc/CIuBXP0/t8K5vy3VTy	2013-10-25 05:52:27.952859	2013-10-25 05:52:27.952859
13	blah2	blah2@gmail.com	$2a$10$XgbJNmrk0YFtiwgi.7EfUujTjEkD4izi7XelAk64pYIuhnElBaPAC	2013-10-25 11:58:01.73021	2013-10-25 11:58:01.73021
14	friday	friday@gmail.com	$2a$10$eiuaT7m.Q1ZBJGC9L7N75.TcX/1kamfaGAXoknZf7dRCMD222Ge1u	2013-10-25 13:18:47.571891	2013-10-25 13:18:47.571891
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('users_id_seq', 14, true);


--
-- Name: favorites_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY favorites
    ADD CONSTRAINT favorites_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect citibike_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: angels; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE angels (
    id integer NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    info text,
    twitter character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.angels OWNER TO "Paris";

--
-- Name: angels_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE angels_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.angels_id_seq OWNER TO "Paris";

--
-- Name: angels_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE angels_id_seq OWNED BY angels.id;


--
-- Name: appointments; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE appointments (
    id integer NOT NULL,
    date character varying(255),
    hour character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.appointments OWNER TO "Paris";

--
-- Name: appointments_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE appointments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.appointments_id_seq OWNER TO "Paris";

--
-- Name: appointments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE appointments_id_seq OWNED BY appointments.id;


--
-- Name: comments; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE comments (
    id integer NOT NULL,
    title character varying(50) DEFAULT ''::character varying,
    commentable_id integer,
    commentable_type character varying(255),
    user_id integer,
    role character varying(255) DEFAULT 'comments'::character varying,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    commenter_id integer,
    counterprice numeric(8,2)
);


ALTER TABLE public.comments OWNER TO "Paris";

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.comments_id_seq OWNER TO "Paris";

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE comments_id_seq OWNED BY comments.id;


--
-- Name: exchanges; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE exchanges (
    id integer NOT NULL,
    is_bike boolean,
    date date,
    "time" time without time zone,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    requester_id integer,
    vendor_id integer,
    station character varying(255),
    name character varying(255),
    permalink character varying(255),
    description text,
    user_id integer,
    file_file_name character varying(255),
    file_content_type character varying(255),
    file_file_size integer,
    file_updated_at timestamp without time zone,
    price numeric(8,2),
    status character varying(255),
    rated character varying(255),
    rated_by_vendor character varying(255)
);


ALTER TABLE public.exchanges OWNER TO "Paris";

--
-- Name: exchanges_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE exchanges_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.exchanges_id_seq OWNER TO "Paris";

--
-- Name: exchanges_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE exchanges_id_seq OWNED BY exchanges.id;


--
-- Name: favorites; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE favorites (
    id integer NOT NULL,
    address character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    user_id integer
);


ALTER TABLE public.favorites OWNER TO "Paris";

--
-- Name: favorites_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE favorites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.favorites_id_seq OWNER TO "Paris";

--
-- Name: favorites_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE favorites_id_seq OWNED BY favorites.id;


--
-- Name: rates; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rates (
    id integer NOT NULL,
    rater_id integer,
    rateable_id integer,
    rateable_type character varying(255),
    stars double precision NOT NULL,
    dimension character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.rates OWNER TO "Paris";

--
-- Name: rates_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rates_id_seq OWNER TO "Paris";

--
-- Name: rates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rates_id_seq OWNED BY rates.id;


--
-- Name: rating_caches; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rating_caches (
    id integer NOT NULL,
    cacheable_id integer,
    cacheable_type character varying(255),
    avg double precision NOT NULL,
    qty integer NOT NULL,
    dimension character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.rating_caches OWNER TO "Paris";

--
-- Name: rating_caches_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rating_caches_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rating_caches_id_seq OWNER TO "Paris";

--
-- Name: rating_caches_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rating_caches_id_seq OWNED BY rating_caches.id;


--
-- Name: sales; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE sales (
    id integer NOT NULL,
    email character varying(255),
    guid character varying(255),
    exchange_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    state character varying(255),
    stripe_id character varying(255),
    stripe_token character varying(255),
    card_expiration date,
    error text,
    fee_amount integer,
    vendor_id integer,
    customer_id character varying(255),
    amount integer,
    sendangel_fee integer
);


ALTER TABLE public.sales OWNER TO "Paris";

--
-- Name: sales_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE sales_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sales_id_seq OWNER TO "Paris";

--
-- Name: sales_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE sales_id_seq OWNED BY sales.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: stripe_events; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE stripe_events (
    id integer NOT NULL,
    stripe_id character varying(255),
    stripe_type character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.stripe_events OWNER TO "Paris";

--
-- Name: stripe_events_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE stripe_events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stripe_events_id_seq OWNER TO "Paris";

--
-- Name: stripe_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE stripe_events_id_seq OWNED BY stripe_events.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    username character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    role character varying(255),
    stripe_recipient_id integer,
    encrypted_password character varying(255) DEFAULT ''::character varying NOT NULL,
    reset_password_token character varying(255),
    reset_password_sent_at timestamp without time zone,
    sign_in_count integer DEFAULT 0 NOT NULL,
    current_sign_in_at timestamp without time zone,
    last_sign_in_at timestamp without time zone,
    current_sign_in_ip character varying(255),
    last_sign_in_ip character varying(255),
    remember_created_at timestamp without time zone,
    confirmation_token character varying(255),
    confirmed_at timestamp without time zone,
    confirmation_sent_at timestamp without time zone,
    unconfirmed_email character varying(255),
    failed_attempts integer DEFAULT 0 NOT NULL,
    unlock_token character varying(255),
    locked_at timestamp without time zone,
    first_name character varying(255),
    last_name character varying(255),
    image_url character varying(255),
    headline text,
    stripe_customer_id character varying(255),
    phone_number integer,
    stripe_access_key character varying(255),
    stripe_id character varying(255),
    stripe_publishable_key character varying(255)
);


ALTER TABLE public.users OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: versions; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE versions (
    id integer NOT NULL,
    item_type character varying(255) NOT NULL,
    item_id integer NOT NULL,
    event character varying(255) NOT NULL,
    whodunnit character varying(255),
    object text,
    created_at timestamp without time zone,
    object_changes text
);


ALTER TABLE public.versions OWNER TO "Paris";

--
-- Name: versions_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE versions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.versions_id_seq OWNER TO "Paris";

--
-- Name: versions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE versions_id_seq OWNED BY versions.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY angels ALTER COLUMN id SET DEFAULT nextval('angels_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY appointments ALTER COLUMN id SET DEFAULT nextval('appointments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY comments ALTER COLUMN id SET DEFAULT nextval('comments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY exchanges ALTER COLUMN id SET DEFAULT nextval('exchanges_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY favorites ALTER COLUMN id SET DEFAULT nextval('favorites_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rates ALTER COLUMN id SET DEFAULT nextval('rates_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rating_caches ALTER COLUMN id SET DEFAULT nextval('rating_caches_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY sales ALTER COLUMN id SET DEFAULT nextval('sales_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY stripe_events ALTER COLUMN id SET DEFAULT nextval('stripe_events_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY versions ALTER COLUMN id SET DEFAULT nextval('versions_id_seq'::regclass);


--
-- Data for Name: angels; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY angels (id, firstname, lastname, email, info, twitter, created_at, updated_at) FROM stdin;
1	Paris	Hyun	parisliahyun@gmail.com	blah	@parislia	2014-02-16 04:55:55.46184	2014-02-16 04:55:55.46184
2	blah	blah	parisliahyun@gmail.com	blah	blah	2014-02-16 04:57:11.963689	2014-02-16 04:57:11.963689
\.


--
-- Name: angels_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('angels_id_seq', 2, true);


--
-- Data for Name: appointments; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY appointments (id, date, hour, created_at, updated_at) FROM stdin;
\.


--
-- Name: appointments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('appointments_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY comments (id, title, commentable_id, commentable_type, user_id, role, created_at, updated_at, commenter_id, counterprice) FROM stdin;
5		39	User	\N	comments	2014-02-09 21:21:40.840671	2014-02-09 21:21:40.840671	39	5.00
6		39	User	\N	comments	2014-02-09 21:23:17.526685	2014-02-09 21:23:17.526685	39	3.50
7		39	User	\N	comments	2014-02-09 21:32:09.845524	2014-02-09 21:32:09.845524	39	8.99
8		198	Exchange	\N	comments	2014-02-09 21:36:39.504686	2014-02-09 21:36:39.504686	39	3.25
9		198	Exchange	\N	comments	2014-02-09 21:36:49.141028	2014-02-09 21:36:49.141028	39	1.75
10		199	Exchange	\N	comments	2014-02-09 21:37:22.065213	2014-02-09 21:37:22.065213	39	5.00
11		198	Exchange	\N	comments	2014-02-09 23:43:50.542907	2014-02-09 23:43:50.542907	39	1.66
14		215	Exchange	\N	comments	2014-02-13 22:59:45.372956	2014-02-13 22:59:45.372956	41	3.00
15		215	Exchange	\N	comments	2014-02-13 23:09:24.561427	2014-02-13 23:09:24.561427	41	10.00
17		216	Exchange	\N	comments	2014-02-13 23:14:27.04945	2014-02-13 23:14:27.04945	39	4.00
18		216	Exchange	\N	comments	2014-02-14 00:11:52.448389	2014-02-14 00:11:52.448389	41	10.00
19		218	Exchange	\N	comments	2014-02-14 04:05:49.828952	2014-02-14 04:05:49.828952	39	5.55
20		219	Exchange	\N	comments	2014-02-15 01:05:28.943289	2014-02-15 01:05:28.943289	39	6.25
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('comments_id_seq', 21, true);


--
-- Data for Name: exchanges; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY exchanges (id, is_bike, date, "time", created_at, updated_at, requester_id, vendor_id, station, name, permalink, description, user_id, file_file_name, file_content_type, file_file_size, file_updated_at, price, status, rated, rated_by_vendor) FROM stdin;
238	t	\N	06:27:16.420082	2014-02-18 06:12:17.084466	2014-02-18 06:13:49.318934	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	yes
219	t	\N	01:18:43.150084	2014-02-15 01:03:44.305398	2014-02-15 01:48:05.256041	\N	39	St Marks Pl & 2 Ave	\N	\N	\N	40	\N	\N	\N	\N	5.00	completed	yes	yes
220	f	\N	02:02:30.320189	2014-02-15 01:47:30.968228	2014-02-15 01:47:30.968228	\N	\N	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.30	completed	\N	\N
221	t	\N	02:10:02.014137	2014-02-15 01:55:02.518129	2014-02-15 03:43:08.348202	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.33	completed	yes	\N
239	t	\N	06:29:15.300212	2014-02-18 06:14:15.826791	2014-02-18 06:15:11.317905	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
222	f	\N	04:02:13.854331	2014-02-15 03:47:15.785818	2014-02-16 22:06:28.216446	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	yes
252	t	\N	23:24:12.474275	2014-02-18 23:09:12.980972	2014-02-18 23:09:26.951733	\N	39	Lefferts Pl & Franklin Ave	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
240	t	\N	06:38:27.703637	2014-02-18 06:23:28.390184	2014-02-18 06:23:43.423855	\N	39	W 49 St & 5 Ave	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
223	t	\N	03:36:36.315864	2014-02-18 03:21:37.32192	2014-02-18 03:26:37.431959	\N	39	W 49 St & 5 Ave	\N	\N	\N	40	\N	\N	\N	\N	5.00	completed	\N	yes
224	f	\N	03:44:25.269077	2014-02-18 03:29:25.816511	2014-02-18 03:32:16.322169	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	7.00	completed	\N	yes
241	t	\N	06:41:18.106839	2014-02-18 06:26:18.701827	2014-02-18 06:26:31.936572	\N	39	Lefferts Pl & Franklin Ave	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
225	t	\N	03:47:46.44823	2014-02-18 03:32:47.518679	2014-02-18 03:46:35.461462	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	yes
226	f	\N	04:02:22.282577	2014-02-18 03:47:22.940128	2014-02-18 03:47:43.061696	\N	39	Lexington Ave & E 24 St	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
242	t	\N	06:52:00.609837	2014-02-18 06:37:01.224114	2014-02-18 06:37:16.341484	\N	39	W 49 St & 5 Ave	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
227	t	\N	04:24:29.972488	2014-02-18 04:09:30.495938	2014-02-18 04:09:53.656482	\N	39	Lexington Ave & E 26 St	\N	\N	\N	40	\N	\N	\N	\N	4.55	completed	\N	\N
228	f	\N	04:47:41.997402	2014-02-18 04:32:42.660997	2014-02-18 04:33:53.969133	\N	39	Lispenard St & Broadway	\N	\N	\N	40	\N	\N	\N	\N	5.00	completed	\N	\N
253	t	\N	00:01:40.928837	2014-02-18 23:46:41.536802	2014-02-18 23:47:06.418232	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
229	t	\N	05:14:04.675051	2014-02-18 04:59:06.588342	2014-02-18 04:59:25.545958	\N	39	Lexington Ave & E 26 St	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
243	t	\N	06:53:42.805552	2014-02-18 06:38:43.727534	2014-02-18 06:38:57.848009	\N	39	Lexington Ave & E 26 St	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
230	t	\N	06:01:56.634731	2014-02-18 05:46:57.229994	2014-02-18 05:47:19.263378	\N	39	W 49 St & 5 Ave	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
231	t	\N	06:03:19.407997	2014-02-18 05:48:20.008304	2014-02-18 05:48:41.282804	\N	39	Lefferts Pl & Franklin Ave	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
232	t	\N	06:06:18.871307	2014-02-18 05:51:19.603344	2014-02-18 05:52:50.751274	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
244	t	\N	06:56:48.625118	2014-02-18 06:41:49.179728	2014-02-18 06:42:05.23579	\N	39	Lefferts Pl & Franklin Ave	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
233	t	\N	06:09:03.161827	2014-02-18 05:54:03.807853	2014-02-18 05:54:19.867239	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
218	f	\N	04:20:34.0762	2014-02-14 04:05:34.723009	2014-02-14 04:56:00.931431	\N	39	E 59 St & Sutton Pl	\N	\N	\N	40	\N	\N	\N	\N	5.55	completed	yes	yes
254	f	\N	00:53:46.642512	2014-02-19 00:38:47.355358	2014-02-19 04:04:47.114379	\N	39	W 49 St & 5 Ave	\N	\N	\N	40	\N	\N	\N	\N	3.00	\N	\N	\N
234	t	\N	06:11:02.033114	2014-02-18 05:56:02.560108	2014-02-18 05:56:58.492978	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
245	t	\N	07:01:19.416157	2014-02-18 06:46:20.023369	2014-02-18 06:46:36.297964	\N	39	Lexington Ave & E 24 St	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
235	t	\N	06:16:21.947409	2014-02-18 06:01:22.482364	2014-02-18 06:03:51.101789	\N	39	Lefferts Pl & Franklin Ave	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
236	t	\N	06:20:03.468768	2014-02-18 06:05:04.098737	2014-02-18 06:05:19.45052	\N	39	Lefferts Pl & Franklin Ave	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
237	f	\N	06:22:44.674998	2014-02-18 06:07:45.321575	2014-02-18 06:08:23.997315	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
246	t	\N	07:03:02.344174	2014-02-18 06:48:02.889534	2014-02-18 06:48:27.175928	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
255	t	\N	04:23:39.803038	2014-02-19 04:08:40.356155	2014-02-19 04:13:50.484907	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	3.33	completed	\N	\N
247	t	\N	07:04:11.228475	2014-02-18 06:49:11.872249	2014-02-18 06:49:25.313139	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
248	t	\N	07:05:29.432636	2014-02-18 06:50:30.059849	2014-02-18 06:50:40.314496	\N	39	Lispenard St & Broadway	\N	\N	\N	40	\N	\N	\N	\N	4.00	completed	\N	\N
249	t	\N	22:51:55.630133	2014-02-18 22:36:56.12485	2014-02-18 22:37:21.547127	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
256	t	\N	17:06:26.021522	2014-02-19 16:51:26.705952	2014-02-19 16:51:42.028636	\N	39	W 33 St & 7 Ave	\N	\N	\N	40	\N	\N	\N	\N	5.00	completed	\N	\N
250	t	\N	22:55:48.619667	2014-02-18 22:40:49.144942	2014-02-18 22:41:04.062417	\N	39	Lexington Ave & E 26 St	\N	\N	\N	40	\N	\N	\N	\N	4.00		\N	\N
251	t	\N	23:21:35.303481	2014-02-18 23:06:35.918918	2014-02-18 23:06:51.929671	\N	39	Lefferts Pl & Franklin Ave	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
257	t	\N	17:13:27.582961	2014-02-19 16:58:28.236182	2014-02-19 16:58:41.953503	\N	39	Vesey Pl & River Terrace	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
258	t	\N	17:33:46.624251	2014-02-19 17:18:47.36186	2014-02-19 17:19:01.324546	\N	39	W 33 St & 7 Ave	\N	\N	\N	40	\N	\N	\N	\N	6.00	completed	\N	\N
259	t	\N	17:35:47.366492	2014-02-19 17:20:48.39606	2014-02-19 17:21:03.401279	\N	39	W 33 St & 7 Ave	\N	\N	\N	40	\N	\N	\N	\N	3.44	completed	\N	\N
260	t	\N	17:43:27.95011	2014-02-19 17:28:28.54954	2014-02-19 17:28:43.668083	\N	39	W 33 St & 7 Ave	\N	\N	\N	40	\N	\N	\N	\N	3.00	completed	\N	\N
\.


--
-- Name: exchanges_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('exchanges_id_seq', 260, true);


--
-- Data for Name: favorites; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY favorites (id, address, created_at, updated_at, user_id) FROM stdin;
1	17th street and 3rd ave ny	2013-11-26 03:01:15.649534	2013-11-26 03:01:15.649534	1
2	114 troutman ave brooklyn ny	2013-12-01 21:13:02.666714	2013-12-01 21:13:02.666714	3
3	10 east 21st new york, ny	2014-01-31 23:33:27.264421	2014-01-31 23:33:27.264421	35
4	33 mercer st. ny, ny	2014-02-03 02:24:56.660516	2014-02-03 02:24:56.660516	35
5	10 east 21st new york, ny	2014-02-05 00:04:09.147559	2014-02-05 00:04:09.147559	35
6	10 east 21st new york, ny	2014-02-07 19:16:28.49959	2014-02-07 19:16:28.49959	37
7	10 east 21st new york, ny	2014-02-07 21:40:53.519674	2014-02-07 21:40:53.519674	37
8	333 3rd ave. new york, ny	2014-02-08 18:58:00.380203	2014-02-08 18:58:00.380203	39
9	40 rockafeller center ny, ny	2014-02-08 19:16:41.888776	2014-02-08 19:16:41.888776	39
10	15 mercer st. ny, ny	2014-02-09 23:47:29.118094	2014-02-09 23:47:29.118094	40
\.


--
-- Name: favorites_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('favorites_id_seq', 10, true);


--
-- Data for Name: rates; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rates (id, rater_id, rateable_id, rateable_type, stars, dimension, created_at, updated_at) FROM stdin;
1	39	39	User	4	\N	2014-02-13 18:02:13.825484	2014-02-13 18:02:13.825484
2	40	39	User	5	\N	2014-02-14 04:29:36.397267	2014-02-14 04:29:36.397267
3	39	40	User	4	\N	2014-02-14 04:55:59.773131	2014-02-14 04:55:59.773131
4	40	39	User	5	\N	2014-02-15 01:47:04.607698	2014-02-15 01:47:04.607698
5	39	40	User	5	\N	2014-02-15 01:48:03.786001	2014-02-15 01:48:03.786001
6	40	39	User	5	\N	2014-02-15 03:43:07.25973	2014-02-15 03:43:07.25973
7	39	40	User	5	\N	2014-02-16 22:06:26.651778	2014-02-16 22:06:26.651778
\.


--
-- Name: rates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rates_id_seq', 7, true);


--
-- Data for Name: rating_caches; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rating_caches (id, cacheable_id, cacheable_type, avg, qty, dimension, created_at, updated_at) FROM stdin;
1	39	User	4.75000000000000178	4	\N	2014-02-13 18:02:16.365933	2014-02-15 03:43:07.286419
2	40	User	4.66666666666666696	3	\N	2014-02-14 04:55:59.844497	2014-02-16 22:06:26.65947
\.


--
-- Name: rating_caches_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rating_caches_id_seq', 2, true);


--
-- Data for Name: sales; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY sales (id, email, guid, exchange_id, created_at, updated_at, state, stripe_id, stripe_token, card_expiration, error, fee_amount, vendor_id, customer_id, amount, sendangel_fee) FROM stdin;
18	\N	64362c7e-5de2-4125-a734-8c3392b5796b	201	2014-02-12 19:41:22.93304	2014-02-12 19:41:23.265552	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	39	\N	555	\N
32	\N	72762fc5-51ba-4633-b064-910d36ed3c71	237	2014-02-18 06:08:24.220084	2014-02-18 06:08:24.97069	errored	\N	\N	\N	Must provide Stripe Connect OAuth key to be able to use customer parameter. See https://stripe.com/docs/api#create_card_token for more details.	\N	39	cus_3U8nd1BJTdhB7v	400	80
25	\N	7f3f1e52-fb01-4826-9c41-4eb5d4b14707	222	2014-02-15 03:48:45.549033	2014-02-15 03:48:45.645751	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	39	cus_3U8nd1BJTdhB7v	300	60
19	\N	03bd3a0f-3125-4c88-9db6-6bf0c91bfe93	202	2014-02-12 21:39:31.633955	2014-02-12 21:39:31.839793	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	39	cus_3U8nd1BJTdhB7v	600	\N
26	\N	8fb79421-fd60-4234-ad1d-f38ebd0fe664	225	2014-02-18 03:33:01.202374	2014-02-18 03:33:01.202374	pending	\N	\N	\N	\N	\N	39	cus_3U8nd1BJTdhB7v	400	80
20	\N	94328c08-706e-427a-90f4-a7d53f368e80	212	2014-02-13 20:38:25.332632	2014-02-13 20:38:25.591987	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	41	cus_3U8nd1BJTdhB7v	322	\N
27	\N	99b23337-8a56-4546-96d0-50164097d7ea	226	2014-02-18 03:47:43.17132	2014-02-18 03:47:43.17132	pending	\N	\N	\N	\N	\N	39	cus_3U8nd1BJTdhB7v	300	60
35	\N	17bcabe4-079e-4394-a8a3-57fa2f9b4ebd	240	2014-02-18 06:23:43.547271	2014-02-18 06:24:02.976537	errored	\N	\N	\N	You can only create tokens from customers with an active card	\N	39	cus_3U8nd1BJTdhB7v	400	80
21	\N	927d736f-1408-47dc-bd7e-bec15b4fc4cd	213	2014-02-13 20:40:12.849548	2014-02-13 20:40:12.903501	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	41	cus_3U8nd1BJTdhB7v	222	\N
28	\N	98901422-3c63-436c-8ef8-08ba2f29d4ca	227	2014-02-18 04:09:53.759116	2014-02-18 04:09:53.759116	pending	\N	\N	\N	\N	\N	39	cus_3U8nd1BJTdhB7v	455	91
22	\N	809c2e68-c204-4cf0-8772-50aa1e165038	218	2014-02-14 04:06:52.818795	2014-02-14 04:06:52.996741	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	39	cus_3U8nd1BJTdhB7v	555	\N
33	\N	9ef9e54c-e1d3-48e2-811d-f66606e1fded	238	2014-02-18 06:12:42.551251	2014-02-18 06:12:43.489363	errored	\N	\N	\N	Must provide Stripe Connect OAuth key to be able to use customer parameter. See https://stripe.com/docs/api#create_card_token for more details.	\N	39	cus_3U8nd1BJTdhB7v	400	80
23	\N	a8b4c31b-15f5-41b4-91d3-7c1c352b2453	219	2014-02-15 01:18:51.571745	2014-02-15 01:18:51.790449	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	39	cus_3U8nd1BJTdhB7v	500	100
29	\N	a1617d29-01ed-4859-a30c-51b0a2a82f22	228	2014-02-18 04:33:54.079068	2014-02-18 04:33:54.191954	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	39	cus_3U8nd1BJTdhB7v	500	100
41	\N	92f39e95-7673-49cd-8fc0-ea2fb389d33e	247	2014-02-18 06:49:25.618651	2014-02-18 06:49:26.401793	errored	\N	\N	\N	You can only create tokens from customers with an active card	\N	39	cus_3W9d1qckip3UD6	300	60
24	\N	31f5ae41-0a4c-4ea4-9af0-8adea11e6ebf	221	2014-02-15 03:40:06.84707	2014-02-15 03:40:07.074289	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	39	cus_3U8nd1BJTdhB7v	433	86
34	\N	5b02c339-865b-4a8c-bae6-56ea83cfad00	239	2014-02-18 06:15:11.417078	2014-02-18 06:17:24.403397	errored	\N	\N	\N	Must provide Stripe Connect OAuth key to be able to use customer parameter. See https://stripe.com/docs/api#create_card_token for more details.	\N	39	cus_3U8nd1BJTdhB7v	400	80
30	\N	b98e104b-7f33-4644-8d27-bbb29aea4c4e	229	2014-02-18 04:59:25.752794	2014-02-18 04:59:25.844958	errored	\N	\N	\N	No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can generate API keys from the Stripe web interface. See https://stripe.com/api for details, or email support@stripe.com if you have any questions.	\N	39	cus_3U8nd1BJTdhB7v	300	60
31	\N	80970910-fb32-4a89-b30d-42ef6ddcb57d	236	2014-02-18 06:05:19.553359	2014-02-18 06:05:19.553359	pending	\N	\N	\N	\N	\N	39	\N	400	80
36	\N	4275ad41-eb5b-4ce8-925c-9e24957a371f	241	2014-02-18 06:26:32.06305	2014-02-18 06:26:32.827054	errored	\N	\N	\N	You can only create tokens from customers with an active card	\N	39	cus_3W9d1qckip3UD6	400	80
38	\N	e2520555-055c-4639-8721-9d378404a3ab	243	2014-02-18 06:38:57.961403	2014-02-18 06:38:58.741294	errored	\N	\N	\N	You can only create tokens from customers with an active card	\N	39	cus_3W9d1qckip3UD6	300	60
40	\N	bced1414-7665-409b-9bd8-93d9446de8fb	245	2014-02-18 06:46:36.399461	2014-02-18 06:46:37.256197	errored	\N	\N	\N	You can only create tokens from customers with an active card	\N	39	cus_3W9d1qckip3UD6	400	80
37	\N	b88dbaed-8154-4adb-8e6e-d5fd0d5f790e	242	2014-02-18 06:37:16.469241	2014-02-18 06:37:17.341978	errored	\N	\N	\N	You can only create tokens from customers with an active card	\N	39	cus_3W9d1qckip3UD6	400	80
39	\N	91d40cfc-b16a-43aa-bd94-fe9fa9c48dcb	244	2014-02-18 06:42:05.348247	2014-02-18 06:42:05.798884	errored	\N	\N	\N	You can only create tokens from customers with an active card	\N	39	cus_3W9d1qckip3UD6	300	60
42	\N	85327609-8fdd-48a4-a90a-d6d43f5b1b28	248	2014-02-18 06:50:40.577156	2014-02-18 06:50:40.597837	processing	\N	\N	\N	\N	\N	39	cus_3W9d1qckip3UD6	400	80
43	\N	66d40f8b-567d-4e1a-b9dc-83def5b56d5a	249	2014-02-18 22:37:21.714268	2014-02-18 22:39:05.67617	errored	\N	\N	\N	You can only create tokens from customers with an active card	\N	39	cus_3W9d1qckip3UD6	300	60
44	\N	81a62c8d-e565-4f87-939e-ac392f072d8c	250	2014-02-18 22:41:04.160302	2014-02-18 22:41:04.949771	errored	\N	\N	\N	You can only create tokens from customers with an active card	\N	39	cus_3W9d1qckip3UD6	400	80
45	parisliahyun@gmail.com	5d7dd936-0d7c-43fa-a610-a04f088ddcf1	252	2014-02-18 23:13:56.799189	2014-02-18 23:13:56.799189	pending	\N	\N	\N	\N	\N	\N	cus_3W9d1qckip3UD6	100	\N
46	parisliahyun@gmail.com	bdb28b87-7f72-411f-93c1-f9a99fee7105	252	2014-02-18 23:14:48.701062	2014-02-18 23:14:48.701062	pending	\N	\N	\N	\N	\N	\N	cus_3W9d1qckip3UD6	100	\N
47	\N	421b89ac-4106-4bb7-bb25-13b120ff106e	253	2014-02-18 23:47:06.617764	2014-02-18 23:47:33.441285	errored	\N	\N	\N	No such customer: cus_3W9d1qckip3UD6	\N	39	cus_3W9d1qckip3UD6	300	60
48	\N	41d61ad7-5652-4d37-8a3f-90f4fbce0503	255	2014-02-19 04:13:50.79516	2014-02-19 04:13:51.705637	errored	\N	\N	\N	Expired API key provided: sk_test_************************.  Application access may have been revoked.	\N	39	cus_3WUUqWjL3EZMKO	333	66
49	\N	cf3159a4-4cf5-4d78-9830-9576f3c56d44	255	2014-02-19 04:13:56.252147	2014-02-19 04:13:56.959817	errored	\N	\N	\N	Expired API key provided: sk_test_************************.  Application access may have been revoked.	\N	39	cus_3WUUqWjL3EZMKO	333	66
50	\N	d29f39d7-038f-48d7-b716-ebc75f924e8c	256	2014-02-19 16:51:42.223014	2014-02-19 16:51:42.792419	errored	\N	\N	\N	Expired API key provided: sk_test_************************.  Application access may have been revoked.	\N	39	cus_3WUmhKD4VqZcVw	500	100
51	\N	e70bf4af-b2be-41ac-a445-cad50b903190	257	2014-02-19 16:58:42.086084	2014-02-19 16:58:42.815404	errored	\N	\N	\N	Expired API key provided: sk_test_************************.  Application access may have been revoked.	\N	39	cus_3WUmhKD4VqZcVw	300	60
52	\N	16928df3-a82f-49c3-9690-7604584b3e1e	258	2014-02-19 17:19:01.417726	2014-02-19 17:19:02.057645	errored	\N	\N	\N	This API call cannot be made with a publishable API key. Please use a secret API key. You can find a list of your API keys at https://manage.stripe.com/account/apikeys.	\N	39	cus_3WUmhKD4VqZcVw	600	120
53	\N	7461d3cc-4a57-44f5-8f03-b434445e7c2a	259	2014-02-19 17:21:03.496136	2014-02-19 17:21:04.258085	errored	\N	\N	\N	Cannot apply an application_fee when the key given is not a Stripe Connect OAuth key.	\N	39	cus_3WUmhKD4VqZcVw	344	68
54	\N	4eb31365-e8fc-4551-aa2a-fc3f8dbdd791	260	2014-02-19 17:28:43.870841	2014-02-19 17:28:45.636241	finished	ch_103WhY2QZyjk5HNn5ThWxrQk	\N	2016-11-01	\N	99	39	cus_3WUmhKD4VqZcVw	300	60
\.


--
-- Name: sales_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('sales_id_seq', 54, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131126023537
20131126023629
20131128205757
20131129161238
20131129162114
20131130191729
20131206011629
20131207012702616
20131207012702617
20131208230535566
20131208231840
20131209030556
20140204220353
20140204221453
20140204223829
20140205001032
20140205001228
20140205034835
20140205221655
20140205222454
30140205222454
20140205224740
20140205230630
20140206013551
20140206014517
20140207175447
20140207183544
20140207190819
20140207202434
20140209180059
20140209181203
20140209204501
20140209205327
20140209211907
20140209212038
20140209212836
20140209212923
20140211174834
20140212015530
20140212032906
20140212035916
20140212040054
20131208230535567
20140212042347
20140212042454
20140212183906
20140212202515
20140212202715
20140214033642
20140214044457
20140214051208
20140216042216
20140216044442
20140216174529
20140216195353
\.


--
-- Data for Name: stripe_events; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY stripe_events (id, stripe_id, stripe_type, created_at, updated_at) FROM stdin;
\.


--
-- Name: stripe_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('stripe_events_id_seq', 1, false);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY users (id, username, email, created_at, updated_at, role, stripe_recipient_id, encrypted_password, reset_password_token, reset_password_sent_at, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, remember_created_at, confirmation_token, confirmed_at, confirmation_sent_at, unconfirmed_email, failed_attempts, unlock_token, locked_at, first_name, last_name, image_url, headline, stripe_customer_id, phone_number, stripe_access_key, stripe_id, stripe_publishable_key) FROM stdin;
2	shmee	shmee@gmail.com	2013-11-29 18:17:46.25199	2013-11-29 18:17:46.25199	\N	\N		\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
3	shmee	shmeehoppity@gmail.com	2013-12-01 21:02:06.403533	2013-12-01 21:02:06.403533	\N	\N		\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
4	new	new@gmail.com	2013-12-06 11:59:41.260539	2013-12-06 11:59:41.260539	\N	\N		\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
24	blee	blee@gmail.com	2013-12-06 12:46:37.211284	2013-12-06 12:46:37.211284	\N	\N		\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
30	test	test@gmail.com	2013-12-06 12:52:26.287165	2013-12-06 12:52:26.287165	\N	\N		\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
31	ya	ya@gmail.com	2013-12-06 12:53:17.233538	2013-12-06 12:53:17.233538	\N	\N		\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
32	mop	mop@gmail.com	2013-12-06 12:55:46.798451	2013-12-06 12:55:46.798451	\N	\N		\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
33	no	no@gmail.com	2013-12-06 12:56:53.294196	2013-12-06 12:56:53.294196	\N	\N		\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
34	j	j@gmail.com	2013-12-06 13:00:11.320746	2013-12-06 13:00:11.320746	\N	\N		\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
39	parisliahyun	parisliahyun@gmail.com	2014-02-07 22:11:06.839422	2014-02-19 21:38:37.948439	vendor	\N	$2a$10$4msRGx1TCbkkMn7kxkmGq.mMo0Z7rKaXITDNAX7VDHgcWBDGb6ylS	\N	\N	31	2014-02-19 21:38:37.945793	2014-02-19 04:05:52.342124	127.0.0.1	127.0.0.1	\N	\N	2014-02-07 22:11:18.431273	2014-02-07 22:11:07.645611	\N	0	\N	\N	\N	\N	http://i1292.photobucket.com/albums/b561/parisliahyun/58710fc9-d2d1-472e-a244-409458552cc2_zpsfb084317.jpg	I'm totally rad. Get it? Rad??	\N	2133213989	sk_test_p9MwLLGTZFmxBDMjJ2iq7LDD	\N	\N
42	testforstripe	testforstripe@gmail.com	2014-02-17 20:22:43.443173	2014-02-19 04:07:09.236329	\N	\N	$2a$10$BU3ZlgPjJdaX6bOFHNsN1.65XCrLBJ64V7tqyGZlYiLqyQazH9BxC	\N	\N	2	2014-02-19 04:05:37.60015	2014-02-17 20:23:44.911031	127.0.0.1	127.0.0.1	\N	\N	2014-02-17 20:23:28.927737	2014-02-17 20:22:44.373694	\N	0	\N	\N	\N	\N			\N	2133213989	\N	\N	\N
41	sendangel	hello.sendangel@gmail.com	2014-02-13 19:45:31.060842	2014-02-14 00:11:42.081964	vendor	\N	$2a$10$M5F1CY7o0K7PZlpBuUp5Lei6mdb9rF98/5mgi8Y9dg529mRdH7SUm	\N	\N	5	2014-02-14 00:11:42.080703	2014-02-14 00:08:17.420215	127.0.0.1	127.0.0.1	\N	\N	2014-02-13 19:46:43.24572	2014-02-13 19:45:31.873288	\N	0	\N	\N	\N	\N			cus_3UUS8LnYTp7OQo	2133213989	\N	\N	\N
40	paris2	parismaple@gmail.com	2014-02-09 23:46:08.627266	2014-02-19 04:08:24.066724	\N	\N	$2a$10$fu47HvZLeUg3t4UVVZRjUuOMd0p.7dqprc.h7K3IKZfy9SKbLwCui	\N	\N	27	2014-02-19 04:08:24.065514	2014-02-18 03:21:05.392647	127.0.0.1	127.0.0.1	\N	\N	2014-02-09 23:46:46.761652	2014-02-09 23:46:09.472444	\N	0	\N	\N	\N	\N			cus_3WUmhKD4VqZcVw	2133213989	sk_test_p9MwLLGTZFmxBDMjJ2iq7LDD	acct_102yvD2QZyjk5HNn	pk_test_5cPdB5ZHRNyCFsS1oNhMiIyk
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('users_id_seq', 42, true);


--
-- Data for Name: versions; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY versions (id, item_type, item_id, event, whodunnit, object, created_at, object_changes) FROM stdin;
1	Sale	2	create	35	\N	2014-02-06 21:36:02.741283	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 182\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:36:02.662409000 Z\nupdated_at:\n- \n- 2014-02-06 21:36:02.662409000 Z\nguid:\n- \n- 8e7c0c57-aea7-4bac-92e9-f5eb4d085cd6\nid:\n- \n- 2\n
2	Sale	2	update	35	---\nid: 2\nemail: parisliahyun@gmail.com\nguid: 8e7c0c57-aea7-4bac-92e9-f5eb4d085cd6\nexchange_id: 182\ncreated_at: 2014-02-06 21:36:02.662409000 Z\nupdated_at: 2014-02-06 21:36:02.662409000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:36:02.821532	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:36:02.662409000 Z\n- 2014-02-06 21:36:02.807291000 Z\n
3	Sale	2	update	35	---\nid: 2\nemail: parisliahyun@gmail.com\nguid: 8e7c0c57-aea7-4bac-92e9-f5eb4d085cd6\nexchange_id: 182\ncreated_at: 2014-02-06 21:36:02.662409000 Z\nupdated_at: 2014-02-06 21:36:02.807291000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:36:02.844422	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-06 21:36:02.807291000 Z\n- 2014-02-06 21:36:02.838045000 Z\n
4	Sale	2	update	35	---\nid: 2\nemail: parisliahyun@gmail.com\nguid: 8e7c0c57-aea7-4bac-92e9-f5eb4d085cd6\nexchange_id: 182\ncreated_at: 2014-02-06 21:36:02.662409000 Z\nupdated_at: 2014-02-06 21:36:02.838045000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:36:02.857411	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:36:02.838045000 Z\n- 2014-02-06 21:36:02.852726000 Z\n
5	Sale	3	create	35	\N	2014-02-06 21:39:38.133775	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 182\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:39:38.128412000 Z\nupdated_at:\n- \n- 2014-02-06 21:39:38.128412000 Z\nguid:\n- \n- 4be738f2-12c0-4133-8c1e-556edd254ea0\nid:\n- \n- 3\n
6	Sale	3	update	35	---\nid: 3\nemail: parisliahyun@gmail.com\nguid: 4be738f2-12c0-4133-8c1e-556edd254ea0\nexchange_id: 182\ncreated_at: 2014-02-06 21:39:38.128412000 Z\nupdated_at: 2014-02-06 21:39:38.128412000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:39:38.176122	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:39:38.128412000 Z\n- 2014-02-06 21:39:38.171591000 Z\n
7	Sale	3	update	35	---\nid: 3\nemail: parisliahyun@gmail.com\nguid: 4be738f2-12c0-4133-8c1e-556edd254ea0\nexchange_id: 182\ncreated_at: 2014-02-06 21:39:38.128412000 Z\nupdated_at: 2014-02-06 21:39:38.171591000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:39:38.184693	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-06 21:39:38.171591000 Z\n- 2014-02-06 21:39:38.179804000 Z\n
8	Sale	3	update	35	---\nid: 3\nemail: parisliahyun@gmail.com\nguid: 4be738f2-12c0-4133-8c1e-556edd254ea0\nexchange_id: 182\ncreated_at: 2014-02-06 21:39:38.128412000 Z\nupdated_at: 2014-02-06 21:39:38.179804000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:39:38.192731	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:39:38.179804000 Z\n- 2014-02-06 21:39:38.188471000 Z\n
9	Sale	4	create	35	\N	2014-02-06 21:40:02.668419	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 182\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:40:02.656795000 Z\nupdated_at:\n- \n- 2014-02-06 21:40:02.656795000 Z\nguid:\n- \n- a08dd192-6dbf-47e4-9fd4-edd7924879c1\nid:\n- \n- 4\n
10	Sale	4	update	35	---\nid: 4\nemail: parisliahyun@gmail.com\nguid: a08dd192-6dbf-47e4-9fd4-edd7924879c1\nexchange_id: 182\ncreated_at: 2014-02-06 21:40:02.656795000 Z\nupdated_at: 2014-02-06 21:40:02.656795000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:40:02.680489	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:40:02.656795000 Z\n- 2014-02-06 21:40:02.674867000 Z\n
11	Sale	4	update	35	---\nid: 4\nemail: parisliahyun@gmail.com\nguid: a08dd192-6dbf-47e4-9fd4-edd7924879c1\nexchange_id: 182\ncreated_at: 2014-02-06 21:40:02.656795000 Z\nupdated_at: 2014-02-06 21:40:02.674867000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:40:02.689431	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-06 21:40:02.674867000 Z\n- 2014-02-06 21:40:02.683863000 Z\n
12	Sale	4	update	35	---\nid: 4\nemail: parisliahyun@gmail.com\nguid: a08dd192-6dbf-47e4-9fd4-edd7924879c1\nexchange_id: 182\ncreated_at: 2014-02-06 21:40:02.656795000 Z\nupdated_at: 2014-02-06 21:40:02.683863000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:40:02.700932	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:40:02.683863000 Z\n- 2014-02-06 21:40:02.693637000 Z\n
13	Sale	5	create	35	\N	2014-02-06 21:42:37.297726	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 183\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:42:37.247137000 Z\nupdated_at:\n- \n- 2014-02-06 21:42:37.247137000 Z\nguid:\n- \n- 7ea4a2d6-e47f-40e4-aa8e-4f6b060187f6\nid:\n- \n- 5\n
41	Sale	12	create	35	\N	2014-02-06 21:54:28.803826	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 184\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:54:28.788125000 Z\nupdated_at:\n- \n- 2014-02-06 21:54:28.788125000 Z\nguid:\n- \n- ceb79e4a-0790-4b1e-b7bc-2172feafa8b8\nid:\n- \n- 12\n
14	Sale	5	update	35	---\nid: 5\nemail: parisliahyun@gmail.com\nguid: 7ea4a2d6-e47f-40e4-aa8e-4f6b060187f6\nexchange_id: 183\ncreated_at: 2014-02-06 21:42:37.247137000 Z\nupdated_at: 2014-02-06 21:42:37.247137000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:42:37.320234	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:42:37.247137000 Z\n- 2014-02-06 21:42:37.306249000 Z\n
15	Sale	5	update	35	---\nid: 5\nemail: parisliahyun@gmail.com\nguid: 7ea4a2d6-e47f-40e4-aa8e-4f6b060187f6\nexchange_id: 183\ncreated_at: 2014-02-06 21:42:37.247137000 Z\nupdated_at: 2014-02-06 21:42:37.306249000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:42:37.331354	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-06 21:42:37.306249000 Z\n- 2014-02-06 21:42:37.324067000 Z\n
16	Sale	5	update	35	---\nid: 5\nemail: parisliahyun@gmail.com\nguid: 7ea4a2d6-e47f-40e4-aa8e-4f6b060187f6\nexchange_id: 183\ncreated_at: 2014-02-06 21:42:37.247137000 Z\nupdated_at: 2014-02-06 21:42:37.324067000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:42:37.340297	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:42:37.324067000 Z\n- 2014-02-06 21:42:37.335867000 Z\n
17	Sale	6	create	35	\N	2014-02-06 21:43:10.177222	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 183\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:43:10.171109000 Z\nupdated_at:\n- \n- 2014-02-06 21:43:10.171109000 Z\nguid:\n- \n- ef7f34b8-d071-40e3-b211-cf5c11f81d20\nid:\n- \n- 6\n
18	Sale	6	update	35	---\nid: 6\nemail: parisliahyun@gmail.com\nguid: ef7f34b8-d071-40e3-b211-cf5c11f81d20\nexchange_id: 183\ncreated_at: 2014-02-06 21:43:10.171109000 Z\nupdated_at: 2014-02-06 21:43:10.171109000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:43:10.197363	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:43:10.171109000 Z\n- 2014-02-06 21:43:10.190290000 Z\n
19	Sale	6	update	35	---\nid: 6\nemail: parisliahyun@gmail.com\nguid: ef7f34b8-d071-40e3-b211-cf5c11f81d20\nexchange_id: 183\ncreated_at: 2014-02-06 21:43:10.171109000 Z\nupdated_at: 2014-02-06 21:43:10.190290000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:43:10.205629	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-06 21:43:10.190290000 Z\n- 2014-02-06 21:43:10.200038000 Z\n
20	Sale	6	update	35	---\nid: 6\nemail: parisliahyun@gmail.com\nguid: ef7f34b8-d071-40e3-b211-cf5c11f81d20\nexchange_id: 183\ncreated_at: 2014-02-06 21:43:10.171109000 Z\nupdated_at: 2014-02-06 21:43:10.200038000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:43:10.214997	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:43:10.200038000 Z\n- 2014-02-06 21:43:10.208895000 Z\n
21	Sale	7	create	35	\N	2014-02-06 21:46:45.569552	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 183\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:46:45.514466000 Z\nupdated_at:\n- \n- 2014-02-06 21:46:45.514466000 Z\nguid:\n- \n- e20272ae-3c18-4c69-881b-800578883ccb\nid:\n- \n- 7\n
22	Sale	7	update	35	---\nid: 7\nemail: parisliahyun@gmail.com\nguid: e20272ae-3c18-4c69-881b-800578883ccb\nexchange_id: 183\ncreated_at: 2014-02-06 21:46:45.514466000 Z\nupdated_at: 2014-02-06 21:46:45.514466000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:46:45.588234	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:46:45.514466000 Z\n- 2014-02-06 21:46:45.580552000 Z\n
23	Sale	7	update	35	---\nid: 7\nemail: parisliahyun@gmail.com\nguid: e20272ae-3c18-4c69-881b-800578883ccb\nexchange_id: 183\ncreated_at: 2014-02-06 21:46:45.514466000 Z\nupdated_at: 2014-02-06 21:46:45.580552000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:46:45.599256	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-06 21:46:45.580552000 Z\n- 2014-02-06 21:46:45.592171000 Z\n
24	Sale	7	update	35	---\nid: 7\nemail: parisliahyun@gmail.com\nguid: e20272ae-3c18-4c69-881b-800578883ccb\nexchange_id: 183\ncreated_at: 2014-02-06 21:46:45.514466000 Z\nupdated_at: 2014-02-06 21:46:45.592171000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:46:45.608479	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:46:45.592171000 Z\n- 2014-02-06 21:46:45.603942000 Z\n
25	Sale	8	create	35	\N	2014-02-06 21:47:44.134605	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 183\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:47:44.129228000 Z\nupdated_at:\n- \n- 2014-02-06 21:47:44.129228000 Z\nguid:\n- \n- ff0820f7-ce15-43be-b527-649d4021b16a\nid:\n- \n- 8\n
26	Sale	8	update	35	---\nid: 8\nemail: parisliahyun@gmail.com\nguid: ff0820f7-ce15-43be-b527-649d4021b16a\nexchange_id: 183\ncreated_at: 2014-02-06 21:47:44.129228000 Z\nupdated_at: 2014-02-06 21:47:44.129228000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:47:44.143861	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:47:44.129228000 Z\n- 2014-02-06 21:47:44.139250000 Z\n
27	Sale	8	update	35	---\nid: 8\nemail: parisliahyun@gmail.com\nguid: ff0820f7-ce15-43be-b527-649d4021b16a\nexchange_id: 183\ncreated_at: 2014-02-06 21:47:44.129228000 Z\nupdated_at: 2014-02-06 21:47:44.139250000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:47:44.18365	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-06 21:47:44.139250000 Z\n- 2014-02-06 21:47:44.179176000 Z\n
28	Sale	8	update	35	---\nid: 8\nemail: parisliahyun@gmail.com\nguid: ff0820f7-ce15-43be-b527-649d4021b16a\nexchange_id: 183\ncreated_at: 2014-02-06 21:47:44.129228000 Z\nupdated_at: 2014-02-06 21:47:44.179176000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:47:44.19245	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:47:44.179176000 Z\n- 2014-02-06 21:47:44.188231000 Z\n
29	Sale	9	create	35	\N	2014-02-06 21:47:58.688071	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 183\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:47:58.682214000 Z\nupdated_at:\n- \n- 2014-02-06 21:47:58.682214000 Z\nguid:\n- \n- ba966d79-f4f2-4e3a-b1ba-b5a066f78c42\nid:\n- \n- 9\n
30	Sale	9	update	35	---\nid: 9\nemail: parisliahyun@gmail.com\nguid: ba966d79-f4f2-4e3a-b1ba-b5a066f78c42\nexchange_id: 183\ncreated_at: 2014-02-06 21:47:58.682214000 Z\nupdated_at: 2014-02-06 21:47:58.682214000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:47:58.711443	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:47:58.682214000 Z\n- 2014-02-06 21:47:58.706089000 Z\n
31	Sale	9	update	35	---\nid: 9\nemail: parisliahyun@gmail.com\nguid: ba966d79-f4f2-4e3a-b1ba-b5a066f78c42\nexchange_id: 183\ncreated_at: 2014-02-06 21:47:58.682214000 Z\nupdated_at: 2014-02-06 21:47:58.706089000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:47:58.721805	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-06 21:47:58.706089000 Z\n- 2014-02-06 21:47:58.715115000 Z\n
32	Sale	9	update	35	---\nid: 9\nemail: parisliahyun@gmail.com\nguid: ba966d79-f4f2-4e3a-b1ba-b5a066f78c42\nexchange_id: 183\ncreated_at: 2014-02-06 21:47:58.682214000 Z\nupdated_at: 2014-02-06 21:47:58.715115000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:47:58.728543	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:47:58.715115000 Z\n- 2014-02-06 21:47:58.724202000 Z\n
33	Sale	10	create	35	\N	2014-02-06 21:52:09.138592	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 184\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:52:09.082268000 Z\nupdated_at:\n- \n- 2014-02-06 21:52:09.082268000 Z\nguid:\n- \n- 8ee58938-4b8d-4d34-9b2e-83bff737b4a4\nid:\n- \n- 10\n
34	Sale	10	update	35	---\nid: 10\nemail: parisliahyun@gmail.com\nguid: 8ee58938-4b8d-4d34-9b2e-83bff737b4a4\nexchange_id: 184\ncreated_at: 2014-02-06 21:52:09.082268000 Z\nupdated_at: 2014-02-06 21:52:09.082268000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:52:09.156404	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:52:09.082268000 Z\n- 2014-02-06 21:52:09.148439000 Z\n
35	Sale	10	update	35	---\nid: 10\nemail: parisliahyun@gmail.com\nguid: 8ee58938-4b8d-4d34-9b2e-83bff737b4a4\nexchange_id: 184\ncreated_at: 2014-02-06 21:52:09.082268000 Z\nupdated_at: 2014-02-06 21:52:09.148439000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:52:09.789805	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- 'Expired API key provided: sk_test_************************'\nupdated_at:\n- 2014-02-06 21:52:09.148439000 Z\n- 2014-02-06 21:52:09.778243000 Z\n
36	Sale	10	update	35	---\nid: 10\nemail: parisliahyun@gmail.com\nguid: 8ee58938-4b8d-4d34-9b2e-83bff737b4a4\nexchange_id: 184\ncreated_at: 2014-02-06 21:52:09.082268000 Z\nupdated_at: 2014-02-06 21:52:09.778243000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: 'Expired API key provided: sk_test_************************'\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:52:09.797725	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:52:09.778243000 Z\n- 2014-02-06 21:52:09.792909000 Z\n
37	Sale	11	create	35	\N	2014-02-06 21:54:10.970564	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 184\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:54:10.914528000 Z\nupdated_at:\n- \n- 2014-02-06 21:54:10.914528000 Z\nguid:\n- \n- 4eea4096-c70b-4c94-9d88-897dc93ad5cc\nid:\n- \n- 11\n
38	Sale	11	update	35	---\nid: 11\nemail: parisliahyun@gmail.com\nguid: 4eea4096-c70b-4c94-9d88-897dc93ad5cc\nexchange_id: 184\ncreated_at: 2014-02-06 21:54:10.914528000 Z\nupdated_at: 2014-02-06 21:54:10.914528000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:54:10.987171	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:54:10.914528000 Z\n- 2014-02-06 21:54:10.977516000 Z\n
39	Sale	11	update	35	---\nid: 11\nemail: parisliahyun@gmail.com\nguid: 4eea4096-c70b-4c94-9d88-897dc93ad5cc\nexchange_id: 184\ncreated_at: 2014-02-06 21:54:10.914528000 Z\nupdated_at: 2014-02-06 21:54:10.977516000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:54:11.877028	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You must supply either a card or a customer id\nupdated_at:\n- 2014-02-06 21:54:10.977516000 Z\n- 2014-02-06 21:54:11.868228000 Z\n
40	Sale	11	update	35	---\nid: 11\nemail: parisliahyun@gmail.com\nguid: 4eea4096-c70b-4c94-9d88-897dc93ad5cc\nexchange_id: 184\ncreated_at: 2014-02-06 21:54:10.914528000 Z\nupdated_at: 2014-02-06 21:54:11.868228000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You must supply either a card or a customer id\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:54:11.885196	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:54:11.868228000 Z\n- 2014-02-06 21:54:11.880188000 Z\n
42	Sale	12	update	35	---\nid: 12\nemail: parisliahyun@gmail.com\nguid: ceb79e4a-0790-4b1e-b7bc-2172feafa8b8\nexchange_id: 184\ncreated_at: 2014-02-06 21:54:28.788125000 Z\nupdated_at: 2014-02-06 21:54:28.788125000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:54:28.817633	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:54:28.788125000 Z\n- 2014-02-06 21:54:28.812775000 Z\n
43	Sale	12	update	35	---\nid: 12\nemail: parisliahyun@gmail.com\nguid: ceb79e4a-0790-4b1e-b7bc-2172feafa8b8\nexchange_id: 184\ncreated_at: 2014-02-06 21:54:28.788125000 Z\nupdated_at: 2014-02-06 21:54:28.812775000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:54:29.252055	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You must supply either a card or a customer id\nupdated_at:\n- 2014-02-06 21:54:28.812775000 Z\n- 2014-02-06 21:54:29.245314000 Z\n
44	Sale	12	update	35	---\nid: 12\nemail: parisliahyun@gmail.com\nguid: ceb79e4a-0790-4b1e-b7bc-2172feafa8b8\nexchange_id: 184\ncreated_at: 2014-02-06 21:54:28.788125000 Z\nupdated_at: 2014-02-06 21:54:29.245314000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You must supply either a card or a customer id\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:54:29.263745	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:54:29.245314000 Z\n- 2014-02-06 21:54:29.255518000 Z\n
45	Sale	13	create	35	\N	2014-02-06 21:55:21.660601	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 185\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:55:21.655329000 Z\nupdated_at:\n- \n- 2014-02-06 21:55:21.655329000 Z\nguid:\n- \n- e0f83f2a-014f-468f-8e7c-cff8ab120cc0\nid:\n- \n- 13\n
46	Sale	13	update	35	---\nid: 13\nemail: parisliahyun@gmail.com\nguid: e0f83f2a-014f-468f-8e7c-cff8ab120cc0\nexchange_id: 185\ncreated_at: 2014-02-06 21:55:21.655329000 Z\nupdated_at: 2014-02-06 21:55:21.655329000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:55:21.6713	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:55:21.655329000 Z\n- 2014-02-06 21:55:21.666840000 Z\n
47	Sale	13	update	35	---\nid: 13\nemail: parisliahyun@gmail.com\nguid: e0f83f2a-014f-468f-8e7c-cff8ab120cc0\nexchange_id: 185\ncreated_at: 2014-02-06 21:55:21.655329000 Z\nupdated_at: 2014-02-06 21:55:21.666840000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:55:22.575666	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You must supply either a card or a customer id\nupdated_at:\n- 2014-02-06 21:55:21.666840000 Z\n- 2014-02-06 21:55:22.570194000 Z\n
48	Sale	13	update	35	---\nid: 13\nemail: parisliahyun@gmail.com\nguid: e0f83f2a-014f-468f-8e7c-cff8ab120cc0\nexchange_id: 185\ncreated_at: 2014-02-06 21:55:21.655329000 Z\nupdated_at: 2014-02-06 21:55:22.570194000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You must supply either a card or a customer id\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:55:22.591726	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:55:22.570194000 Z\n- 2014-02-06 21:55:22.587454000 Z\n
49	Sale	14	create	35	\N	2014-02-06 21:57:34.316516	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 185\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 21:57:34.307116000 Z\nupdated_at:\n- \n- 2014-02-06 21:57:34.307116000 Z\nguid:\n- \n- d94a12dc-8be3-4a13-9eca-b404ca472fb4\nid:\n- \n- 14\n
50	Sale	14	update	35	---\nid: 14\nemail: parisliahyun@gmail.com\nguid: d94a12dc-8be3-4a13-9eca-b404ca472fb4\nexchange_id: 185\ncreated_at: 2014-02-06 21:57:34.307116000 Z\nupdated_at: 2014-02-06 21:57:34.307116000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:57:34.333847	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 21:57:34.307116000 Z\n- 2014-02-06 21:57:34.322460000 Z\n
51	Sale	14	update	35	---\nid: 14\nemail: parisliahyun@gmail.com\nguid: d94a12dc-8be3-4a13-9eca-b404ca472fb4\nexchange_id: 185\ncreated_at: 2014-02-06 21:57:34.307116000 Z\nupdated_at: 2014-02-06 21:57:34.322460000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:57:35.121689	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You must supply either a card or a customer id\nupdated_at:\n- 2014-02-06 21:57:34.322460000 Z\n- 2014-02-06 21:57:35.116299000 Z\n
52	Sale	14	update	35	---\nid: 14\nemail: parisliahyun@gmail.com\nguid: d94a12dc-8be3-4a13-9eca-b404ca472fb4\nexchange_id: 185\ncreated_at: 2014-02-06 21:57:34.307116000 Z\nupdated_at: 2014-02-06 21:57:35.116299000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You must supply either a card or a customer id\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 21:57:35.132031	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 21:57:35.116299000 Z\n- 2014-02-06 21:57:35.126843000 Z\n
53	Sale	15	create	35	\N	2014-02-06 22:06:13.59261	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 186\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-06 22:06:13.485002000 Z\nupdated_at:\n- \n- 2014-02-06 22:06:13.485002000 Z\nguid:\n- \n- cfbadba7-9f15-447e-8ec4-44aa079b228b\nid:\n- \n- 15\n
54	Sale	15	update	35	---\nid: 15\nemail: parisliahyun@gmail.com\nguid: cfbadba7-9f15-447e-8ec4-44aa079b228b\nexchange_id: 186\ncreated_at: 2014-02-06 22:06:13.485002000 Z\nupdated_at: 2014-02-06 22:06:13.485002000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 22:06:13.613469	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-06 22:06:13.485002000 Z\n- 2014-02-06 22:06:13.603611000 Z\n
55	Sale	15	update	35	---\nid: 15\nemail: parisliahyun@gmail.com\nguid: cfbadba7-9f15-447e-8ec4-44aa079b228b\nexchange_id: 186\ncreated_at: 2014-02-06 22:06:13.485002000 Z\nupdated_at: 2014-02-06 22:06:13.603611000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 22:06:16.936151	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You must supply either a card or a customer id\nupdated_at:\n- 2014-02-06 22:06:13.603611000 Z\n- 2014-02-06 22:06:16.928012000 Z\n
56	Sale	15	update	35	---\nid: 15\nemail: parisliahyun@gmail.com\nguid: cfbadba7-9f15-447e-8ec4-44aa079b228b\nexchange_id: 186\ncreated_at: 2014-02-06 22:06:13.485002000 Z\nupdated_at: 2014-02-06 22:06:16.928012000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You must supply either a card or a customer id\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-06 22:06:16.94382	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-06 22:06:16.928012000 Z\n- 2014-02-06 22:06:16.939335000 Z\n
57	Sale	16	create	37	\N	2014-02-07 21:41:35.837911	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 188\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-07 21:41:35.727103000 Z\nupdated_at:\n- \n- 2014-02-07 21:41:35.727103000 Z\nguid:\n- \n- b8c84d18-27bf-4846-9519-cc9958b0c49c\nid:\n- \n- 16\n
58	Sale	16	update	37	---\nid: 16\nemail: parisliahyun@gmail.com\nguid: b8c84d18-27bf-4846-9519-cc9958b0c49c\nexchange_id: 188\ncreated_at: 2014-02-07 21:41:35.727103000 Z\nupdated_at: 2014-02-07 21:41:35.727103000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-07 21:41:35.956525	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-07 21:41:35.727103000 Z\n- 2014-02-07 21:41:35.949913000 Z\n
59	Sale	16	update	37	---\nid: 16\nemail: parisliahyun@gmail.com\nguid: b8c84d18-27bf-4846-9519-cc9958b0c49c\nexchange_id: 188\ncreated_at: 2014-02-07 21:41:35.727103000 Z\nupdated_at: 2014-02-07 21:41:35.949913000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-07 21:41:35.968943	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-07 21:41:35.949913000 Z\n- 2014-02-07 21:41:35.960294000 Z\n
60	Sale	16	update	37	---\nid: 16\nemail: parisliahyun@gmail.com\nguid: b8c84d18-27bf-4846-9519-cc9958b0c49c\nexchange_id: 188\ncreated_at: 2014-02-07 21:41:35.727103000 Z\nupdated_at: 2014-02-07 21:41:35.960294000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-07 21:41:35.976481	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-07 21:41:35.960294000 Z\n- 2014-02-07 21:41:35.971739000 Z\n
61	Sale	17	create	37	\N	2014-02-07 21:44:37.139687	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 80\nemail:\n- \n- parisliahyun@gmail.com\nexchange_id:\n- \n- 188\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-07 21:44:37.001876000 Z\nupdated_at:\n- \n- 2014-02-07 21:44:37.001876000 Z\nguid:\n- \n- 5afa4912-a37b-47c9-b21b-69dbca1e25b9\nid:\n- \n- 17\n
62	Sale	17	update	37	---\nid: 17\nemail: parisliahyun@gmail.com\nguid: 5afa4912-a37b-47c9-b21b-69dbca1e25b9\nexchange_id: 188\ncreated_at: 2014-02-07 21:44:37.001876000 Z\nupdated_at: 2014-02-07 21:44:37.001876000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-07 21:44:37.157326	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-07 21:44:37.001876000 Z\n- 2014-02-07 21:44:37.147975000 Z\n
63	Sale	17	update	37	---\nid: 17\nemail: parisliahyun@gmail.com\nguid: 5afa4912-a37b-47c9-b21b-69dbca1e25b9\nexchange_id: 188\ncreated_at: 2014-02-07 21:44:37.001876000 Z\nupdated_at: 2014-02-07 21:44:37.147975000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \namount: 80\nvendor_id: \n	2014-02-07 21:44:37.181216	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-07 21:44:37.147975000 Z\n- 2014-02-07 21:44:37.165324000 Z\n
64	Sale	17	update	37	---\nid: 17\nemail: parisliahyun@gmail.com\nguid: 5afa4912-a37b-47c9-b21b-69dbca1e25b9\nexchange_id: 188\ncreated_at: 2014-02-07 21:44:37.001876000 Z\nupdated_at: 2014-02-07 21:44:37.165324000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \namount: 80\nvendor_id: \n	2014-02-07 21:44:37.188705	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-07 21:44:37.165324000 Z\n- 2014-02-07 21:44:37.183804000 Z\n
65	Sale	18	create	39	\N	2014-02-12 19:41:23.108856	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 555\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 201\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-12 19:41:22.933040000 Z\nupdated_at:\n- \n- 2014-02-12 19:41:22.933040000 Z\nguid:\n- \n- 64362c7e-5de2-4125-a734-8c3392b5796b\nid:\n- \n- 18\n
66	Sale	18	update	39	---\nid: 18\nemail: \nguid: 64362c7e-5de2-4125-a734-8c3392b5796b\nexchange_id: 201\ncreated_at: 2014-02-12 19:41:22.933040000 Z\nupdated_at: 2014-02-12 19:41:22.933040000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: \namount: 555\n	2014-02-12 19:41:23.151476	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-12 19:41:22.933040000 Z\n- 2014-02-12 19:41:23.139554000 Z\n
67	Sale	18	update	39	---\nid: 18\nemail: \nguid: 64362c7e-5de2-4125-a734-8c3392b5796b\nexchange_id: 201\ncreated_at: 2014-02-12 19:41:22.933040000 Z\nupdated_at: 2014-02-12 19:41:23.139554000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: \namount: 555\n	2014-02-12 19:41:23.262842	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-12 19:41:23.139554000 Z\n- 2014-02-12 19:41:23.256073000 Z\n
68	Sale	18	update	39	---\nid: 18\nemail: \nguid: 64362c7e-5de2-4125-a734-8c3392b5796b\nexchange_id: 201\ncreated_at: 2014-02-12 19:41:22.933040000 Z\nupdated_at: 2014-02-12 19:41:23.256073000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 39\ncustomer_id: \namount: 555\n	2014-02-12 19:41:23.270562	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-12 19:41:23.256073000 Z\n- 2014-02-12 19:41:23.265552000 Z\n
69	Sale	19	create	39	\N	2014-02-12 21:39:31.698186	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 600\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 202\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-12 21:39:31.633955000 Z\nupdated_at:\n- \n- 2014-02-12 21:39:31.633955000 Z\nguid:\n- \n- 03bd3a0f-3125-4c88-9db6-6bf0c91bfe93\nid:\n- \n- 19\n
165	Sale	47	create	39	\N	2014-02-18 23:47:06.815558	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 253\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 23:47:06.617764000 Z\nupdated_at:\n- \n- 2014-02-18 23:47:06.617764000 Z\nguid:\n- \n- 421b89ac-4106-4bb7-bb25-13b120ff106e\nid:\n- \n- 47\n
70	Sale	19	update	39	---\nid: 19\nemail: \nguid: 03bd3a0f-3125-4c88-9db6-6bf0c91bfe93\nexchange_id: 202\ncreated_at: 2014-02-12 21:39:31.633955000 Z\nupdated_at: 2014-02-12 21:39:31.633955000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 600\n	2014-02-12 21:39:31.714451	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-12 21:39:31.633955000 Z\n- 2014-02-12 21:39:31.707873000 Z\n
71	Sale	19	update	39	---\nid: 19\nemail: \nguid: 03bd3a0f-3125-4c88-9db6-6bf0c91bfe93\nexchange_id: 202\ncreated_at: 2014-02-12 21:39:31.633955000 Z\nupdated_at: 2014-02-12 21:39:31.707873000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 600\n	2014-02-12 21:39:31.822955	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-12 21:39:31.707873000 Z\n- 2014-02-12 21:39:31.814240000 Z\n
72	Sale	19	update	39	---\nid: 19\nemail: \nguid: 03bd3a0f-3125-4c88-9db6-6bf0c91bfe93\nexchange_id: 202\ncreated_at: 2014-02-12 21:39:31.633955000 Z\nupdated_at: 2014-02-12 21:39:31.814240000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 600\n	2014-02-12 21:39:31.844493	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-12 21:39:31.814240000 Z\n- 2014-02-12 21:39:31.839793000 Z\n
73	Sale	20	create	41	\N	2014-02-13 20:38:25.538429	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 322\nvendor_id:\n- \n- 41\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 212\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-13 20:38:25.332632000 Z\nupdated_at:\n- \n- 2014-02-13 20:38:25.332632000 Z\nguid:\n- \n- 94328c08-706e-427a-90f4-a7d53f368e80\nid:\n- \n- 20\n
74	Sale	20	update	41	---\nid: 20\nemail: \nguid: 94328c08-706e-427a-90f4-a7d53f368e80\nexchange_id: 212\ncreated_at: 2014-02-13 20:38:25.332632000 Z\nupdated_at: 2014-02-13 20:38:25.332632000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 41\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 322\n	2014-02-13 20:38:25.556034	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-13 20:38:25.332632000 Z\n- 2014-02-13 20:38:25.548898000 Z\n
75	Sale	20	update	41	---\nid: 20\nemail: \nguid: 94328c08-706e-427a-90f4-a7d53f368e80\nexchange_id: 212\ncreated_at: 2014-02-13 20:38:25.332632000 Z\nupdated_at: 2014-02-13 20:38:25.548898000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 41\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 322\n	2014-02-13 20:38:25.586866	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-13 20:38:25.548898000 Z\n- 2014-02-13 20:38:25.560700000 Z\n
76	Sale	20	update	41	---\nid: 20\nemail: \nguid: 94328c08-706e-427a-90f4-a7d53f368e80\nexchange_id: 212\ncreated_at: 2014-02-13 20:38:25.332632000 Z\nupdated_at: 2014-02-13 20:38:25.560700000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 41\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 322\n	2014-02-13 20:38:25.615005	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-13 20:38:25.560700000 Z\n- 2014-02-13 20:38:25.591987000 Z\n
77	Sale	21	create	41	\N	2014-02-13 20:40:12.854296	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 222\nvendor_id:\n- \n- 41\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 213\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-13 20:40:12.849548000 Z\nupdated_at:\n- \n- 2014-02-13 20:40:12.849548000 Z\nguid:\n- \n- 927d736f-1408-47dc-bd7e-bec15b4fc4cd\nid:\n- \n- 21\n
78	Sale	21	update	41	---\nid: 21\nemail: \nguid: 927d736f-1408-47dc-bd7e-bec15b4fc4cd\nexchange_id: 213\ncreated_at: 2014-02-13 20:40:12.849548000 Z\nupdated_at: 2014-02-13 20:40:12.849548000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 41\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 222\n	2014-02-13 20:40:12.864703	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-13 20:40:12.849548000 Z\n- 2014-02-13 20:40:12.858298000 Z\n
79	Sale	21	update	41	---\nid: 21\nemail: \nguid: 927d736f-1408-47dc-bd7e-bec15b4fc4cd\nexchange_id: 213\ncreated_at: 2014-02-13 20:40:12.849548000 Z\nupdated_at: 2014-02-13 20:40:12.858298000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 41\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 222\n	2014-02-13 20:40:12.900784	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-13 20:40:12.858298000 Z\n- 2014-02-13 20:40:12.893889000 Z\n
80	Sale	21	update	41	---\nid: 21\nemail: \nguid: 927d736f-1408-47dc-bd7e-bec15b4fc4cd\nexchange_id: 213\ncreated_at: 2014-02-13 20:40:12.849548000 Z\nupdated_at: 2014-02-13 20:40:12.893889000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 41\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 222\n	2014-02-13 20:40:12.915648	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-13 20:40:12.893889000 Z\n- 2014-02-13 20:40:12.903501000 Z\n
81	Sale	22	create	39	\N	2014-02-14 04:06:52.904108	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 555\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 218\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-14 04:06:52.818795000 Z\nupdated_at:\n- \n- 2014-02-14 04:06:52.818795000 Z\nguid:\n- \n- 809c2e68-c204-4cf0-8772-50aa1e165038\nid:\n- \n- 22\n
82	Sale	22	update	39	---\nid: 22\nemail: \nguid: 809c2e68-c204-4cf0-8772-50aa1e165038\nexchange_id: 218\ncreated_at: 2014-02-14 04:06:52.818795000 Z\nupdated_at: 2014-02-14 04:06:52.818795000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 555\n	2014-02-14 04:06:52.939046	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-14 04:06:52.818795000 Z\n- 2014-02-14 04:06:52.932477000 Z\n
83	Sale	22	update	39	---\nid: 22\nemail: \nguid: 809c2e68-c204-4cf0-8772-50aa1e165038\nexchange_id: 218\ncreated_at: 2014-02-14 04:06:52.818795000 Z\nupdated_at: 2014-02-14 04:06:52.932477000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 555\n	2014-02-14 04:06:52.960353	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-14 04:06:52.932477000 Z\n- 2014-02-14 04:06:52.954193000 Z\n
84	Sale	22	update	39	---\nid: 22\nemail: \nguid: 809c2e68-c204-4cf0-8772-50aa1e165038\nexchange_id: 218\ncreated_at: 2014-02-14 04:06:52.818795000 Z\nupdated_at: 2014-02-14 04:06:52.954193000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 555\n	2014-02-14 04:06:53.003808	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-14 04:06:52.954193000 Z\n- 2014-02-14 04:06:52.996741000 Z\n
85	Sale	23	create	39	\N	2014-02-15 01:18:51.752445	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 500\nsendangel_fee:\n- \n- 100\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 219\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-15 01:18:51.571745000 Z\nupdated_at:\n- \n- 2014-02-15 01:18:51.571745000 Z\nguid:\n- \n- a8b4c31b-15f5-41b4-91d3-7c1c352b2453\nid:\n- \n- 23\n
86	Sale	23	update	39	---\nid: 23\nemail: \nguid: a8b4c31b-15f5-41b4-91d3-7c1c352b2453\nexchange_id: 219\ncreated_at: 2014-02-15 01:18:51.571745000 Z\nupdated_at: 2014-02-15 01:18:51.571745000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 500\nsendangel_fee: 100\n	2014-02-15 01:18:51.77562	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-15 01:18:51.571745000 Z\n- 2014-02-15 01:18:51.761814000 Z\n
87	Sale	23	update	39	---\nid: 23\nemail: \nguid: a8b4c31b-15f5-41b4-91d3-7c1c352b2453\nexchange_id: 219\ncreated_at: 2014-02-15 01:18:51.571745000 Z\nupdated_at: 2014-02-15 01:18:51.761814000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 500\nsendangel_fee: 100\n	2014-02-15 01:18:51.787309	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-15 01:18:51.761814000 Z\n- 2014-02-15 01:18:51.780756000 Z\n
88	Sale	23	update	39	---\nid: 23\nemail: \nguid: a8b4c31b-15f5-41b4-91d3-7c1c352b2453\nexchange_id: 219\ncreated_at: 2014-02-15 01:18:51.571745000 Z\nupdated_at: 2014-02-15 01:18:51.780756000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 500\nsendangel_fee: 100\n	2014-02-15 01:18:51.799954	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-15 01:18:51.780756000 Z\n- 2014-02-15 01:18:51.790449000 Z\n
89	Sale	24	create	39	\N	2014-02-15 03:40:07.035177	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 433\nsendangel_fee:\n- \n- 86\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 221\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-15 03:40:06.847070000 Z\nupdated_at:\n- \n- 2014-02-15 03:40:06.847070000 Z\nguid:\n- \n- 31f5ae41-0a4c-4ea4-9af0-8adea11e6ebf\nid:\n- \n- 24\n
90	Sale	24	update	39	---\nid: 24\nemail: \nguid: 31f5ae41-0a4c-4ea4-9af0-8adea11e6ebf\nexchange_id: 221\ncreated_at: 2014-02-15 03:40:06.847070000 Z\nupdated_at: 2014-02-15 03:40:06.847070000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 433\nsendangel_fee: 86\n	2014-02-15 03:40:07.050925	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-15 03:40:06.847070000 Z\n- 2014-02-15 03:40:07.043756000 Z\n
91	Sale	24	update	39	---\nid: 24\nemail: \nguid: 31f5ae41-0a4c-4ea4-9af0-8adea11e6ebf\nexchange_id: 221\ncreated_at: 2014-02-15 03:40:06.847070000 Z\nupdated_at: 2014-02-15 03:40:07.043756000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 433\nsendangel_fee: 86\n	2014-02-15 03:40:07.063005	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-15 03:40:07.043756000 Z\n- 2014-02-15 03:40:07.054346000 Z\n
92	Sale	24	update	39	---\nid: 24\nemail: \nguid: 31f5ae41-0a4c-4ea4-9af0-8adea11e6ebf\nexchange_id: 221\ncreated_at: 2014-02-15 03:40:06.847070000 Z\nupdated_at: 2014-02-15 03:40:07.054346000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 433\nsendangel_fee: 86\n	2014-02-15 03:40:07.079484	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-15 03:40:07.054346000 Z\n- 2014-02-15 03:40:07.074289000 Z\n
93	Sale	25	create	39	\N	2014-02-15 03:48:45.593183	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 222\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-15 03:48:45.549033000 Z\nupdated_at:\n- \n- 2014-02-15 03:48:45.549033000 Z\nguid:\n- \n- 7f3f1e52-fb01-4826-9c41-4eb5d4b14707\nid:\n- \n- 25\n
94	Sale	25	update	39	---\nid: 25\nemail: \nguid: 7f3f1e52-fb01-4826-9c41-4eb5d4b14707\nexchange_id: 222\ncreated_at: 2014-02-15 03:48:45.549033000 Z\nupdated_at: 2014-02-15 03:48:45.549033000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 300\nsendangel_fee: 60\n	2014-02-15 03:48:45.632064	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-15 03:48:45.549033000 Z\n- 2014-02-15 03:48:45.624142000 Z\n
95	Sale	25	update	39	---\nid: 25\nemail: \nguid: 7f3f1e52-fb01-4826-9c41-4eb5d4b14707\nexchange_id: 222\ncreated_at: 2014-02-15 03:48:45.549033000 Z\nupdated_at: 2014-02-15 03:48:45.624142000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 300\nsendangel_fee: 60\n	2014-02-15 03:48:45.641109	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-15 03:48:45.624142000 Z\n- 2014-02-15 03:48:45.635406000 Z\n
96	Sale	25	update	39	---\nid: 25\nemail: \nguid: 7f3f1e52-fb01-4826-9c41-4eb5d4b14707\nexchange_id: 222\ncreated_at: 2014-02-15 03:48:45.549033000 Z\nupdated_at: 2014-02-15 03:48:45.635406000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 300\nsendangel_fee: 60\n	2014-02-15 03:48:45.650755	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-15 03:48:45.635406000 Z\n- 2014-02-15 03:48:45.645751000 Z\n
97	Sale	26	create	39	\N	2014-02-18 03:33:01.293454	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 225\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 03:33:01.202374000 Z\nupdated_at:\n- \n- 2014-02-18 03:33:01.202374000 Z\nguid:\n- \n- 8fb79421-fd60-4234-ad1d-f38ebd0fe664\nid:\n- \n- 26\n
99	Sale	27	create	39	\N	2014-02-18 03:47:43.216716	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 226\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 03:47:43.171320000 Z\nupdated_at:\n- \n- 2014-02-18 03:47:43.171320000 Z\nguid:\n- \n- 99b23337-8a56-4546-96d0-50164097d7ea\nid:\n- \n- 27\n
101	Sale	28	create	39	\N	2014-02-18 04:09:53.768813	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 455\nsendangel_fee:\n- \n- 91\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 227\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 04:09:53.759116000 Z\nupdated_at:\n- \n- 2014-02-18 04:09:53.759116000 Z\nguid:\n- \n- 98901422-3c63-436c-8ef8-08ba2f29d4ca\nid:\n- \n- 28\n
103	Sale	29	create	39	\N	2014-02-18 04:33:54.161487	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 500\nsendangel_fee:\n- \n- 100\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 228\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 04:33:54.079068000 Z\nupdated_at:\n- \n- 2014-02-18 04:33:54.079068000 Z\nguid:\n- \n- a1617d29-01ed-4859-a30c-51b0a2a82f22\nid:\n- \n- 29\n
104	Sale	29	update	39	---\nid: 29\nemail: \nguid: a1617d29-01ed-4859-a30c-51b0a2a82f22\nexchange_id: 228\ncreated_at: 2014-02-18 04:33:54.079068000 Z\nupdated_at: 2014-02-18 04:33:54.079068000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 500\nsendangel_fee: 100\n	2014-02-18 04:33:54.178122	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 04:33:54.079068000 Z\n- 2014-02-18 04:33:54.171619000 Z\n
105	Sale	29	update	39	---\nid: 29\nemail: \nguid: a1617d29-01ed-4859-a30c-51b0a2a82f22\nexchange_id: 228\ncreated_at: 2014-02-18 04:33:54.079068000 Z\nupdated_at: 2014-02-18 04:33:54.171619000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 500\nsendangel_fee: 100\n	2014-02-18 04:33:54.188963	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-18 04:33:54.171619000 Z\n- 2014-02-18 04:33:54.181954000 Z\n
106	Sale	29	update	39	---\nid: 29\nemail: \nguid: a1617d29-01ed-4859-a30c-51b0a2a82f22\nexchange_id: 228\ncreated_at: 2014-02-18 04:33:54.079068000 Z\nupdated_at: 2014-02-18 04:33:54.181954000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 500\nsendangel_fee: 100\n	2014-02-18 04:33:54.196531	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 04:33:54.181954000 Z\n- 2014-02-18 04:33:54.191954000 Z\n
107	Sale	30	create	39	\N	2014-02-18 04:59:25.804049	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\nvendor_id:\n- \n- 39\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nexchange_id:\n- \n- 229\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 04:59:25.752794000 Z\nupdated_at:\n- \n- 2014-02-18 04:59:25.752794000 Z\nguid:\n- \n- b98e104b-7f33-4644-8d27-bbb29aea4c4e\nid:\n- \n- 30\n
108	Sale	30	update	39	---\nid: 30\nemail: \nguid: b98e104b-7f33-4644-8d27-bbb29aea4c4e\nexchange_id: 229\ncreated_at: 2014-02-18 04:59:25.752794000 Z\nupdated_at: 2014-02-18 04:59:25.752794000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 300\nsendangel_fee: 60\n	2014-02-18 04:59:25.830863	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 04:59:25.752794000 Z\n- 2014-02-18 04:59:25.824332000 Z\n
109	Sale	30	update	39	---\nid: 30\nemail: \nguid: b98e104b-7f33-4644-8d27-bbb29aea4c4e\nexchange_id: 229\ncreated_at: 2014-02-18 04:59:25.752794000 Z\nupdated_at: 2014-02-18 04:59:25.824332000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 300\nsendangel_fee: 60\n	2014-02-18 04:59:25.840306	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You can\n  generate API keys from the Stripe web interface. See https://stripe.com/api for\n  details, or email support@stripe.com if you have any questions.\nupdated_at:\n- 2014-02-18 04:59:25.824332000 Z\n- 2014-02-18 04:59:25.834670000 Z\n
110	Sale	30	update	39	---\nid: 30\nemail: \nguid: b98e104b-7f33-4644-8d27-bbb29aea4c4e\nexchange_id: 229\ncreated_at: 2014-02-18 04:59:25.752794000 Z\nupdated_at: 2014-02-18 04:59:25.834670000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: No API key provided. Set your API key using "Stripe.api_key = <API-KEY>". You\n  can generate API keys from the Stripe web interface. See https://stripe.com/api\n  for details, or email support@stripe.com if you have any questions.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 300\nsendangel_fee: 60\n	2014-02-18 04:59:25.849531	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 04:59:25.834670000 Z\n- 2014-02-18 04:59:25.844958000 Z\n
111	Sale	31	create	39	\N	2014-02-18 06:05:19.629893	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 236\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:05:19.553359000 Z\nupdated_at:\n- \n- 2014-02-18 06:05:19.553359000 Z\nguid:\n- \n- 80970910-fb32-4a89-b30d-42ef6ddcb57d\nid:\n- \n- 31\n
113	Sale	32	create	39	\N	2014-02-18 06:08:24.231808	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 237\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:08:24.220084000 Z\nupdated_at:\n- \n- 2014-02-18 06:08:24.220084000 Z\nguid:\n- \n- 72762fc5-51ba-4633-b064-910d36ed3c71\nid:\n- \n- 32\n
114	Sale	32	update	39	---\nid: 32\nemail: \nguid: 72762fc5-51ba-4633-b064-910d36ed3c71\nexchange_id: 237\ncreated_at: 2014-02-18 06:08:24.220084000 Z\nupdated_at: 2014-02-18 06:08:24.220084000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:08:24.245177	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:08:24.220084000 Z\n- 2014-02-18 06:08:24.237545000 Z\n
115	Sale	32	update	39	---\nid: 32\nemail: \nguid: 72762fc5-51ba-4633-b064-910d36ed3c71\nexchange_id: 237\ncreated_at: 2014-02-18 06:08:24.220084000 Z\nupdated_at: 2014-02-18 06:08:24.237545000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:08:24.967581	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- Must provide Stripe Connect OAuth key to be able to use customer parameter. See\n  https://stripe.com/docs/api#create_card_token for more details.\nupdated_at:\n- 2014-02-18 06:08:24.237545000 Z\n- 2014-02-18 06:08:24.960184000 Z\n
116	Sale	32	update	39	---\nid: 32\nemail: \nguid: 72762fc5-51ba-4633-b064-910d36ed3c71\nexchange_id: 237\ncreated_at: 2014-02-18 06:08:24.220084000 Z\nupdated_at: 2014-02-18 06:08:24.960184000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: Must provide Stripe Connect OAuth key to be able to use customer parameter.\n  See https://stripe.com/docs/api#create_card_token for more details.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:08:24.975628	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:08:24.960184000 Z\n- 2014-02-18 06:08:24.970690000 Z\n
117	Sale	33	create	39	\N	2014-02-18 06:12:42.768532	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 238\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:12:42.551251000 Z\nupdated_at:\n- \n- 2014-02-18 06:12:42.551251000 Z\nguid:\n- \n- 9ef9e54c-e1d3-48e2-811d-f66606e1fded\nid:\n- \n- 33\n
118	Sale	33	update	39	---\nid: 33\nemail: \nguid: 9ef9e54c-e1d3-48e2-811d-f66606e1fded\nexchange_id: 238\ncreated_at: 2014-02-18 06:12:42.551251000 Z\nupdated_at: 2014-02-18 06:12:42.551251000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:12:42.793758	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:12:42.551251000 Z\n- 2014-02-18 06:12:42.782656000 Z\n
119	Sale	33	update	39	---\nid: 33\nemail: \nguid: 9ef9e54c-e1d3-48e2-811d-f66606e1fded\nexchange_id: 238\ncreated_at: 2014-02-18 06:12:42.551251000 Z\nupdated_at: 2014-02-18 06:12:42.782656000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:12:43.483596	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- Must provide Stripe Connect OAuth key to be able to use customer parameter. See\n  https://stripe.com/docs/api#create_card_token for more details.\nupdated_at:\n- 2014-02-18 06:12:42.782656000 Z\n- 2014-02-18 06:12:43.475396000 Z\n
120	Sale	33	update	39	---\nid: 33\nemail: \nguid: 9ef9e54c-e1d3-48e2-811d-f66606e1fded\nexchange_id: 238\ncreated_at: 2014-02-18 06:12:42.551251000 Z\nupdated_at: 2014-02-18 06:12:43.475396000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: Must provide Stripe Connect OAuth key to be able to use customer parameter.\n  See https://stripe.com/docs/api#create_card_token for more details.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:12:43.494437	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:12:43.475396000 Z\n- 2014-02-18 06:12:43.489363000 Z\n
121	Sale	34	create	39	\N	2014-02-18 06:15:11.427353	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 239\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:15:11.417078000 Z\nupdated_at:\n- \n- 2014-02-18 06:15:11.417078000 Z\nguid:\n- \n- 5b02c339-865b-4a8c-bae6-56ea83cfad00\nid:\n- \n- 34\n
122	Sale	34	update	39	---\nid: 34\nemail: \nguid: 5b02c339-865b-4a8c-bae6-56ea83cfad00\nexchange_id: 239\ncreated_at: 2014-02-18 06:15:11.417078000 Z\nupdated_at: 2014-02-18 06:15:11.417078000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:15:11.440965	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:15:11.417078000 Z\n- 2014-02-18 06:15:11.433646000 Z\n
123	Sale	34	update	39	---\nid: 34\nemail: \nguid: 5b02c339-865b-4a8c-bae6-56ea83cfad00\nexchange_id: 239\ncreated_at: 2014-02-18 06:15:11.417078000 Z\nupdated_at: 2014-02-18 06:15:11.433646000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:17:24.400297	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- Must provide Stripe Connect OAuth key to be able to use customer parameter. See\n  https://stripe.com/docs/api#create_card_token for more details.\nupdated_at:\n- 2014-02-18 06:15:11.433646000 Z\n- 2014-02-18 06:17:24.393828000 Z\n
124	Sale	34	update	39	---\nid: 34\nemail: \nguid: 5b02c339-865b-4a8c-bae6-56ea83cfad00\nexchange_id: 239\ncreated_at: 2014-02-18 06:15:11.417078000 Z\nupdated_at: 2014-02-18 06:17:24.393828000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: Must provide Stripe Connect OAuth key to be able to use customer parameter.\n  See https://stripe.com/docs/api#create_card_token for more details.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:17:24.410701	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:17:24.393828000 Z\n- 2014-02-18 06:17:24.403397000 Z\n
125	Sale	35	create	39	\N	2014-02-18 06:23:43.653667	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\ncustomer_id:\n- \n- cus_3U8nd1BJTdhB7v\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 240\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:23:43.547271000 Z\nupdated_at:\n- \n- 2014-02-18 06:23:43.547271000 Z\nguid:\n- \n- 17bcabe4-079e-4394-a8a3-57fa2f9b4ebd\nid:\n- \n- 35\n
126	Sale	35	update	39	---\nid: 35\nemail: \nguid: 17bcabe4-079e-4394-a8a3-57fa2f9b4ebd\nexchange_id: 240\ncreated_at: 2014-02-18 06:23:43.547271000 Z\nupdated_at: 2014-02-18 06:23:43.547271000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:23:43.671123	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:23:43.547271000 Z\n- 2014-02-18 06:23:43.664274000 Z\n
127	Sale	35	update	39	---\nid: 35\nemail: \nguid: 17bcabe4-079e-4394-a8a3-57fa2f9b4ebd\nexchange_id: 240\ncreated_at: 2014-02-18 06:23:43.547271000 Z\nupdated_at: 2014-02-18 06:23:43.664274000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:24:02.971989	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You can only create tokens from customers with an active card\nupdated_at:\n- 2014-02-18 06:23:43.664274000 Z\n- 2014-02-18 06:24:02.962859000 Z\n
128	Sale	35	update	39	---\nid: 35\nemail: \nguid: 17bcabe4-079e-4394-a8a3-57fa2f9b4ebd\nexchange_id: 240\ncreated_at: 2014-02-18 06:23:43.547271000 Z\nupdated_at: 2014-02-18 06:24:02.962859000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You can only create tokens from customers with an active card\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3U8nd1BJTdhB7v\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:24:02.981617	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:24:02.962859000 Z\n- 2014-02-18 06:24:02.976537000 Z\n
129	Sale	36	create	39	\N	2014-02-18 06:26:32.072114	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 241\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:26:32.063050000 Z\nupdated_at:\n- \n- 2014-02-18 06:26:32.063050000 Z\nguid:\n- \n- 4275ad41-eb5b-4ce8-925c-9e24957a371f\nid:\n- \n- 36\n
130	Sale	36	update	39	---\nid: 36\nemail: \nguid: 4275ad41-eb5b-4ce8-925c-9e24957a371f\nexchange_id: 241\ncreated_at: 2014-02-18 06:26:32.063050000 Z\nupdated_at: 2014-02-18 06:26:32.063050000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:26:32.084766	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:26:32.063050000 Z\n- 2014-02-18 06:26:32.078878000 Z\n
131	Sale	36	update	39	---\nid: 36\nemail: \nguid: 4275ad41-eb5b-4ce8-925c-9e24957a371f\nexchange_id: 241\ncreated_at: 2014-02-18 06:26:32.063050000 Z\nupdated_at: 2014-02-18 06:26:32.078878000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:26:32.821542	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You can only create tokens from customers with an active card\nupdated_at:\n- 2014-02-18 06:26:32.078878000 Z\n- 2014-02-18 06:26:32.811872000 Z\n
132	Sale	36	update	39	---\nid: 36\nemail: \nguid: 4275ad41-eb5b-4ce8-925c-9e24957a371f\nexchange_id: 241\ncreated_at: 2014-02-18 06:26:32.063050000 Z\nupdated_at: 2014-02-18 06:26:32.811872000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You can only create tokens from customers with an active card\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:26:32.833141	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:26:32.811872000 Z\n- 2014-02-18 06:26:32.827054000 Z\n
133	Sale	37	create	39	\N	2014-02-18 06:37:16.539728	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 242\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:37:16.469241000 Z\nupdated_at:\n- \n- 2014-02-18 06:37:16.469241000 Z\nguid:\n- \n- b88dbaed-8154-4adb-8e6e-d5fd0d5f790e\nid:\n- \n- 37\n
134	Sale	37	update	39	---\nid: 37\nemail: \nguid: b88dbaed-8154-4adb-8e6e-d5fd0d5f790e\nexchange_id: 242\ncreated_at: 2014-02-18 06:37:16.469241000 Z\nupdated_at: 2014-02-18 06:37:16.469241000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:37:16.554678	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:37:16.469241000 Z\n- 2014-02-18 06:37:16.547461000 Z\n
135	Sale	37	update	39	---\nid: 37\nemail: \nguid: b88dbaed-8154-4adb-8e6e-d5fd0d5f790e\nexchange_id: 242\ncreated_at: 2014-02-18 06:37:16.469241000 Z\nupdated_at: 2014-02-18 06:37:16.547461000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:37:17.334935	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You can only create tokens from customers with an active card\nupdated_at:\n- 2014-02-18 06:37:16.547461000 Z\n- 2014-02-18 06:37:17.324118000 Z\n
136	Sale	37	update	39	---\nid: 37\nemail: \nguid: b88dbaed-8154-4adb-8e6e-d5fd0d5f790e\nexchange_id: 242\ncreated_at: 2014-02-18 06:37:16.469241000 Z\nupdated_at: 2014-02-18 06:37:17.324118000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You can only create tokens from customers with an active card\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:37:17.349136	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:37:17.324118000 Z\n- 2014-02-18 06:37:17.341978000 Z\n
137	Sale	38	create	39	\N	2014-02-18 06:38:57.973399	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 243\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:38:57.961403000 Z\nupdated_at:\n- \n- 2014-02-18 06:38:57.961403000 Z\nguid:\n- \n- e2520555-055c-4639-8721-9d378404a3ab\nid:\n- \n- 38\n
138	Sale	38	update	39	---\nid: 38\nemail: \nguid: e2520555-055c-4639-8721-9d378404a3ab\nexchange_id: 243\ncreated_at: 2014-02-18 06:38:57.961403000 Z\nupdated_at: 2014-02-18 06:38:57.961403000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 06:38:57.98566	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:38:57.961403000 Z\n- 2014-02-18 06:38:57.978191000 Z\n
139	Sale	38	update	39	---\nid: 38\nemail: \nguid: e2520555-055c-4639-8721-9d378404a3ab\nexchange_id: 243\ncreated_at: 2014-02-18 06:38:57.961403000 Z\nupdated_at: 2014-02-18 06:38:57.978191000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 06:38:58.737499	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You can only create tokens from customers with an active card\nupdated_at:\n- 2014-02-18 06:38:57.978191000 Z\n- 2014-02-18 06:38:58.730311000 Z\n
140	Sale	38	update	39	---\nid: 38\nemail: \nguid: e2520555-055c-4639-8721-9d378404a3ab\nexchange_id: 243\ncreated_at: 2014-02-18 06:38:57.961403000 Z\nupdated_at: 2014-02-18 06:38:58.730311000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You can only create tokens from customers with an active card\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 06:38:58.747306	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:38:58.730311000 Z\n- 2014-02-18 06:38:58.741294000 Z\n
141	Sale	39	create	39	\N	2014-02-18 06:42:05.357804	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 244\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:42:05.348247000 Z\nupdated_at:\n- \n- 2014-02-18 06:42:05.348247000 Z\nguid:\n- \n- 91d40cfc-b16a-43aa-bd94-fe9fa9c48dcb\nid:\n- \n- 39\n
142	Sale	39	update	39	---\nid: 39\nemail: \nguid: 91d40cfc-b16a-43aa-bd94-fe9fa9c48dcb\nexchange_id: 244\ncreated_at: 2014-02-18 06:42:05.348247000 Z\nupdated_at: 2014-02-18 06:42:05.348247000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 06:42:05.368915	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:42:05.348247000 Z\n- 2014-02-18 06:42:05.363100000 Z\n
143	Sale	39	update	39	---\nid: 39\nemail: \nguid: 91d40cfc-b16a-43aa-bd94-fe9fa9c48dcb\nexchange_id: 244\ncreated_at: 2014-02-18 06:42:05.348247000 Z\nupdated_at: 2014-02-18 06:42:05.363100000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 06:42:05.795447	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You can only create tokens from customers with an active card\nupdated_at:\n- 2014-02-18 06:42:05.363100000 Z\n- 2014-02-18 06:42:05.788282000 Z\n
144	Sale	39	update	39	---\nid: 39\nemail: \nguid: 91d40cfc-b16a-43aa-bd94-fe9fa9c48dcb\nexchange_id: 244\ncreated_at: 2014-02-18 06:42:05.348247000 Z\nupdated_at: 2014-02-18 06:42:05.788282000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You can only create tokens from customers with an active card\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 06:42:05.803654	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:42:05.788282000 Z\n- 2014-02-18 06:42:05.798884000 Z\n
145	Sale	40	create	39	\N	2014-02-18 06:46:36.41098	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 245\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:46:36.399461000 Z\nupdated_at:\n- \n- 2014-02-18 06:46:36.399461000 Z\nguid:\n- \n- bced1414-7665-409b-9bd8-93d9446de8fb\nid:\n- \n- 40\n
146	Sale	40	update	39	---\nid: 40\nemail: \nguid: bced1414-7665-409b-9bd8-93d9446de8fb\nexchange_id: 245\ncreated_at: 2014-02-18 06:46:36.399461000 Z\nupdated_at: 2014-02-18 06:46:36.399461000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:46:36.424537	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:46:36.399461000 Z\n- 2014-02-18 06:46:36.416942000 Z\n
147	Sale	40	update	39	---\nid: 40\nemail: \nguid: bced1414-7665-409b-9bd8-93d9446de8fb\nexchange_id: 245\ncreated_at: 2014-02-18 06:46:36.399461000 Z\nupdated_at: 2014-02-18 06:46:36.416942000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:46:37.251779	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You can only create tokens from customers with an active card\nupdated_at:\n- 2014-02-18 06:46:36.416942000 Z\n- 2014-02-18 06:46:37.245490000 Z\n
148	Sale	40	update	39	---\nid: 40\nemail: \nguid: bced1414-7665-409b-9bd8-93d9446de8fb\nexchange_id: 245\ncreated_at: 2014-02-18 06:46:36.399461000 Z\nupdated_at: 2014-02-18 06:46:37.245490000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You can only create tokens from customers with an active card\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:46:37.261603	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:46:37.245490000 Z\n- 2014-02-18 06:46:37.256197000 Z\n
149	Sale	41	create	39	\N	2014-02-18 06:49:25.646618	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 247\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:49:25.618651000 Z\nupdated_at:\n- \n- 2014-02-18 06:49:25.618651000 Z\nguid:\n- \n- 92f39e95-7673-49cd-8fc0-ea2fb389d33e\nid:\n- \n- 41\n
150	Sale	41	update	39	---\nid: 41\nemail: \nguid: 92f39e95-7673-49cd-8fc0-ea2fb389d33e\nexchange_id: 247\ncreated_at: 2014-02-18 06:49:25.618651000 Z\nupdated_at: 2014-02-18 06:49:25.618651000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 06:49:25.658134	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:49:25.618651000 Z\n- 2014-02-18 06:49:25.652345000 Z\n
151	Sale	41	update	39	---\nid: 41\nemail: \nguid: 92f39e95-7673-49cd-8fc0-ea2fb389d33e\nexchange_id: 247\ncreated_at: 2014-02-18 06:49:25.618651000 Z\nupdated_at: 2014-02-18 06:49:25.652345000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 06:49:26.398757	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You can only create tokens from customers with an active card\nupdated_at:\n- 2014-02-18 06:49:25.652345000 Z\n- 2014-02-18 06:49:26.392078000 Z\n
152	Sale	41	update	39	---\nid: 41\nemail: \nguid: 92f39e95-7673-49cd-8fc0-ea2fb389d33e\nexchange_id: 247\ncreated_at: 2014-02-18 06:49:25.618651000 Z\nupdated_at: 2014-02-18 06:49:26.392078000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You can only create tokens from customers with an active card\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 06:49:26.406629	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 06:49:26.392078000 Z\n- 2014-02-18 06:49:26.401793000 Z\n
153	Sale	42	create	39	\N	2014-02-18 06:50:40.586125	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 248\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 06:50:40.577156000 Z\nupdated_at:\n- \n- 2014-02-18 06:50:40.577156000 Z\nguid:\n- \n- 85327609-8fdd-48a4-a90a-d6d43f5b1b28\nid:\n- \n- 42\n
154	Sale	42	update	39	---\nid: 42\nemail: \nguid: 85327609-8fdd-48a4-a90a-d6d43f5b1b28\nexchange_id: 248\ncreated_at: 2014-02-18 06:50:40.577156000 Z\nupdated_at: 2014-02-18 06:50:40.577156000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 06:50:40.603741	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 06:50:40.577156000 Z\n- 2014-02-18 06:50:40.597837000 Z\n
155	Sale	43	create	39	\N	2014-02-18 22:37:21.909015	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 249\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 22:37:21.714268000 Z\nupdated_at:\n- \n- 2014-02-18 22:37:21.714268000 Z\nguid:\n- \n- 66d40f8b-567d-4e1a-b9dc-83def5b56d5a\nid:\n- \n- 43\n
156	Sale	43	update	39	---\nid: 43\nemail: \nguid: 66d40f8b-567d-4e1a-b9dc-83def5b56d5a\nexchange_id: 249\ncreated_at: 2014-02-18 22:37:21.714268000 Z\nupdated_at: 2014-02-18 22:37:21.714268000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 22:37:21.924633	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 22:37:21.714268000 Z\n- 2014-02-18 22:37:21.916890000 Z\n
157	Sale	43	update	39	---\nid: 43\nemail: \nguid: 66d40f8b-567d-4e1a-b9dc-83def5b56d5a\nexchange_id: 249\ncreated_at: 2014-02-18 22:37:21.714268000 Z\nupdated_at: 2014-02-18 22:37:21.916890000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 22:39:05.672438	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You can only create tokens from customers with an active card\nupdated_at:\n- 2014-02-18 22:37:21.916890000 Z\n- 2014-02-18 22:39:05.663028000 Z\n
158	Sale	43	update	39	---\nid: 43\nemail: \nguid: 66d40f8b-567d-4e1a-b9dc-83def5b56d5a\nexchange_id: 249\ncreated_at: 2014-02-18 22:37:21.714268000 Z\nupdated_at: 2014-02-18 22:39:05.663028000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You can only create tokens from customers with an active card\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 22:39:05.684623	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 22:39:05.663028000 Z\n- 2014-02-18 22:39:05.676170000 Z\n
159	Sale	44	create	39	\N	2014-02-18 22:41:04.170247	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 400\nsendangel_fee:\n- \n- 80\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 250\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 22:41:04.160302000 Z\nupdated_at:\n- \n- 2014-02-18 22:41:04.160302000 Z\nguid:\n- \n- 81a62c8d-e565-4f87-939e-ac392f072d8c\nid:\n- \n- 44\n
160	Sale	44	update	39	---\nid: 44\nemail: \nguid: 81a62c8d-e565-4f87-939e-ac392f072d8c\nexchange_id: 250\ncreated_at: 2014-02-18 22:41:04.160302000 Z\nupdated_at: 2014-02-18 22:41:04.160302000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 22:41:04.182977	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 22:41:04.160302000 Z\n- 2014-02-18 22:41:04.176662000 Z\n
161	Sale	44	update	39	---\nid: 44\nemail: \nguid: 81a62c8d-e565-4f87-939e-ac392f072d8c\nexchange_id: 250\ncreated_at: 2014-02-18 22:41:04.160302000 Z\nupdated_at: 2014-02-18 22:41:04.176662000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 22:41:04.927593	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- You can only create tokens from customers with an active card\nupdated_at:\n- 2014-02-18 22:41:04.176662000 Z\n- 2014-02-18 22:41:04.921881000 Z\n
162	Sale	44	update	39	---\nid: 44\nemail: \nguid: 81a62c8d-e565-4f87-939e-ac392f072d8c\nexchange_id: 250\ncreated_at: 2014-02-18 22:41:04.160302000 Z\nupdated_at: 2014-02-18 22:41:04.921881000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: You can only create tokens from customers with an active card\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 400\nsendangel_fee: 80\n	2014-02-18 22:41:04.954472	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 22:41:04.921881000 Z\n- 2014-02-18 22:41:04.949771000 Z\n
163	Sale	45	create	\N	\N	2014-02-18 23:13:56.878693	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 100\nemail:\n- \n- parisliahyun@gmail.com\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nexchange_id:\n- \n- 252\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 23:13:56.799189000 Z\nupdated_at:\n- \n- 2014-02-18 23:13:56.799189000 Z\nguid:\n- \n- 5d7dd936-0d7c-43fa-a610-a04f088ddcf1\nid:\n- \n- 45\n
164	Sale	46	create	\N	\N	2014-02-18 23:14:48.713581	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 100\nemail:\n- \n- parisliahyun@gmail.com\ncustomer_id:\n- \n- cus_3W9d1qckip3UD6\nexchange_id:\n- \n- 252\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-18 23:14:48.701062000 Z\nupdated_at:\n- \n- 2014-02-18 23:14:48.701062000 Z\nguid:\n- \n- bdb28b87-7f72-411f-93c1-f9a99fee7105\nid:\n- \n- 46\n
166	Sale	47	update	39	---\nid: 47\nemail: \nguid: 421b89ac-4106-4bb7-bb25-13b120ff106e\nexchange_id: 253\ncreated_at: 2014-02-18 23:47:06.617764000 Z\nupdated_at: 2014-02-18 23:47:06.617764000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 23:47:32.907046	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-18 23:47:06.617764000 Z\n- 2014-02-18 23:47:32.900138000 Z\n
167	Sale	47	update	39	---\nid: 47\nemail: \nguid: 421b89ac-4106-4bb7-bb25-13b120ff106e\nexchange_id: 253\ncreated_at: 2014-02-18 23:47:06.617764000 Z\nupdated_at: 2014-02-18 23:47:32.900138000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 23:47:33.435512	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- 'No such customer: cus_3W9d1qckip3UD6'\nupdated_at:\n- 2014-02-18 23:47:32.900138000 Z\n- 2014-02-18 23:47:33.424350000 Z\n
168	Sale	47	update	39	---\nid: 47\nemail: \nguid: 421b89ac-4106-4bb7-bb25-13b120ff106e\nexchange_id: 253\ncreated_at: 2014-02-18 23:47:06.617764000 Z\nupdated_at: 2014-02-18 23:47:33.424350000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: 'No such customer: cus_3W9d1qckip3UD6'\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3W9d1qckip3UD6\namount: 300\nsendangel_fee: 60\n	2014-02-18 23:47:33.446916	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-18 23:47:33.424350000 Z\n- 2014-02-18 23:47:33.441285000 Z\n
169	Sale	48	create	39	\N	2014-02-19 04:13:50.850822	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 333\nsendangel_fee:\n- \n- 66\ncustomer_id:\n- \n- cus_3WUUqWjL3EZMKO\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 255\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-19 04:13:50.795160000 Z\nupdated_at:\n- \n- 2014-02-19 04:13:50.795160000 Z\nguid:\n- \n- 41d61ad7-5652-4d37-8a3f-90f4fbce0503\nid:\n- \n- 48\n
170	Sale	48	update	39	---\nid: 48\nemail: \nguid: 41d61ad7-5652-4d37-8a3f-90f4fbce0503\nexchange_id: 255\ncreated_at: 2014-02-19 04:13:50.795160000 Z\nupdated_at: 2014-02-19 04:13:50.795160000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUUqWjL3EZMKO\namount: 333\nsendangel_fee: 66\n	2014-02-19 04:13:50.891375	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-19 04:13:50.795160000 Z\n- 2014-02-19 04:13:50.884956000 Z\n
171	Sale	48	update	39	---\nid: 48\nemail: \nguid: 41d61ad7-5652-4d37-8a3f-90f4fbce0503\nexchange_id: 255\ncreated_at: 2014-02-19 04:13:50.795160000 Z\nupdated_at: 2014-02-19 04:13:50.884956000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUUqWjL3EZMKO\namount: 333\nsendangel_fee: 66\n	2014-02-19 04:13:51.700691	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- 'Expired API key provided: sk_test_************************.  Application access\n  may have been revoked.'\nupdated_at:\n- 2014-02-19 04:13:50.884956000 Z\n- 2014-02-19 04:13:51.692421000 Z\n
172	Sale	48	update	39	---\nid: 48\nemail: \nguid: 41d61ad7-5652-4d37-8a3f-90f4fbce0503\nexchange_id: 255\ncreated_at: 2014-02-19 04:13:50.795160000 Z\nupdated_at: 2014-02-19 04:13:51.692421000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: 'Expired API key provided: sk_test_************************.  Application access\n  may have been revoked.'\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUUqWjL3EZMKO\namount: 333\nsendangel_fee: 66\n	2014-02-19 04:13:51.710947	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-19 04:13:51.692421000 Z\n- 2014-02-19 04:13:51.705637000 Z\n
173	Sale	49	create	39	\N	2014-02-19 04:13:56.262146	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 333\nsendangel_fee:\n- \n- 66\ncustomer_id:\n- \n- cus_3WUUqWjL3EZMKO\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 255\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-19 04:13:56.252147000 Z\nupdated_at:\n- \n- 2014-02-19 04:13:56.252147000 Z\nguid:\n- \n- cf3159a4-4cf5-4d78-9830-9576f3c56d44\nid:\n- \n- 49\n
174	Sale	49	update	39	---\nid: 49\nemail: \nguid: cf3159a4-4cf5-4d78-9830-9576f3c56d44\nexchange_id: 255\ncreated_at: 2014-02-19 04:13:56.252147000 Z\nupdated_at: 2014-02-19 04:13:56.252147000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUUqWjL3EZMKO\namount: 333\nsendangel_fee: 66\n	2014-02-19 04:13:56.274835	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-19 04:13:56.252147000 Z\n- 2014-02-19 04:13:56.268144000 Z\n
175	Sale	49	update	39	---\nid: 49\nemail: \nguid: cf3159a4-4cf5-4d78-9830-9576f3c56d44\nexchange_id: 255\ncreated_at: 2014-02-19 04:13:56.252147000 Z\nupdated_at: 2014-02-19 04:13:56.268144000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUUqWjL3EZMKO\namount: 333\nsendangel_fee: 66\n	2014-02-19 04:13:56.954931	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- 'Expired API key provided: sk_test_************************.  Application access\n  may have been revoked.'\nupdated_at:\n- 2014-02-19 04:13:56.268144000 Z\n- 2014-02-19 04:13:56.948530000 Z\n
176	Sale	49	update	39	---\nid: 49\nemail: \nguid: cf3159a4-4cf5-4d78-9830-9576f3c56d44\nexchange_id: 255\ncreated_at: 2014-02-19 04:13:56.252147000 Z\nupdated_at: 2014-02-19 04:13:56.948530000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: 'Expired API key provided: sk_test_************************.  Application access\n  may have been revoked.'\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUUqWjL3EZMKO\namount: 333\nsendangel_fee: 66\n	2014-02-19 04:13:56.965161	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-19 04:13:56.948530000 Z\n- 2014-02-19 04:13:56.959817000 Z\n
177	Sale	50	create	39	\N	2014-02-19 16:51:42.300681	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 500\nsendangel_fee:\n- \n- 100\ncustomer_id:\n- \n- cus_3WUmhKD4VqZcVw\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 256\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-19 16:51:42.223014000 Z\nupdated_at:\n- \n- 2014-02-19 16:51:42.223014000 Z\nguid:\n- \n- d29f39d7-038f-48d7-b716-ebc75f924e8c\nid:\n- \n- 50\n
178	Sale	50	update	39	---\nid: 50\nemail: \nguid: d29f39d7-038f-48d7-b716-ebc75f924e8c\nexchange_id: 256\ncreated_at: 2014-02-19 16:51:42.223014000 Z\nupdated_at: 2014-02-19 16:51:42.223014000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 500\nsendangel_fee: 100\n	2014-02-19 16:51:42.32973	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-19 16:51:42.223014000 Z\n- 2014-02-19 16:51:42.315254000 Z\n
179	Sale	50	update	39	---\nid: 50\nemail: \nguid: d29f39d7-038f-48d7-b716-ebc75f924e8c\nexchange_id: 256\ncreated_at: 2014-02-19 16:51:42.223014000 Z\nupdated_at: 2014-02-19 16:51:42.315254000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 500\nsendangel_fee: 100\n	2014-02-19 16:51:42.786553	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- 'Expired API key provided: sk_test_************************.  Application access\n  may have been revoked.'\nupdated_at:\n- 2014-02-19 16:51:42.315254000 Z\n- 2014-02-19 16:51:42.778873000 Z\n
180	Sale	50	update	39	---\nid: 50\nemail: \nguid: d29f39d7-038f-48d7-b716-ebc75f924e8c\nexchange_id: 256\ncreated_at: 2014-02-19 16:51:42.223014000 Z\nupdated_at: 2014-02-19 16:51:42.778873000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: 'Expired API key provided: sk_test_************************.  Application access\n  may have been revoked.'\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 500\nsendangel_fee: 100\n	2014-02-19 16:51:42.797585	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-19 16:51:42.778873000 Z\n- 2014-02-19 16:51:42.792419000 Z\n
181	Sale	51	create	39	\N	2014-02-19 16:58:42.095873	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\ncustomer_id:\n- \n- cus_3WUmhKD4VqZcVw\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 257\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-19 16:58:42.086084000 Z\nupdated_at:\n- \n- 2014-02-19 16:58:42.086084000 Z\nguid:\n- \n- e70bf4af-b2be-41ac-a445-cad50b903190\nid:\n- \n- 51\n
182	Sale	51	update	39	---\nid: 51\nemail: \nguid: e70bf4af-b2be-41ac-a445-cad50b903190\nexchange_id: 257\ncreated_at: 2014-02-19 16:58:42.086084000 Z\nupdated_at: 2014-02-19 16:58:42.086084000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 300\nsendangel_fee: 60\n	2014-02-19 16:58:42.107945	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-19 16:58:42.086084000 Z\n- 2014-02-19 16:58:42.101761000 Z\n
183	Sale	51	update	39	---\nid: 51\nemail: \nguid: e70bf4af-b2be-41ac-a445-cad50b903190\nexchange_id: 257\ncreated_at: 2014-02-19 16:58:42.086084000 Z\nupdated_at: 2014-02-19 16:58:42.101761000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 300\nsendangel_fee: 60\n	2014-02-19 16:58:42.812439	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- 'Expired API key provided: sk_test_************************.  Application access\n  may have been revoked.'\nupdated_at:\n- 2014-02-19 16:58:42.101761000 Z\n- 2014-02-19 16:58:42.806333000 Z\n
184	Sale	51	update	39	---\nid: 51\nemail: \nguid: e70bf4af-b2be-41ac-a445-cad50b903190\nexchange_id: 257\ncreated_at: 2014-02-19 16:58:42.086084000 Z\nupdated_at: 2014-02-19 16:58:42.806333000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: 'Expired API key provided: sk_test_************************.  Application access\n  may have been revoked.'\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 300\nsendangel_fee: 60\n	2014-02-19 16:58:42.82046	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-19 16:58:42.806333000 Z\n- 2014-02-19 16:58:42.815404000 Z\n
185	Sale	52	create	39	\N	2014-02-19 17:19:01.55486	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 600\nsendangel_fee:\n- \n- 120\ncustomer_id:\n- \n- cus_3WUmhKD4VqZcVw\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 258\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-19 17:19:01.417726000 Z\nupdated_at:\n- \n- 2014-02-19 17:19:01.417726000 Z\nguid:\n- \n- 16928df3-a82f-49c3-9690-7604584b3e1e\nid:\n- \n- 52\n
186	Sale	52	update	39	---\nid: 52\nemail: \nguid: 16928df3-a82f-49c3-9690-7604584b3e1e\nexchange_id: 258\ncreated_at: 2014-02-19 17:19:01.417726000 Z\nupdated_at: 2014-02-19 17:19:01.417726000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 600\nsendangel_fee: 120\n	2014-02-19 17:19:01.581384	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-19 17:19:01.417726000 Z\n- 2014-02-19 17:19:01.573283000 Z\n
187	Sale	52	update	39	---\nid: 52\nemail: \nguid: 16928df3-a82f-49c3-9690-7604584b3e1e\nexchange_id: 258\ncreated_at: 2014-02-19 17:19:01.417726000 Z\nupdated_at: 2014-02-19 17:19:01.573283000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 600\nsendangel_fee: 120\n	2014-02-19 17:19:02.052469	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- This API call cannot be made with a publishable API key. Please use a secret API\n  key. You can find a list of your API keys at https://manage.stripe.com/account/apikeys.\nupdated_at:\n- 2014-02-19 17:19:01.573283000 Z\n- 2014-02-19 17:19:02.042036000 Z\n
188	Sale	52	update	39	---\nid: 52\nemail: \nguid: 16928df3-a82f-49c3-9690-7604584b3e1e\nexchange_id: 258\ncreated_at: 2014-02-19 17:19:01.417726000 Z\nupdated_at: 2014-02-19 17:19:02.042036000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: This API call cannot be made with a publishable API key. Please use a secret\n  API key. You can find a list of your API keys at https://manage.stripe.com/account/apikeys.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 600\nsendangel_fee: 120\n	2014-02-19 17:19:02.063509	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-19 17:19:02.042036000 Z\n- 2014-02-19 17:19:02.057645000 Z\n
189	Sale	53	create	39	\N	2014-02-19 17:21:03.504981	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 344\nsendangel_fee:\n- \n- 68\ncustomer_id:\n- \n- cus_3WUmhKD4VqZcVw\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 259\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-19 17:21:03.496136000 Z\nupdated_at:\n- \n- 2014-02-19 17:21:03.496136000 Z\nguid:\n- \n- 7461d3cc-4a57-44f5-8f03-b434445e7c2a\nid:\n- \n- 53\n
190	Sale	53	update	39	---\nid: 53\nemail: \nguid: 7461d3cc-4a57-44f5-8f03-b434445e7c2a\nexchange_id: 259\ncreated_at: 2014-02-19 17:21:03.496136000 Z\nupdated_at: 2014-02-19 17:21:03.496136000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 344\nsendangel_fee: 68\n	2014-02-19 17:21:03.518513	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-19 17:21:03.496136000 Z\n- 2014-02-19 17:21:03.512691000 Z\n
191	Sale	53	update	39	---\nid: 53\nemail: \nguid: 7461d3cc-4a57-44f5-8f03-b434445e7c2a\nexchange_id: 259\ncreated_at: 2014-02-19 17:21:03.496136000 Z\nupdated_at: 2014-02-19 17:21:03.512691000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 344\nsendangel_fee: 68\n	2014-02-19 17:21:04.254262	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nerror:\n- \n- Cannot apply an application_fee when the key given is not a Stripe Connect OAuth\n  key.\nupdated_at:\n- 2014-02-19 17:21:03.512691000 Z\n- 2014-02-19 17:21:04.246790000 Z\n
192	Sale	53	update	39	---\nid: 53\nemail: \nguid: 7461d3cc-4a57-44f5-8f03-b434445e7c2a\nexchange_id: 259\ncreated_at: 2014-02-19 17:21:03.496136000 Z\nupdated_at: 2014-02-19 17:21:04.246790000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: Cannot apply an application_fee when the key given is not a Stripe Connect\n  OAuth key.\nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 344\nsendangel_fee: 68\n	2014-02-19 17:21:04.262449	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- errored\nupdated_at:\n- 2014-02-19 17:21:04.246790000 Z\n- 2014-02-19 17:21:04.258085000 Z\n
193	Sale	54	create	39	\N	2014-02-19 17:28:43.987565	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\namount:\n- \n- 300\nsendangel_fee:\n- \n- 60\ncustomer_id:\n- \n- cus_3WUmhKD4VqZcVw\nvendor_id:\n- \n- 39\nexchange_id:\n- \n- 260\nstate:\n- \n- pending\ncreated_at:\n- \n- 2014-02-19 17:28:43.870841000 Z\nupdated_at:\n- \n- 2014-02-19 17:28:43.870841000 Z\nguid:\n- \n- 4eb31365-e8fc-4551-aa2a-fc3f8dbdd791\nid:\n- \n- 54\n
194	Sale	54	update	39	---\nid: 54\nemail: \nguid: 4eb31365-e8fc-4551-aa2a-fc3f8dbdd791\nexchange_id: 260\ncreated_at: 2014-02-19 17:28:43.870841000 Z\nupdated_at: 2014-02-19 17:28:43.870841000 Z\nstate: pending\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 300\nsendangel_fee: 60\n	2014-02-19 17:28:44.005348	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- pending\n- processing\nupdated_at:\n- 2014-02-19 17:28:43.870841000 Z\n- 2014-02-19 17:28:43.998452000 Z\n
195	Sale	54	update	39	---\nid: 54\nemail: \nguid: 4eb31365-e8fc-4551-aa2a-fc3f8dbdd791\nexchange_id: 260\ncreated_at: 2014-02-19 17:28:43.870841000 Z\nupdated_at: 2014-02-19 17:28:43.998452000 Z\nstate: processing\nstripe_id: \nstripe_token: \ncard_expiration: \nerror: \nfee_amount: \nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 300\nsendangel_fee: 60\n	2014-02-19 17:28:45.632704	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstripe_id:\n- \n- ch_103WhY2QZyjk5HNn5ThWxrQk\ncard_expiration:\n- \n- 2016-11-01\nfee_amount:\n- \n- 99\nupdated_at:\n- 2014-02-19 17:28:43.998452000 Z\n- 2014-02-19 17:28:45.620979000 Z\n
196	Sale	54	update	39	---\nid: 54\nemail: \nguid: 4eb31365-e8fc-4551-aa2a-fc3f8dbdd791\nexchange_id: 260\ncreated_at: 2014-02-19 17:28:43.870841000 Z\nupdated_at: 2014-02-19 17:28:45.620979000 Z\nstate: processing\nstripe_id: ch_103WhY2QZyjk5HNn5ThWxrQk\nstripe_token: \ncard_expiration: 2016-11-01\nerror: \nfee_amount: 99\nvendor_id: 39\ncustomer_id: cus_3WUmhKD4VqZcVw\namount: 300\nsendangel_fee: 60\n	2014-02-19 17:28:45.640992	--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nstate:\n- processing\n- finished\nupdated_at:\n- 2014-02-19 17:28:45.620979000 Z\n- 2014-02-19 17:28:45.636241000 Z\n
\.


--
-- Name: versions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('versions_id_seq', 196, true);


--
-- Name: appointments_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY appointments
    ADD CONSTRAINT appointments_pkey PRIMARY KEY (id);


--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: exchanges_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY exchanges
    ADD CONSTRAINT exchanges_pkey PRIMARY KEY (id);


--
-- Name: favorites_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY favorites
    ADD CONSTRAINT favorites_pkey PRIMARY KEY (id);


--
-- Name: rates_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rates
    ADD CONSTRAINT rates_pkey PRIMARY KEY (id);


--
-- Name: rating_caches_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rating_caches
    ADD CONSTRAINT rating_caches_pkey PRIMARY KEY (id);


--
-- Name: sales_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY sales
    ADD CONSTRAINT sales_pkey PRIMARY KEY (id);


--
-- Name: stripe_events_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY stripe_events
    ADD CONSTRAINT stripe_events_pkey PRIMARY KEY (id);


--
-- Name: table_angels_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY angels
    ADD CONSTRAINT table_angels_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: versions_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY versions
    ADD CONSTRAINT versions_pkey PRIMARY KEY (id);


--
-- Name: index_comments_on_commentable_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_comments_on_commentable_id ON comments USING btree (commentable_id);


--
-- Name: index_comments_on_commentable_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_comments_on_commentable_type ON comments USING btree (commentable_type);


--
-- Name: index_comments_on_user_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_comments_on_user_id ON comments USING btree (user_id);


--
-- Name: index_rates_on_rateable_id_and_rateable_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_rates_on_rateable_id_and_rateable_type ON rates USING btree (rateable_id, rateable_type);


--
-- Name: index_rates_on_rater_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_rates_on_rater_id ON rates USING btree (rater_id);


--
-- Name: index_rating_caches_on_cacheable_id_and_cacheable_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_rating_caches_on_cacheable_id_and_cacheable_type ON rating_caches USING btree (cacheable_id, cacheable_type);


--
-- Name: index_sales_on_exchange_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_sales_on_exchange_id ON sales USING btree (exchange_id);


--
-- Name: index_users_on_confirmation_token; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_confirmation_token ON users USING btree (confirmation_token);


--
-- Name: index_users_on_email; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_email ON users USING btree (email);


--
-- Name: index_users_on_reset_password_token; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_reset_password_token ON users USING btree (reset_password_token);


--
-- Name: index_users_on_unlock_token; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_unlock_token ON users USING btree (unlock_token);


--
-- Name: index_versions_on_item_type_and_item_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_versions_on_item_type_and_item_id ON versions USING btree (item_type, item_id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect costumely_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: costumes; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE costumes (
    id integer NOT NULL,
    name character varying(255),
    photo_url text
);


ALTER TABLE public.costumes OWNER TO "Paris";

--
-- Name: costumes_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE costumes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.costumes_id_seq OWNER TO "Paris";

--
-- Name: costumes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE costumes_id_seq OWNED BY costumes.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY costumes ALTER COLUMN id SET DEFAULT nextval('costumes_id_seq'::regclass);


--
-- Data for Name: costumes; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY costumes (id, name, photo_url) FROM stdin;
6	Tank	http://media.giphy.com/media/pum9EP2v4WTiU/giphy.gif
7	Princess	http://media.giphy.com/media/13yZC4GMF1busE/giphy.gif
8	Pac Man	http://media.giphy.com/media/DWqqMBCtlWQGA/giphy.gif
9	Mouse	http://media.giphy.com/media/PDc8rPhx1WLi8/giphy.gif
10	Panda	http://media1.giphy.com/media/XXIzFAQeME9IQ/giphy.gif
11	batman	http://images.halloweencostumes.com/products/9707/1-1/infant--toddler-batman-costume.jpg
\.


--
-- Name: costumes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('costumes_id_seq', 11, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131030131116
\.


--
-- Name: costumes_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY costumes
    ADD CONSTRAINT costumes_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect hogwarts_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: houses; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE houses (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    img_url character varying(255) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.houses OWNER TO "Paris";

--
-- Name: houses_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE houses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.houses_id_seq OWNER TO "Paris";

--
-- Name: houses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE houses_id_seq OWNED BY houses.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: students; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE students (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    img_url character varying(255) NOT NULL,
    house_id integer NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.students OWNER TO "Paris";

--
-- Name: students_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE students_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.students_id_seq OWNER TO "Paris";

--
-- Name: students_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE students_id_seq OWNED BY students.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY houses ALTER COLUMN id SET DEFAULT nextval('houses_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY students ALTER COLUMN id SET DEFAULT nextval('students_id_seq'::regclass);


--
-- Data for Name: houses; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY houses (id, name, img_url, created_at, updated_at) FROM stdin;
1	Gryffindor	http://images1.wikia.nocookie.net/__cb20120922143611/harrypotter/images/7/70/G_final.jpg	2013-10-31 13:32:04.96513	2013-10-31 13:32:04.96513
2	Hufflepuff	http://images3.wikia.nocookie.net/__cb20111027164827/harrypotter/images/3/3f/H_final.jpg	2013-10-31 13:32:05.042078	2013-10-31 13:32:05.042078
3	Ravenclaw	http://images2.wikia.nocookie.net/__cb20111021043857/harrypotter/images/d/da/R_final.jpg	2013-10-31 13:32:05.044846	2013-10-31 13:32:05.044846
4	Slytherin	http://images3.wikia.nocookie.net/__cb20111027165214/harrypotter/images/d/da/S_final.jpg	2013-10-31 13:32:05.047187	2013-10-31 13:32:05.047187
\.


--
-- Name: houses_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('houses_id_seq', 4, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131030184435
20131030184440
\.


--
-- Data for Name: students; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY students (id, name, img_url, house_id, created_at, updated_at) FROM stdin;
1	Harry Potter	http://images1.wikia.nocookie.net/__cb20111110202524/harrypotter/images/thumb/d/d4/Dhharryroomhighreso.jpg/250px-Dhharryroomhighreso.jpg	1	2013-10-31 13:32:05.138384	2013-10-31 13:32:05.138384
2	Ron Weasley	http://images4.wikia.nocookie.net/__cb20090712085217/harrypotter/images/9/99/Ron_DH.PNG	1	2013-10-31 13:32:05.143811	2013-10-31 13:32:05.143811
3	Hermione Granger	http://images2.wikia.nocookie.net/__cb20120512155742/harrypotter/images/thumb/9/95/DeathlyPromo_Hermione.PNG/250px-DeathlyPromo_Hermione.PNG	1	2013-10-31 13:32:05.146895	2013-10-31 13:32:05.146895
4	Luna Lovegood	http://images1.wikia.nocookie.net/__cb20101113121321/harrypotter/images/thumb/4/49/Luna_profile.jpg/250px-Luna_profile.jpg	3	2013-10-31 13:32:05.149523	2013-10-31 13:32:05.149523
5	Cho Chang	http://images3.wikia.nocookie.net/__cb20081103140303/harrypotter/images/thumb/c/c1/Cho_Chang_Profile.JPG/250px-Cho_Chang_Profile.JPG	3	2013-10-31 13:32:05.152586	2013-10-31 13:32:05.152586
6	Cedric Diggory	http://images1.wikia.nocookie.net/__cb20111015180906/harrypotter/images/thumb/c/c5/Cedric.jpg/250px-Cedric.jpg	2	2013-10-31 13:32:05.155531	2013-10-31 13:32:05.155531
7	Draco Malfoy	http://images1.wikia.nocookie.net/__cb20100925140918/harrypotter/images/thumb/2/21/Dracodh.jpg/250px-Dracodh.jpg	4	2013-10-31 13:32:05.158481	2013-10-31 13:32:05.158481
8	Pansy Parkinson	http://images1.wikia.nocookie.net/__cb20110801070343/harrypotter/images/thumb/6/62/Pansyinfobox.jpg/250px-Pansyinfobox.jpg	4	2013-10-31 13:32:05.160991	2013-10-31 13:32:05.160991
\.


--
-- Name: students_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('students_id_seq', 8, true);


--
-- Name: houses_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY houses
    ADD CONSTRAINT houses_pkey PRIMARY KEY (id);


--
-- Name: students_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY students
    ADD CONSTRAINT students_pkey PRIMARY KEY (id);


--
-- Name: index_students_on_house_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_students_on_house_id ON students USING btree (house_id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: fk_students_houses; Type: FK CONSTRAINT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY students
    ADD CONSTRAINT fk_students_houses FOREIGN KEY (house_id) REFERENCES houses(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect hunger_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: escorts; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE escorts (
    id integer NOT NULL,
    person_id integer,
    tribute_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.escorts OWNER TO "Paris";

--
-- Name: escorts_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE escorts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.escorts_id_seq OWNER TO "Paris";

--
-- Name: escorts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE escorts_id_seq OWNED BY escorts.id;


--
-- Name: events; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE events (
    id integer NOT NULL,
    type character varying(255),
    name character varying(255),
    game_id integer
);


ALTER TABLE public.events OWNER TO "Paris";

--
-- Name: events_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.events_id_seq OWNER TO "Paris";

--
-- Name: events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE events_id_seq OWNED BY events.id;


--
-- Name: games; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE games (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.games OWNER TO "Paris";

--
-- Name: games_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE games_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.games_id_seq OWNER TO "Paris";

--
-- Name: games_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE games_id_seq OWNED BY games.id;


--
-- Name: people; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE people (
    id integer NOT NULL,
    type character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    district integer,
    is_tribute boolean,
    is_victor boolean,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    gender character varying(255),
    age integer,
    district_id integer,
    game_id integer
);


ALTER TABLE public.people OWNER TO "Paris";

--
-- Name: people_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE people_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.people_id_seq OWNER TO "Paris";

--
-- Name: people_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE people_id_seq OWNED BY people.id;


--
-- Name: places; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE places (
    id integer NOT NULL,
    type character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.places OWNER TO "Paris";

--
-- Name: places_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE places_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.places_id_seq OWNER TO "Paris";

--
-- Name: places_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE places_id_seq OWNED BY places.id;


--
-- Name: reapings_games; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE reapings_games (
    id integer NOT NULL,
    game_id integer,
    place_id integer,
    tribute_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.reapings_games OWNER TO "Paris";

--
-- Name: reapings_games_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE reapings_games_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reapings_games_id_seq OWNER TO "Paris";

--
-- Name: reapings_games_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE reapings_games_id_seq OWNED BY reapings_games.id;


--
-- Name: rounds_games; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rounds_games (
    id integer NOT NULL,
    place_id integer,
    tribute_id integer,
    has_died boolean,
    skills character varying(255),
    score integer,
    is_victor boolean,
    game_id integer
);


ALTER TABLE public.rounds_games OWNER TO "Paris";

--
-- Name: rounds_games_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rounds_games_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rounds_games_id_seq OWNER TO "Paris";

--
-- Name: rounds_games_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rounds_games_id_seq OWNED BY rounds_games.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: sponsors_tributes; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE sponsors_tributes (
    id integer NOT NULL,
    person_id integer,
    tribute_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.sponsors_tributes OWNER TO "Paris";

--
-- Name: sponsors_tributes_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE sponsors_tributes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sponsors_tributes_id_seq OWNER TO "Paris";

--
-- Name: sponsors_tributes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE sponsors_tributes_id_seq OWNED BY sponsors_tributes.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY escorts ALTER COLUMN id SET DEFAULT nextval('escorts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY events ALTER COLUMN id SET DEFAULT nextval('events_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY games ALTER COLUMN id SET DEFAULT nextval('games_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY people ALTER COLUMN id SET DEFAULT nextval('people_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY places ALTER COLUMN id SET DEFAULT nextval('places_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY reapings_games ALTER COLUMN id SET DEFAULT nextval('reapings_games_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rounds_games ALTER COLUMN id SET DEFAULT nextval('rounds_games_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY sponsors_tributes ALTER COLUMN id SET DEFAULT nextval('sponsors_tributes_id_seq'::regclass);


--
-- Data for Name: escorts; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY escorts (id, person_id, tribute_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: escorts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('escorts_id_seq', 1, false);


--
-- Data for Name: events; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY events (id, type, name, game_id) FROM stdin;
\.


--
-- Name: events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('events_id_seq', 1, false);


--
-- Data for Name: games; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY games (id, name, created_at, updated_at) FROM stdin;
\.


--
-- Name: games_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('games_id_seq', 1, false);


--
-- Data for Name: people; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY people (id, type, name, district, is_tribute, is_victor, created_at, updated_at, gender, age, district_id, game_id) FROM stdin;
\.


--
-- Name: people_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('people_id_seq', 1, false);


--
-- Data for Name: places; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY places (id, type, name, created_at, updated_at) FROM stdin;
6	District	12	2013-12-02 05:27:41.275699	2013-12-02 05:27:41.275699
\.


--
-- Name: places_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('places_id_seq', 6, true);


--
-- Data for Name: reapings_games; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY reapings_games (id, game_id, place_id, tribute_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: reapings_games_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('reapings_games_id_seq', 1, false);


--
-- Data for Name: rounds_games; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rounds_games (id, place_id, tribute_id, has_died, skills, score, is_victor, game_id) FROM stdin;
\.


--
-- Name: rounds_games_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rounds_games_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131125193314
20131125193706
20131125193927
20131125194209
20131125194304
20131125194920
20131125195050
20131125195235
20131125205128
20131125211047
20131126171525
20131126184429
20131126200236
20131126201451
20131202024514
20131202025937
20131202032210
\.


--
-- Data for Name: sponsors_tributes; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY sponsors_tributes (id, person_id, tribute_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: sponsors_tributes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('sponsors_tributes_id_seq', 1, false);


--
-- Name: escorts_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY escorts
    ADD CONSTRAINT escorts_pkey PRIMARY KEY (id);


--
-- Name: events_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY events
    ADD CONSTRAINT events_pkey PRIMARY KEY (id);


--
-- Name: games_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY games
    ADD CONSTRAINT games_pkey PRIMARY KEY (id);


--
-- Name: people_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY people
    ADD CONSTRAINT people_pkey PRIMARY KEY (id);


--
-- Name: places_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY places
    ADD CONSTRAINT places_pkey PRIMARY KEY (id);


--
-- Name: reapings_games_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY reapings_games
    ADD CONSTRAINT reapings_games_pkey PRIMARY KEY (id);


--
-- Name: rounds_games_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rounds_games
    ADD CONSTRAINT rounds_games_pkey PRIMARY KEY (id);


--
-- Name: sponsors_tributes_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY sponsors_tributes
    ADD CONSTRAINT sponsors_tributes_pkey PRIMARY KEY (id);


--
-- Name: index_people_on_district_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_people_on_district_id ON people USING btree (district_id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect hunger_test

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: escorts; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE escorts (
    id integer NOT NULL,
    person_id integer,
    tribute_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.escorts OWNER TO "Paris";

--
-- Name: escorts_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE escorts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.escorts_id_seq OWNER TO "Paris";

--
-- Name: escorts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE escorts_id_seq OWNED BY escorts.id;


--
-- Name: events; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE events (
    id integer NOT NULL,
    type character varying(255),
    name character varying(255),
    game_id integer
);


ALTER TABLE public.events OWNER TO "Paris";

--
-- Name: events_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.events_id_seq OWNER TO "Paris";

--
-- Name: events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE events_id_seq OWNED BY events.id;


--
-- Name: games; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE games (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.games OWNER TO "Paris";

--
-- Name: games_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE games_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.games_id_seq OWNER TO "Paris";

--
-- Name: games_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE games_id_seq OWNED BY games.id;


--
-- Name: people; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE people (
    id integer NOT NULL,
    type character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    district integer,
    is_tribute boolean,
    is_victor boolean,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    gender character varying(255),
    age integer,
    district_id integer,
    game_id integer
);


ALTER TABLE public.people OWNER TO "Paris";

--
-- Name: people_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE people_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.people_id_seq OWNER TO "Paris";

--
-- Name: people_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE people_id_seq OWNED BY people.id;


--
-- Name: places; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE places (
    id integer NOT NULL,
    type character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.places OWNER TO "Paris";

--
-- Name: places_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE places_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.places_id_seq OWNER TO "Paris";

--
-- Name: places_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE places_id_seq OWNED BY places.id;


--
-- Name: reapings_games; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE reapings_games (
    id integer NOT NULL,
    game_id integer,
    place_id integer,
    tribute_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.reapings_games OWNER TO "Paris";

--
-- Name: reapings_games_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE reapings_games_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reapings_games_id_seq OWNER TO "Paris";

--
-- Name: reapings_games_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE reapings_games_id_seq OWNED BY reapings_games.id;


--
-- Name: rounds_games; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rounds_games (
    id integer NOT NULL,
    place_id integer,
    tribute_id integer,
    has_died boolean,
    skills character varying(255),
    score integer,
    is_victor boolean,
    game_id integer
);


ALTER TABLE public.rounds_games OWNER TO "Paris";

--
-- Name: rounds_games_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rounds_games_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rounds_games_id_seq OWNER TO "Paris";

--
-- Name: rounds_games_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rounds_games_id_seq OWNED BY rounds_games.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: sponsors_tributes; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE sponsors_tributes (
    id integer NOT NULL,
    person_id integer,
    tribute_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.sponsors_tributes OWNER TO "Paris";

--
-- Name: sponsors_tributes_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE sponsors_tributes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sponsors_tributes_id_seq OWNER TO "Paris";

--
-- Name: sponsors_tributes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE sponsors_tributes_id_seq OWNED BY sponsors_tributes.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY escorts ALTER COLUMN id SET DEFAULT nextval('escorts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY events ALTER COLUMN id SET DEFAULT nextval('events_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY games ALTER COLUMN id SET DEFAULT nextval('games_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY people ALTER COLUMN id SET DEFAULT nextval('people_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY places ALTER COLUMN id SET DEFAULT nextval('places_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY reapings_games ALTER COLUMN id SET DEFAULT nextval('reapings_games_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rounds_games ALTER COLUMN id SET DEFAULT nextval('rounds_games_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY sponsors_tributes ALTER COLUMN id SET DEFAULT nextval('sponsors_tributes_id_seq'::regclass);


--
-- Data for Name: escorts; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY escorts (id, person_id, tribute_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: escorts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('escorts_id_seq', 1, false);


--
-- Data for Name: events; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY events (id, type, name, game_id) FROM stdin;
\.


--
-- Name: events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('events_id_seq', 1, false);


--
-- Data for Name: games; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY games (id, name, created_at, updated_at) FROM stdin;
\.


--
-- Name: games_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('games_id_seq', 1, false);


--
-- Data for Name: people; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY people (id, type, name, district, is_tribute, is_victor, created_at, updated_at, gender, age, district_id, game_id) FROM stdin;
\.


--
-- Name: people_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('people_id_seq', 1, false);


--
-- Data for Name: places; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY places (id, type, name, created_at, updated_at) FROM stdin;
\.


--
-- Name: places_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('places_id_seq', 1, false);


--
-- Data for Name: reapings_games; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY reapings_games (id, game_id, place_id, tribute_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: reapings_games_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('reapings_games_id_seq', 1, false);


--
-- Data for Name: rounds_games; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rounds_games (id, place_id, tribute_id, has_died, skills, score, is_victor, game_id) FROM stdin;
\.


--
-- Name: rounds_games_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rounds_games_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131202032210
20131125193314
20131125193927
20131125194209
20131125194304
20131125194920
20131125195050
20131125195235
20131125205128
20131125211047
20131126171525
20131126184429
20131126200236
20131126201451
20131202024514
20131202025937
\.


--
-- Data for Name: sponsors_tributes; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY sponsors_tributes (id, person_id, tribute_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: sponsors_tributes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('sponsors_tributes_id_seq', 1, false);


--
-- Name: escorts_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY escorts
    ADD CONSTRAINT escorts_pkey PRIMARY KEY (id);


--
-- Name: events_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY events
    ADD CONSTRAINT events_pkey PRIMARY KEY (id);


--
-- Name: games_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY games
    ADD CONSTRAINT games_pkey PRIMARY KEY (id);


--
-- Name: people_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY people
    ADD CONSTRAINT people_pkey PRIMARY KEY (id);


--
-- Name: places_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY places
    ADD CONSTRAINT places_pkey PRIMARY KEY (id);


--
-- Name: reapings_games_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY reapings_games
    ADD CONSTRAINT reapings_games_pkey PRIMARY KEY (id);


--
-- Name: rounds_games_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rounds_games
    ADD CONSTRAINT rounds_games_pkey PRIMARY KEY (id);


--
-- Name: sponsors_tributes_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY sponsors_tributes
    ADD CONSTRAINT sponsors_tributes_pkey PRIMARY KEY (id);


--
-- Name: index_people_on_district_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_people_on_district_id ON people USING btree (district_id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect moma_db

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: artists; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE artists (
    id integer NOT NULL,
    name character varying(50) NOT NULL,
    nationality character varying(50) NOT NULL,
    date_of_birth character varying(50) NOT NULL
);


ALTER TABLE public.artists OWNER TO "Paris";

--
-- Name: artists_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE artists_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.artists_id_seq OWNER TO "Paris";

--
-- Name: artists_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE artists_id_seq OWNED BY artists.id;


--
-- Name: paintings; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE paintings (
    id integer NOT NULL,
    title character varying(50) NOT NULL,
    year integer,
    image_url text,
    artist_id integer
);


ALTER TABLE public.paintings OWNER TO "Paris";

--
-- Name: paintings_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE paintings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.paintings_id_seq OWNER TO "Paris";

--
-- Name: paintings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE paintings_id_seq OWNED BY paintings.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY artists ALTER COLUMN id SET DEFAULT nextval('artists_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY paintings ALTER COLUMN id SET DEFAULT nextval('paintings_id_seq'::regclass);


--
-- Data for Name: artists; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY artists (id, name, nationality, date_of_birth) FROM stdin;
3	Vincent van Gogh	Dutch	March 30, 1853
4	Edgar Degas	French	July 19, 1834
1	Pablo Picasso	USA	October 25, 1881
\.


--
-- Name: artists_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('artists_id_seq', 4, true);


--
-- Data for Name: paintings; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY paintings (id, title, year, image_url, artist_id) FROM stdin;
3	Irises	1889	http://www.vangoghgallery.com/catalog/image/0608/Irises.jpg	\N
4	The Potato Eaters	1885	http://upload.wikimedia.org/wikipedia/commons/b/b1/Van-willem-vincent-gogh-die-kartoffelesser-03850.jpg	\N
5	Interior	1868	http://uploads4.wikipaintings.org/images/edgar-degas/interior-the-rape-1869.jpg	\N
6	L'Absinthe	1875	http://www.ibiblio.org/wm/paint/auth/degas/absinthe/degas.absinthe-2.jpg	\N
1	Guernica	1937	http://upload.wikimedia.org/wikipedia/en/7/74/PicassoGuernica.jpg	1
2	Still Life with a Bottle of Rum	1911	http://upload.wikimedia.org/wikipedia/en/7/7f/Pablo_Picasso%2C_1911%2C_Still_Life_with_a_Bottle_of_Rum%2C_oil_on_canvas%2C_61.3_x_50.5_cm%2C_Metropolitan_Museum_of_Art%2C_New_York.jpg	1
7	Starry Night	1889	http://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/1280px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg	1
8	Head of a Woman	1960	http://0.tqn.com/d/arthistory/1/0/O/0/1/picasso-met-2010-31.jpg	\N
\.


--
-- Name: paintings_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('paintings_id_seq', 8, true);


--
-- Name: artists_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY artists
    ADD CONSTRAINT artists_pkey PRIMARY KEY (id);


--
-- Name: paintings_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY paintings
    ADD CONSTRAINT paintings_pkey PRIMARY KEY (id);


--
-- Name: paintings_artist_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY paintings
    ADD CONSTRAINT paintings_artist_id_fkey FOREIGN KEY (artist_id) REFERENCES artists(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect moolah_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: achievements; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE achievements (
    id integer NOT NULL,
    user_id integer,
    name character varying(255),
    date date,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    goal_id integer NOT NULL
);


ALTER TABLE public.achievements OWNER TO "Paris";

--
-- Name: achievements_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE achievements_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.achievements_id_seq OWNER TO "Paris";

--
-- Name: achievements_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE achievements_id_seq OWNED BY achievements.id;


--
-- Name: activities; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE activities (
    id integer NOT NULL,
    trackable_id integer,
    trackable_type character varying(255),
    owner_id integer,
    owner_type character varying(255),
    key character varying(255),
    parameters text,
    recipient_id integer,
    recipient_type character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.activities OWNER TO "Paris";

--
-- Name: activities_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activities_id_seq OWNER TO "Paris";

--
-- Name: activities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE activities_id_seq OWNED BY activities.id;


--
-- Name: connections; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE connections (
    id integer NOT NULL,
    user_id integer,
    friend_id integer
);


ALTER TABLE public.connections OWNER TO "Paris";

--
-- Name: connections_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE connections_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.connections_id_seq OWNER TO "Paris";

--
-- Name: connections_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE connections_id_seq OWNED BY connections.id;


--
-- Name: goals; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE goals (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    final_amount integer NOT NULL,
    deadline date,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    photo_url character varying(255)
);


ALTER TABLE public.goals OWNER TO "Paris";

--
-- Name: goals_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE goals_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.goals_id_seq OWNER TO "Paris";

--
-- Name: goals_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE goals_id_seq OWNED BY goals.id;


--
-- Name: goals_users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE goals_users (
    id integer NOT NULL,
    goal_id integer,
    user_id integer
);


ALTER TABLE public.goals_users OWNER TO "Paris";

--
-- Name: goals_users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE goals_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.goals_users_id_seq OWNER TO "Paris";

--
-- Name: goals_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE goals_users_id_seq OWNED BY goals_users.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: transactions; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE transactions (
    id integer NOT NULL,
    user_id integer,
    goal_id integer,
    description character varying(255) NOT NULL,
    amount integer NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.transactions OWNER TO "Paris";

--
-- Name: transactions_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE transactions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.transactions_id_seq OWNER TO "Paris";

--
-- Name: transactions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE transactions_id_seq OWNED BY transactions.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    first_name character varying(255) NOT NULL,
    last_name character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    photo_url text,
    total_savings integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    provider character varying(255),
    uid character varying(255),
    oauth_token character varying(255),
    oauth_expires_at timestamp without time zone
);


ALTER TABLE public.users OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY achievements ALTER COLUMN id SET DEFAULT nextval('achievements_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY activities ALTER COLUMN id SET DEFAULT nextval('activities_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY connections ALTER COLUMN id SET DEFAULT nextval('connections_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY goals ALTER COLUMN id SET DEFAULT nextval('goals_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY goals_users ALTER COLUMN id SET DEFAULT nextval('goals_users_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY transactions ALTER COLUMN id SET DEFAULT nextval('transactions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: achievements; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY achievements (id, user_id, name, date, created_at, updated_at, goal_id) FROM stdin;
3	4	penguin	\N	2013-11-15 07:13:39.621149	2013-11-15 07:13:39.621149	13
4	4	Penguin	\N	2013-11-15 08:17:07.776411	2013-11-15 08:17:07.776411	14
5	4	Meerkat	\N	2013-11-15 08:40:11.818548	2013-11-15 08:40:11.818548	14
6	4	Penguin	\N	2013-11-15 08:45:22.849664	2013-11-15 08:45:22.849664	15
7	4	Penguin	\N	2013-11-15 08:49:06.930432	2013-11-15 08:49:06.930432	16
8	4	Meerkat	\N	2013-11-15 08:49:40.185574	2013-11-15 08:49:40.185574	16
9	4	Gorilla	\N	2013-11-15 08:50:21.459756	2013-11-15 08:50:21.459756	16
10	4	Yak	\N	2013-11-15 08:50:49.828466	2013-11-15 08:50:49.828466	16
11	4	Penguin	\N	2013-11-15 09:44:36.833323	2013-11-15 09:44:36.833323	17
12	4	Meerkat	\N	2013-11-15 09:47:30.612333	2013-11-15 09:47:30.612333	17
13	4	Yak	\N	2013-11-15 09:49:23.030138	2013-11-15 09:49:23.030138	17
14	4	Yak	\N	2013-11-15 09:59:41.49551	2013-11-15 09:59:41.49551	18
15	4	Yak	\N	2013-11-15 10:10:54.180033	2013-11-15 10:10:54.180033	19
16	4	Yak	\N	2013-11-15 10:48:25.636408	2013-11-15 10:48:25.636408	20
17	4	Yak	\N	2013-12-02 23:01:47.027286	2013-12-02 23:01:47.027286	13
18	4	Meerkat	\N	2013-12-02 23:18:10.777067	2013-12-02 23:18:10.777067	15
19	4	Gorilla	\N	2013-12-03 02:08:06.506851	2013-12-03 02:08:06.506851	15
20	4	Penguin	\N	2013-12-03 05:54:08.976532	2013-12-03 05:54:08.976532	23
21	4	Yak	\N	2013-12-03 05:54:28.312961	2013-12-03 05:54:28.312961	23
22	4	Meerkat	\N	2013-12-03 05:56:06.493001	2013-12-03 05:56:06.493001	24
23	4	Gorilla	\N	2013-12-03 06:10:45.667987	2013-12-03 06:10:45.667987	24
24	4	Penguin	\N	2013-12-03 14:02:24.528436	2013-12-03 14:02:24.528436	22
25	4	Gorilla	\N	2013-12-03 14:04:20.223078	2013-12-03 14:04:20.223078	22
\.


--
-- Name: achievements_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('achievements_id_seq', 25, true);


--
-- Data for Name: activities; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY activities (id, trackable_id, trackable_type, owner_id, owner_type, key, parameters, recipient_id, recipient_type, created_at, updated_at) FROM stdin;
41	3	Connection	4	User	connection.create	--- {}\n	\N	\N	2013-11-15 07:06:47.088994	2013-11-15 07:06:47.088994
42	4	Connection	4	User	connection.create	--- {}\n	\N	\N	2013-11-15 07:06:47.115903	2013-11-15 07:06:47.115903
43	5	Connection	4	User	connection.create	--- {}\n	\N	\N	2013-11-15 07:07:25.786721	2013-11-15 07:07:25.786721
44	6	Connection	4	User	connection.create	--- {}\n	\N	\N	2013-11-15 07:07:25.798319	2013-11-15 07:07:25.798319
45	13	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 07:10:55.490124	2013-11-15 07:10:55.490124
46	30	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 07:11:14.1855	2013-11-15 07:11:14.1855
47	31	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 07:12:27.848921	2013-11-15 07:12:27.848921
48	32	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 07:13:11.304977	2013-11-15 07:13:11.304977
49	3	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 07:13:39.62599	2013-11-15 07:13:39.62599
50	33	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 07:13:39.633517	2013-11-15 07:13:39.633517
51	4	User	\N	\N	user.update	--- {}\n	\N	\N	2013-11-15 07:38:14.030505	2013-11-15 07:38:14.030505
52	14	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 08:15:17.481021	2013-11-15 08:15:17.481021
53	34	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:15:39.261045	2013-11-15 08:15:39.261045
54	35	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:16:26.497495	2013-11-15 08:16:26.497495
55	4	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 08:17:07.783038	2013-11-15 08:17:07.783038
56	36	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:17:07.787298	2013-11-15 08:17:07.787298
57	37	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:18:40.153291	2013-11-15 08:18:40.153291
58	38	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:25:00.918776	2013-11-15 08:25:00.918776
59	5	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 08:40:11.825374	2013-11-15 08:40:11.825374
60	39	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:40:11.831427	2013-11-15 08:40:11.831427
61	15	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 08:41:17.351829	2013-11-15 08:41:17.351829
62	6	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 08:45:22.86215	2013-11-15 08:45:22.86215
63	40	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:45:22.866761	2013-11-15 08:45:22.866761
64	16	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 08:48:32.509654	2013-11-15 08:48:32.509654
65	7	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 08:49:06.940089	2013-11-15 08:49:06.940089
66	41	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:49:06.945207	2013-11-15 08:49:06.945207
67	8	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 08:49:40.192021	2013-11-15 08:49:40.192021
68	42	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:49:40.196838	2013-11-15 08:49:40.196838
69	9	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 08:50:21.46472	2013-11-15 08:50:21.46472
70	43	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:50:21.470434	2013-11-15 08:50:21.470434
71	10	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 08:50:49.833808	2013-11-15 08:50:49.833808
72	44	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 08:50:49.843522	2013-11-15 08:50:49.843522
73	17	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 09:42:58.509551	2013-11-15 09:42:58.509551
74	11	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 09:44:36.839809	2013-11-15 09:44:36.839809
75	45	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 09:44:36.844981	2013-11-15 09:44:36.844981
76	12	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 09:47:30.618276	2013-11-15 09:47:30.618276
77	46	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 09:47:30.62379	2013-11-15 09:47:30.62379
78	13	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 09:49:23.033211	2013-11-15 09:49:23.033211
79	47	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 09:49:23.038034	2013-11-15 09:49:23.038034
80	48	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 09:52:08.872734	2013-11-15 09:52:08.872734
81	49	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 09:58:18.393712	2013-11-15 09:58:18.393712
82	50	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 09:58:30.017001	2013-11-15 09:58:30.017001
83	18	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 09:59:24.730659	2013-11-15 09:59:24.730659
84	14	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 09:59:41.501748	2013-11-15 09:59:41.501748
85	51	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 09:59:41.510809	2013-11-15 09:59:41.510809
86	52	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 10:09:52.069452	2013-11-15 10:09:52.069452
87	19	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 10:10:44.640206	2013-11-15 10:10:44.640206
88	15	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 10:10:54.183209	2013-11-15 10:10:54.183209
89	53	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 10:10:54.18688	2013-11-15 10:10:54.18688
90	20	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 10:48:08.462326	2013-11-15 10:48:08.462326
91	16	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-11-15 10:48:25.641159	2013-11-15 10:48:25.641159
92	54	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 10:48:25.645323	2013-11-15 10:48:25.645323
93	55	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-11-15 10:48:51.705075	2013-11-15 10:48:51.705075
94	21	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 10:49:40.349656	2013-11-15 10:49:40.349656
95	22	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-11-15 17:21:00.049415	2013-11-15 17:21:00.049415
96	4	User	\N	\N	user.update	--- {}\n	\N	\N	2013-12-02 20:22:55.271684	2013-12-02 20:22:55.271684
97	17	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-12-02 23:01:47.070097	2013-12-02 23:01:47.070097
98	56	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-02 23:01:47.102065	2013-12-02 23:01:47.102065
99	23	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-12-02 23:03:07.922945	2013-12-02 23:03:07.922945
100	18	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-12-02 23:18:10.780087	2013-12-02 23:18:10.780087
101	57	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-02 23:18:10.783524	2013-12-02 23:18:10.783524
102	58	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 02:07:37.618725	2013-12-03 02:07:37.618725
103	19	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-12-03 02:08:06.5114	2013-12-03 02:08:06.5114
104	59	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 02:08:06.514867	2013-12-03 02:08:06.514867
105	20	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-12-03 05:54:09.136937	2013-12-03 05:54:09.136937
106	60	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 05:54:09.14603	2013-12-03 05:54:09.14603
107	21	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-12-03 05:54:28.315933	2013-12-03 05:54:28.315933
108	61	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 05:54:28.319345	2013-12-03 05:54:28.319345
109	24	Goal	4	User	goal.create	--- {}\n	\N	\N	2013-12-03 05:55:48.490243	2013-12-03 05:55:48.490243
110	22	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-12-03 05:56:06.496219	2013-12-03 05:56:06.496219
111	62	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 05:56:06.499662	2013-12-03 05:56:06.499662
112	63	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 06:09:52.487773	2013-12-03 06:09:52.487773
113	23	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-12-03 06:10:45.671841	2013-12-03 06:10:45.671841
114	64	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 06:10:45.675299	2013-12-03 06:10:45.675299
115	24	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-12-03 14:02:24.648768	2013-12-03 14:02:24.648768
116	65	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 14:02:24.657824	2013-12-03 14:02:24.657824
117	25	Achievement	4	User	achievement.create	--- {}\n	\N	\N	2013-12-03 14:04:20.226133	2013-12-03 14:04:20.226133
118	66	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 14:04:20.229714	2013-12-03 14:04:20.229714
119	67	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 14:04:49.922578	2013-12-03 14:04:49.922578
120	68	Transaction	4	User	transaction.create	--- {}\n	\N	\N	2013-12-03 14:05:21.294962	2013-12-03 14:05:21.294962
\.


--
-- Name: activities_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('activities_id_seq', 120, true);


--
-- Data for Name: connections; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY connections (id, user_id, friend_id) FROM stdin;
3	4	2
4	2	4
5	4	3
6	3	4
\.


--
-- Name: connections_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('connections_id_seq', 6, true);


--
-- Data for Name: goals; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY goals (id, name, description, final_amount, deadline, created_at, updated_at, photo_url) FROM stdin;
13	Yacht	a big boat	800000	2013-11-20	2013-11-15 07:10:55.484197	2013-11-15 07:10:55.484197	http://www.diseno-art.com/news_content/wp-content/uploads/2011/07/Yacht-Island-Designs-Tropical-Island-Paradise-1.jpg
14	Facelift	For my face!	20000	2013-11-20	2013-11-15 08:15:17.46644	2013-11-15 08:15:17.46644	http://www.aycockmd.com/wp-content/uploads/2012/12/facelift-04a.jpg
15	Kindle	Fancy kind	1000	2013-11-15	2013-11-15 08:41:17.143736	2013-11-15 08:41:17.143736	http://www.gadgetvenue.com/wp-content/uploads/2010/08/Amazon-Kindle1.jpg
16	Breast Cancer	Bad disease. hate it.	10000	2013-11-15	2013-11-15 08:48:32.408007	2013-11-15 08:48:32.408007	http://news.vanderbilt.edu/files/race-for-the-cure-300.jpg
17	Pancakes	from da IHOP at 4am	1000	2013-11-16	2013-11-15 09:42:58.500467	2013-11-15 09:42:58.500467	google.com/image.jpg
18	hey	ho	100	2013-11-16	2013-11-15 09:59:24.72514	2013-11-15 09:59:24.72514	plus
19	Mexico Vacay	woohoo	100	2013-11-15	2013-11-15 10:10:44.636291	2013-11-15 10:10:44.636291	
20	new goal	hello	1000	2013-11-22	2013-11-15 10:48:08.406812	2013-11-15 10:48:08.406812	http://2.bp.blogspot.com/-ERIwdF-GO8w/T5zlpeVsWWI/AAAAAAAAAII/l_7i1sIUr4E/s1600/stuff.jpg
21	sadf	asdf	100	\N	2013-11-15 10:49:40.345154	2013-11-15 10:49:40.345154	asdf
22	new goal	new goal	50	2013-11-28	2013-11-15 17:20:59.977322	2013-11-15 17:20:59.977322	hi.jpg
23	xmas gifts	stuff for fam and friends	500	2013-12-17	2013-12-02 23:03:07.90555	2013-12-02 23:03:07.90555	http://images2.fanpop.com/images/photos/8100000/Christmas-Tree-Wallpaper-christmas-8142630-1024-768.jpg
24	bike	new bike	400	2013-12-31	2013-12-03 05:55:48.484253	2013-12-03 05:55:48.484253	http://www.niu.edu/eshrd/Bike%20Safety/atlas_bike.gif
\.


--
-- Name: goals_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('goals_id_seq', 24, true);


--
-- Data for Name: goals_users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY goals_users (id, goal_id, user_id) FROM stdin;
22	13	2
23	13	3
24	13	4
25	14	2
26	14	4
27	15	2
28	15	4
29	16	4
30	17	2
31	17	3
32	17	4
33	18	4
34	19	4
35	20	2
36	20	4
37	21	4
38	22	2
39	22	4
40	23	2
41	23	4
42	24	2
43	24	3
44	24	4
\.


--
-- Name: goals_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('goals_users_id_seq', 44, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131110205820
20131110205847
20131110205901
20131110205924
20131110213719
20131110220121
20131110220157
20131110234852
20131111170527
20131111170719
20131111171253
20131111171413
20131111173556
20131111193901
20131111211639
20131111211902
20131111213847
20131112213706
20131114194410
20131114200914
\.


--
-- Data for Name: transactions; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY transactions (id, user_id, goal_id, description, amount, created_at, updated_at) FROM stdin;
30	4	13	coffeemaker	1000	2013-11-15 07:11:14.167747	2013-11-15 07:11:14.167747
31	4	13	coffeemaker	1000	2013-11-15 07:12:27.785992	2013-11-15 07:12:27.785992
32	4	13	coffee stuff	1000	2013-11-15 07:13:11.107989	2013-11-15 07:13:11.107989
33	4	13	sell the house	300000	2013-11-15 07:13:39.612414	2013-11-15 07:13:39.612414
34	4	14	coffee	1000	2013-11-15 08:15:39.243552	2013-11-15 08:15:39.243552
35	4	14	so much coffee	1501	2013-11-15 08:16:26.486734	2013-11-15 08:16:26.486734
36	4	14	fuck coffee	2500	2013-11-15 08:17:07.769852	2013-11-15 08:17:07.769852
37	4	14	cafe as they say in spanish	2500	2013-11-15 08:18:40.143219	2013-11-15 08:18:40.143219
38	4	14	he	100	2013-11-15 08:25:00.902476	2013-11-15 08:25:00.902476
39	4	14	hi	2400	2013-11-15 08:36:45.994864	2013-11-15 08:36:45.994864
40	4	15	pigs	250	2013-11-15 08:41:46.627503	2013-11-15 08:41:46.627503
41	4	16	yuhhp	2500	2013-11-15 08:48:47.717141	2013-11-15 08:48:47.717141
42	4	16	i should have another	2500	2013-11-15 08:49:30.530084	2013-11-15 08:49:30.530084
43	4	16	da whole shabang	2500	2013-11-15 08:50:05.397406	2013-11-15 08:50:05.397406
44	4	16	this is it! Just cured breast cancer!	2500	2013-11-15 08:50:37.531139	2013-11-15 08:50:37.531139
45	4	17	coffee	111	2013-11-15 09:44:25.431673	2013-11-15 09:44:25.431673
46	4	17	meerkat	100	2013-11-15 09:47:30.598124	2013-11-15 09:47:30.598124
47	4	17	hey	320	2013-11-15 09:49:23.021899	2013-11-15 09:49:23.021899
48	4	17	hello	50	2013-11-15 09:52:08.860862	2013-11-15 09:52:08.860862
49	4	17	hi	10	2013-11-15 09:58:18.263083	2013-11-15 09:58:18.263083
50	4	17	hi	333	2013-11-15 09:58:30.005238	2013-11-15 09:58:30.005238
51	4	18	a	100	2013-11-15 09:59:41.486192	2013-11-15 09:59:41.486192
52	4	18	hi	100	2013-11-15 10:09:52.059059	2013-11-15 10:09:52.059059
53	4	19	hi	100	2013-11-15 10:10:54.171575	2013-11-15 10:10:54.171575
54	4	20	coffee	500	2013-11-15 10:48:25.61696	2013-11-15 10:48:25.61696
55	4	20	coffee	100	2013-11-15 10:48:51.690647	2013-11-15 10:48:51.690647
56	4	13	coffee	10	2013-12-02 23:01:46.976523	2013-12-02 23:01:46.976523
57	4	15	clothes	60	2013-12-02 23:18:10.770163	2013-12-02 23:18:10.770163
58	4	15	coffee	10	2013-12-03 02:07:37.568468	2013-12-03 02:07:37.568468
59	4	15	stuff	100	2013-12-03 02:08:06.499523	2013-12-03 02:08:06.499523
60	4	23	hair cut	100	2013-12-03 05:54:08.934688	2013-12-03 05:54:08.934688
61	4	23	kindle	300	2013-12-03 05:54:28.305548	2013-12-03 05:54:28.305548
62	4	24	haircut	80	2013-12-03 05:56:06.485803	2013-12-03 05:56:06.485803
63	4	24	waffles	12	2013-12-03 06:09:52.475421	2013-12-03 06:09:52.475421
64	4	24	socks	12	2013-12-03 06:10:45.660748	2013-12-03 06:10:45.660748
65	4	22	stuff	10	2013-12-03 14:02:24.380798	2013-12-03 14:02:24.380798
66	4	22	stuff	10	2013-12-03 14:04:20.215676	2013-12-03 14:04:20.215676
67	4	22	stuff	2	2013-12-03 14:04:49.849401	2013-12-03 14:04:49.849401
68	4	22	stuff	1	2013-12-03 14:05:21.283932	2013-12-03 14:05:21.283932
\.


--
-- Name: transactions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('transactions_id_seq', 68, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY users (id, first_name, last_name, email, photo_url, total_savings, created_at, updated_at, provider, uid, oauth_token, oauth_expires_at) FROM stdin;
2	Arun	Umap	arunumap@gmail.com	http://www.google.com	4	2013-11-15 00:50:36.521053	2013-11-15 00:50:36.521053	\N	\N	\N	\N
3	blah	blahblah	blah@gmail.com	http://www.google.com	4	2013-11-15 00:50:36.647275	2013-11-15 00:50:36.647275	\N	\N	\N	\N
4	Paris	Lia	parismaple@gmail.com	http://graph.facebook.com/762465229/picture?type=square	\N	2013-11-15 00:52:40.014096	2013-12-02 20:22:54.974341	facebook	762465229	CAACZB1awr0nMBACdDBK6BsQOvQU3KqQkwOHN91RNzmdRgq8cXJH7RZBSMeBRxukPTrUx9RRZBJ8TUc9boyg1KFzcTnfd5vwPtcnWyiz4z3eb4YGSVZBlqsvsHtOz8ly0giFgq07NOISBuuS6gplDXBWCg3fLdLP5oOrb7c73qZAQm2xrr7xfW	2014-01-31 20:22:53
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('users_id_seq', 4, true);


--
-- Name: achievements_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY achievements
    ADD CONSTRAINT achievements_pkey PRIMARY KEY (id);


--
-- Name: activities_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY activities
    ADD CONSTRAINT activities_pkey PRIMARY KEY (id);


--
-- Name: connections_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY connections
    ADD CONSTRAINT connections_pkey PRIMARY KEY (id);


--
-- Name: goals_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY goals
    ADD CONSTRAINT goals_pkey PRIMARY KEY (id);


--
-- Name: goals_users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY goals_users
    ADD CONSTRAINT goals_users_pkey PRIMARY KEY (id);


--
-- Name: transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY transactions
    ADD CONSTRAINT transactions_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: index_activities_on_owner_id_and_owner_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_activities_on_owner_id_and_owner_type ON activities USING btree (owner_id, owner_type);


--
-- Name: index_activities_on_recipient_id_and_recipient_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_activities_on_recipient_id_and_recipient_type ON activities USING btree (recipient_id, recipient_type);


--
-- Name: index_activities_on_trackable_id_and_trackable_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_activities_on_trackable_id_and_trackable_type ON activities USING btree (trackable_id, trackable_type);


--
-- Name: index_users_on_email; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_email ON users USING btree (email);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect movies_db

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: movies; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE movies (
    id integer NOT NULL,
    year integer,
    poster character varying(300) NOT NULL,
    title character varying(50) NOT NULL
);


ALTER TABLE public.movies OWNER TO "Paris";

--
-- Name: movies_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE movies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.movies_id_seq OWNER TO "Paris";

--
-- Name: movies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE movies_id_seq OWNED BY movies.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY movies ALTER COLUMN id SET DEFAULT nextval('movies_id_seq'::regclass);


--
-- Data for Name: movies; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY movies (id, year, poster, title) FROM stdin;
1	1985	http://twitter.parislia.com	back to the future
\.


--
-- Name: movies_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('movies_id_seq', 1, true);


--
-- Name: movies_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY movies
    ADD CONSTRAINT movies_pkey PRIMARY KEY (id);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect postgres

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: postgres; Type: COMMENT; Schema: -; Owner: Paris
--

COMMENT ON DATABASE postgres IS 'default administrative connection database';


--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect projectio_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: dependencies; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE dependencies (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    dep_type character varying(255) NOT NULL,
    is_gem boolean NOT NULL,
    documentation_link character varying(255),
    other_link character varying(255)
);


ALTER TABLE public.dependencies OWNER TO "Paris";

--
-- Name: dependencies_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE dependencies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dependencies_id_seq OWNER TO "Paris";

--
-- Name: dependencies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE dependencies_id_seq OWNED BY dependencies.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: students; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE students (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    project_description text NOT NULL,
    github_link text,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    dependencies_id integer
);


ALTER TABLE public.students OWNER TO "Paris";

--
-- Name: students_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE students_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.students_id_seq OWNER TO "Paris";

--
-- Name: students_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE students_id_seq OWNED BY students.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY dependencies ALTER COLUMN id SET DEFAULT nextval('dependencies_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY students ALTER COLUMN id SET DEFAULT nextval('students_id_seq'::regclass);


--
-- Data for Name: dependencies; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY dependencies (id, name, dep_type, is_gem, documentation_link, other_link) FROM stdin;
1	McGenerator	API	t	\N	\N
\.


--
-- Name: dependencies_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('dependencies_id_seq', 1, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131016155738
20131016162637
20131016180108
20131016200041
20131016203127
\.


--
-- Data for Name: students; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY students (id, name, project_description, github_link, created_at, updated_at, dependencies_id) FROM stdin;
1	Student McStudentson	McProject	http://github/mcgithubaccount	2013-10-16 20:15:08.539219	2013-10-16 20:15:08.539219	\N
2	Albert Einstein	Theory of Relativity	\N	2013-10-16 20:17:56.728527	2013-10-16 20:17:56.728527	\N
\.


--
-- Name: students_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('students_id_seq', 2, true);


--
-- Name: dependencies_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY dependencies
    ADD CONSTRAINT dependencies_pkey PRIMARY KEY (id);


--
-- Name: students_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY students
    ADD CONSTRAINT students_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect receipts_db

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: parents; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE parents (
    id integer NOT NULL,
    name character varying(50) NOT NULL,
    budget integer NOT NULL
);


ALTER TABLE public.parents OWNER TO "Paris";

--
-- Name: parents_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE parents_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.parents_id_seq OWNER TO "Paris";

--
-- Name: parents_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE parents_id_seq OWNED BY parents.id;


--
-- Name: presents; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE presents (
    id integer NOT NULL,
    store character varying(50) NOT NULL,
    item character varying(50) NOT NULL,
    number_of_item integer DEFAULT 1,
    price double precision NOT NULL,
    buy_date date DEFAULT ('now'::text)::date,
    parent_id integer
);


ALTER TABLE public.presents OWNER TO "Paris";

--
-- Name: receipts_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE receipts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.receipts_id_seq OWNER TO "Paris";

--
-- Name: receipts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE receipts_id_seq OWNED BY presents.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY parents ALTER COLUMN id SET DEFAULT nextval('parents_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY presents ALTER COLUMN id SET DEFAULT nextval('receipts_id_seq'::regclass);


--
-- Data for Name: parents; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY parents (id, name, budget) FROM stdin;
1	Mom	300
2	Dad	250
\.


--
-- Name: parents_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('parents_id_seq', 2, true);


--
-- Data for Name: presents; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY presents (id, store, item, number_of_item, price, buy_date, parent_id) FROM stdin;
8	Local Book Store	Bunnicula	1	14	1989-12-21	\N
11	Express	overalls	1	40	1989-12-22	\N
2	Toys R Us	Nintendo	1	150	1989-12-21	1
3	Toys R Us	Simon Says	1	25	1989-12-21	1
4	Toys R Us	Pound Puppy	4	12	1989-12-21	1
19	Toys R Us	Trouble	1	25	1989-12-24	1
1	Sears	VCR	1	180	1989-12-21	1
5	Sears	Legos Set	1	40	1989-12-21	1
18	Sears	swatch watch	1	50	1989-12-24	1
12	JC Penny's	Keds	1	50	1989-12-23	2
13	JC Penny's	tube socks	3	28	1989-12-23	2
14	JC Penny's	Reeboks	1	60	1989-12-23	2
15	JC Penny's	tights, Red	1	10.5	1989-12-23	2
16	JC Penny's	Quicksilver t-shirt	1	20.75	1989-12-23	2
17	JC Penny's	Ninja Turtles bedspread	1	20	1989-12-23	2
6	Borders	Boxcar Children	3	12	1989-12-21	2
7	Borders	Babysitter's Club	2	12	1989-12-21	2
9	Macy's	pink Izod top	4	28.5	1989-12-22	2
\.


--
-- Name: receipts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('receipts_id_seq', 20, true);


--
-- Name: parents_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY parents
    ADD CONSTRAINT parents_pkey PRIMARY KEY (id);


--
-- Name: receipts_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY presents
    ADD CONSTRAINT receipts_pkey PRIMARY KEY (id);


--
-- Name: presents_parent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY presents
    ADD CONSTRAINT presents_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES parents(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect roomly_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: accounts; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE accounts (
    id integer NOT NULL,
    user_id integer,
    balance integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.accounts OWNER TO "Paris";

--
-- Name: accounts_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE accounts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.accounts_id_seq OWNER TO "Paris";

--
-- Name: accounts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE accounts_id_seq OWNED BY accounts.id;


--
-- Name: appointments; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE appointments (
    id integer NOT NULL,
    user_id integer,
    room_id integer,
    start timestamp without time zone,
    finish timestamp without time zone,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.appointments OWNER TO "Paris";

--
-- Name: appointments_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE appointments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.appointments_id_seq OWNER TO "Paris";

--
-- Name: appointments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE appointments_id_seq OWNED BY appointments.id;


--
-- Name: rooms; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rooms (
    id integer NOT NULL,
    name character varying(255),
    hourly_rate numeric,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.rooms OWNER TO "Paris";

--
-- Name: rooms_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rooms_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rooms_id_seq OWNER TO "Paris";

--
-- Name: rooms_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rooms_id_seq OWNED BY rooms.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    name character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    email character varying(255)
);


ALTER TABLE public.users OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY accounts ALTER COLUMN id SET DEFAULT nextval('accounts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY appointments ALTER COLUMN id SET DEFAULT nextval('appointments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rooms ALTER COLUMN id SET DEFAULT nextval('rooms_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: accounts; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY accounts (id, user_id, balance, created_at, updated_at) FROM stdin;
\.


--
-- Name: accounts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('accounts_id_seq', 1, false);


--
-- Data for Name: appointments; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY appointments (id, user_id, room_id, start, finish, created_at, updated_at) FROM stdin;
\.


--
-- Name: appointments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('appointments_id_seq', 1, false);


--
-- Data for Name: rooms; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rooms (id, name, hourly_rate, created_at, updated_at) FROM stdin;
\.


--
-- Name: rooms_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rooms_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131119021058
20131119021147
20131119021303
20131119191522
20131120005332
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY users (id, name, created_at, updated_at, email) FROM stdin;
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('users_id_seq', 1, false);


--
-- Name: accounts_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);


--
-- Name: appointments_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY appointments
    ADD CONSTRAINT appointments_pkey PRIMARY KEY (id);


--
-- Name: rooms_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rooms
    ADD CONSTRAINT rooms_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect roomly_test

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: accounts; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE accounts (
    id integer NOT NULL,
    user_id integer,
    balance integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.accounts OWNER TO "Paris";

--
-- Name: accounts_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE accounts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.accounts_id_seq OWNER TO "Paris";

--
-- Name: accounts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE accounts_id_seq OWNED BY accounts.id;


--
-- Name: appointments; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE appointments (
    id integer NOT NULL,
    user_id integer,
    room_id integer,
    start timestamp without time zone,
    finish timestamp without time zone,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.appointments OWNER TO "Paris";

--
-- Name: appointments_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE appointments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.appointments_id_seq OWNER TO "Paris";

--
-- Name: appointments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE appointments_id_seq OWNED BY appointments.id;


--
-- Name: rooms; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rooms (
    id integer NOT NULL,
    name character varying(255),
    hourly_rate numeric,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.rooms OWNER TO "Paris";

--
-- Name: rooms_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rooms_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rooms_id_seq OWNER TO "Paris";

--
-- Name: rooms_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rooms_id_seq OWNED BY rooms.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    name character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    email character varying(255)
);


ALTER TABLE public.users OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY accounts ALTER COLUMN id SET DEFAULT nextval('accounts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY appointments ALTER COLUMN id SET DEFAULT nextval('appointments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rooms ALTER COLUMN id SET DEFAULT nextval('rooms_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: accounts; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY accounts (id, user_id, balance, created_at, updated_at) FROM stdin;
\.


--
-- Name: accounts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('accounts_id_seq', 1, false);


--
-- Data for Name: appointments; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY appointments (id, user_id, room_id, start, finish, created_at, updated_at) FROM stdin;
\.


--
-- Name: appointments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('appointments_id_seq', 1, false);


--
-- Data for Name: rooms; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rooms (id, name, hourly_rate, created_at, updated_at) FROM stdin;
\.


--
-- Name: rooms_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rooms_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131120005332
20131119021058
20131119021147
20131119021303
20131119191522
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY users (id, name, created_at, updated_at, email) FROM stdin;
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('users_id_seq', 1, false);


--
-- Name: accounts_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);


--
-- Name: appointments_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY appointments
    ADD CONSTRAINT appointments_pkey PRIMARY KEY (id);


--
-- Name: rooms_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rooms
    ADD CONSTRAINT rooms_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect sandbox

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: clown_cars; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE clown_cars (
    id integer NOT NULL,
    color character varying(20) NOT NULL,
    capacity integer NOT NULL
);


ALTER TABLE public.clown_cars OWNER TO "Paris";

--
-- Name: clown_cars_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE clown_cars_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.clown_cars_id_seq OWNER TO "Paris";

--
-- Name: clown_cars_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE clown_cars_id_seq OWNED BY clown_cars.id;


--
-- Name: clowns; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE clowns (
    id integer NOT NULL,
    name character varying(50) NOT NULL,
    clown_car_id integer
);


ALTER TABLE public.clowns OWNER TO "Paris";

--
-- Name: clowns_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE clowns_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.clowns_id_seq OWNER TO "Paris";

--
-- Name: clowns_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE clowns_id_seq OWNED BY clowns.id;


--
-- Name: entries; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE entries (
    id integer NOT NULL,
    author character varying(50) NOT NULL,
    photo character varying(100),
    date_taken text
);


ALTER TABLE public.entries OWNER TO "Paris";

--
-- Name: entries_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE entries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.entries_id_seq OWNER TO "Paris";

--
-- Name: entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE entries_id_seq OWNED BY entries.id;


--
-- Name: morning_kittens; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE morning_kittens (
    id integer NOT NULL,
    url character varying(255),
    is_meow boolean
);


ALTER TABLE public.morning_kittens OWNER TO "Paris";

--
-- Name: morning_kittens_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE morning_kittens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.morning_kittens_id_seq OWNER TO "Paris";

--
-- Name: morning_kittens_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE morning_kittens_id_seq OWNED BY morning_kittens.id;


--
-- Name: morning_users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE morning_users (
    id integer NOT NULL,
    name character varying(50) NOT NULL,
    street_address text,
    email_address text
);


ALTER TABLE public.morning_users OWNER TO "Paris";

--
-- Name: morning_users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE morning_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.morning_users_id_seq OWNER TO "Paris";

--
-- Name: morning_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE morning_users_id_seq OWNED BY morning_users.id;


--
-- Name: musicals; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE musicals (
    id integer NOT NULL,
    title character varying(100) NOT NULL,
    year character varying(4) NOT NULL,
    composer character varying(100) NOT NULL
);


ALTER TABLE public.musicals OWNER TO "Paris";

--
-- Name: musicals_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE musicals_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.musicals_id_seq OWNER TO "Paris";

--
-- Name: musicals_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE musicals_id_seq OWNED BY musicals.id;


--
-- Name: people; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE people (
    id integer NOT NULL,
    name character varying(50),
    num_trips integer
);


ALTER TABLE public.people OWNER TO "Paris";

--
-- Name: people_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE people_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.people_id_seq OWNER TO "Paris";

--
-- Name: people_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE people_id_seq OWNED BY people.id;


--
-- Name: players; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE players (
    id integer NOT NULL,
    name character varying(50) NOT NULL,
    age integer,
    team character varying(50),
    games integer,
    points integer
);


ALTER TABLE public.players OWNER TO "Paris";

--
-- Name: players_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE players_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.players_id_seq OWNER TO "Paris";

--
-- Name: players_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE players_id_seq OWNED BY players.id;


--
-- Name: trips; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE trips (
    id integer NOT NULL,
    name character varying(50),
    num_trips integer
);


ALTER TABLE public.trips OWNER TO "Paris";

--
-- Name: trips_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE trips_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.trips_id_seq OWNER TO "Paris";

--
-- Name: trips_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE trips_id_seq OWNED BY trips.id;


--
-- Name: venues; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE venues (
    id integer NOT NULL,
    address text,
    latitude numeric,
    longitude numeric
);


ALTER TABLE public.venues OWNER TO "Paris";

--
-- Name: venues_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE venues_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.venues_id_seq OWNER TO "Paris";

--
-- Name: venues_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE venues_id_seq OWNED BY venues.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY clown_cars ALTER COLUMN id SET DEFAULT nextval('clown_cars_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY clowns ALTER COLUMN id SET DEFAULT nextval('clowns_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY entries ALTER COLUMN id SET DEFAULT nextval('entries_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY morning_kittens ALTER COLUMN id SET DEFAULT nextval('morning_kittens_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY morning_users ALTER COLUMN id SET DEFAULT nextval('morning_users_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY musicals ALTER COLUMN id SET DEFAULT nextval('musicals_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY people ALTER COLUMN id SET DEFAULT nextval('people_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY players ALTER COLUMN id SET DEFAULT nextval('players_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY trips ALTER COLUMN id SET DEFAULT nextval('trips_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY venues ALTER COLUMN id SET DEFAULT nextval('venues_id_seq'::regclass);


--
-- Data for Name: clown_cars; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY clown_cars (id, color, capacity) FROM stdin;
1	Blue	2
2	Red	40
3	Green	5
4	Mauve	900
5	Blue	10
6	Green	5
\.


--
-- Name: clown_cars_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('clown_cars_id_seq', 6, true);


--
-- Data for Name: clowns; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY clowns (id, name, clown_car_id) FROM stdin;
2	Pozo	\N
3	Dozo	\N
1	Bozo	1
6	Pozo	6
7	Dozo	\N
\.


--
-- Name: clowns_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('clowns_id_seq', 8, true);


--
-- Data for Name: entries; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY entries (id, author, photo, date_taken) FROM stdin;
1	Paris	http://i.huffpost.com/gen/964776/thumbs/o-CATS-KILL-BILLIONS-facebook.jpg	May 15, 2013
3	Marsha Brady	http://images2.fanpop.com/image/photos/13900000/Lovely-Dog-wallpaper-puppies-13935609-1920-1200.jpg	\N
4	Fred Flintstone	http://i2.cdn.turner.com/cnn/dam/assets/121207082825-cute-puppy-story-top.jpg	\N
5	Madonna	http://images2.fanpop.com/image/photos/13900000/Lovely-Dog-wallpaper-puppies-13935906-1920-1200.jpg	\N
6	Madonna	http://images2.fanpop.com/image/photos/13900000/Lovely-Dog-wallpaper-puppies-13935906-1920-1200.jpg	\N
7	Superman	http://9bytz.com/wp-content/uploads/2012/04/Sad-Puppies-2.jpg	2013-10-07
8	Mr. White	http://www.awesomelycute.com/gallery/2012/08/awesomely-cute-baby-animals-1514.jpg	2013-10-06
\.


--
-- Name: entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('entries_id_seq', 8, true);


--
-- Data for Name: morning_kittens; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY morning_kittens (id, url, is_meow) FROM stdin;
1	http://placekitten.com/400/400	f
2	http://placekitten.com/400/300	t
3	http://placekitten.com/400/400	t
4	http://placekitten.com/400/400	t
5	http://placekitten.com/400/300	t
6	http://placekitten.com/400/400	t
7	http://placekitten.com/400/300	t
8	http://placekitten.com/400/300	t
9	http://placekitten.com/400/400	f
10	http://placekitten.com/400/400	f
\.


--
-- Name: morning_kittens_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('morning_kittens_id_seq', 10, true);


--
-- Data for Name: morning_users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY morning_users (id, name, street_address, email_address) FROM stdin;
\.


--
-- Name: morning_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('morning_users_id_seq', 1, false);


--
-- Data for Name: musicals; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY musicals (id, title, year, composer) FROM stdin;
1	Follies	1971	Sondheim
2	The Sound of Music	1959	Rodgers
3	Sunday in the Park with George	1984	Sondheim
4	Rent	1994	Larson
\.


--
-- Name: musicals_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('musicals_id_seq', 4, true);


--
-- Data for Name: people; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY people (id, name, num_trips) FROM stdin;
1	Jeff	1
2	PJ	4
3	Peter	1
\.


--
-- Name: people_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('people_id_seq', 3, true);


--
-- Data for Name: players; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY players (id, name, age, team, games, points) FROM stdin;
1	Jeff Adrien	25	HOU	8	21
2	Arron Afflalo	26	DEN	62	943
3	Blake Ahearn	27	UTA	4	10
4	Solomon Alabi	23	TOR	14	33
5	Cole Aldrich	23	OKC	26	57
6	LaMarcus Aldridge	26	POR	55	1191
7	Lavoy Allen	22	PHI	41	169
8	Ray Allen	36	BOS	46	655
9	Tony Allen	30	MEM	58	568
10	Morris Almond	26	WAS	4	14
11	Al-Farouq Aminu	21	NOH	66	399
12	Louis Amundson	29	IND	60	213
13	Chris Andersen	33	DEN	32	168
14	Alan Anderson	29	TOR	17	163
15	James Anderson	22	SAS	51	190
16	Ryan Anderson	23	ORL	61	980
17	Carmelo Anthony	27	NYK	55	1245
18	Joel Anthony	29	MIA	64	219
19	Gilbert Arenas	30	MEM	17	72
20	Trevor Ariza	26	NOH	41	444
21	Omer Asik	25	CHI	66	205
22	D.J. Augustin	24	CHA	48	532
23	Gustavo Ayon	26	NOH	54	319
24	Kelenna Azubuike	28	DAL	3	7
25	Luke Babbitt	22	POR	40	202
26	Renaldo Balkman	27	NYK	14	42
27	Leandro Barbosa	29	TOR	42	512
28	Jose Barea	27	MIN	41	463
29	Andrea Bargnani	26	TOR	31	603
30	Matt Barnes	31	LAL	63	491
31	Earl Barron	30	GSW	2	4
32	Brandon Bass	26	BOS	59	738
33	Tony Battie	35	PHI	27	42
34	Shane Battier	33	MIA	65	311
35	Nicolas Batum	23	POR	59	818
36	Jerryd Bayless	23	TOR	31	353
37	Michael Beasley	23	MIN	47	541
38	Rodrigue Beaubois	23	DAL	53	472
39	Marco Belinelli	25	NOH	66	780
40	Raja Bell	35	UTA	34	217
41	Keith Benson	23	GSW	3	0
42	Mike Bibby	33	NYK	39	103
43	Andris Biedrins	25	GSW	47	79
44	Chauncey Billups	35	LAC	20	299
45	Bismack Biyombo	19	CHA	63	327
46	DeJuan Blair	22	SAS	64	611
47	Steve Blake	31	LAL	53	276
48	Andray Blatche	25	WAS	26	221
49	Eric Bledsoe	22	LAC	40	132
50	Keith Bogans	31	NJN	5	21
51	Andrew Bogut	27	MIL	12	136
52	Matt Bonner	31	SAS	65	429
53	Trevor Booker	24	WAS	50	419
54	Carlos Boozer	30	CHI	66	991
55	Chris Bosh	27	MIA	57	1025
56	Earl Boykins	35	HOU	8	39
57	Craig Brackins	24	PHI	14	22
58	Avery Bradley	21	BOS	64	484
59	Elton Brand	32	PHI	60	659
60	Corey Brewer	25	DEN	59	525
61	Ronnie Brewer	26	CHI	66	455
62	Jon Brockman	24	MIL	35	37
63	MarShon Brooks	23	NJN	56	708
64	Derrick Brown	24	CHA	65	524
65	Kwame Brown	29	GSW	9	57
66	Shannon Brown	26	PHO	59	650
67	Kobe Bryant	33	LAL	58	1616
68	Chase Budinger	23	HOU	58	558
69	Alec Burks	20	UTA	59	425
70	Caron Butler	31	LAC	63	753
71	Jimmy Butler	22	CHI	42	109
72	Rasual Butler	32	TOR	34	110
73	Derrick Byars	27	SAS	2	10
74	Andrew Bynum	24	LAL	60	1123
75	Will Bynum	29	DET	36	204
76	Jose Calderon	30	TOR	53	555
77	Marcus Camby	37	POR	40	152
78	Brian Cardinal	34	DAL	44	43
79	DeMarre Carroll	25	DEN	4	12
80	Matt Carroll	31	CHA	53	142
81	Anthony Carter	36	TOR	24	47
82	Vince Carter	35	DAL	61	615
83	Omri Casspi	23	CLE	65	459
84	Mario Chalmers	25	MIA	64	627
85	Tyson Chandler	29	NYK	62	699
86	Wilson Chandler	24	DEN	8	75
87	Josh Childress	28	PHO	34	100
88	Earl Clark	24	ORL	45	123
89	Norris Cole	23	MIA	65	441
90	Jason Collins	33	ATL	30	39
91	Darren Collison	24	IND	60	621
92	Nick Collison	31	OKC	63	284
93	Mike Conley	24	MEM	62	788
94	Brian Cook	31	LAC	16	31
95	Daequan Cook	24	OKC	57	311
96	DeMarcus Cousins	21	SAC	64	1160
97	Jamal Crawford	31	POR	60	837
98	Jordan Crawford	23	WAS	64	938
99	Dante Cunningham	24	MEM	64	333
100	Eddy Curry	29	MIA	14	30
101	Jeff Adrien	25	HOU	8	21
102	Arron Afflalo	26	DEN	62	943
103	Blake Ahearn	27	UTA	4	10
104	Solomon Alabi	23	TOR	14	33
105	Cole Aldrich	23	OKC	26	57
106	LaMarcus Aldridge	26	POR	55	1191
107	Lavoy Allen	22	PHI	41	169
108	Ray Allen	36	BOS	46	655
109	Tony Allen	30	MEM	58	568
110	Morris Almond	26	WAS	4	14
111	Al-Farouq Aminu	21	NOH	66	399
112	Louis Amundson	29	IND	60	213
113	Chris Andersen	33	DEN	32	168
114	Alan Anderson	29	TOR	17	163
115	James Anderson	22	SAS	51	190
116	Ryan Anderson	23	ORL	61	980
117	Carmelo Anthony	27	NYK	55	1245
118	Joel Anthony	29	MIA	64	219
119	Gilbert Arenas	30	MEM	17	72
120	Trevor Ariza	26	NOH	41	444
121	Omer Asik	25	CHI	66	205
122	D.J. Augustin	24	CHA	48	532
123	Gustavo Ayon	26	NOH	54	319
124	Kelenna Azubuike	28	DAL	3	7
125	Luke Babbitt	22	POR	40	202
126	Renaldo Balkman	27	NYK	14	42
127	Leandro Barbosa	29	TOR	42	512
128	Jose Barea	27	MIN	41	463
129	Andrea Bargnani	26	TOR	31	603
130	Matt Barnes	31	LAL	63	491
131	Earl Barron	30	GSW	2	4
132	Brandon Bass	26	BOS	59	738
133	Tony Battie	35	PHI	27	42
134	Shane Battier	33	MIA	65	311
135	Nicolas Batum	23	POR	59	818
136	Jerryd Bayless	23	TOR	31	353
137	Michael Beasley	23	MIN	47	541
138	Rodrigue Beaubois	23	DAL	53	472
139	Marco Belinelli	25	NOH	66	780
140	Raja Bell	35	UTA	34	217
141	Keith Benson	23	GSW	3	0
142	Mike Bibby	33	NYK	39	103
143	Andris Biedrins	25	GSW	47	79
144	Chauncey Billups	35	LAC	20	299
145	Bismack Biyombo	19	CHA	63	327
146	DeJuan Blair	22	SAS	64	611
147	Steve Blake	31	LAL	53	276
148	Andray Blatche	25	WAS	26	221
149	Eric Bledsoe	22	LAC	40	132
150	Keith Bogans	31	NJN	5	21
151	Andrew Bogut	27	MIL	12	136
152	Matt Bonner	31	SAS	65	429
153	Trevor Booker	24	WAS	50	419
154	Carlos Boozer	30	CHI	66	991
155	Chris Bosh	27	MIA	57	1025
156	Earl Boykins	35	HOU	8	39
157	Craig Brackins	24	PHI	14	22
158	Avery Bradley	21	BOS	64	484
159	Elton Brand	32	PHI	60	659
160	Corey Brewer	25	DEN	59	525
161	Ronnie Brewer	26	CHI	66	455
162	Jon Brockman	24	MIL	35	37
163	MarShon Brooks	23	NJN	56	708
164	Derrick Brown	24	CHA	65	524
165	Kwame Brown	29	GSW	9	57
166	Shannon Brown	26	PHO	59	650
167	Kobe Bryant	33	LAL	58	1616
168	Chase Budinger	23	HOU	58	558
169	Alec Burks	20	UTA	59	425
170	Caron Butler	31	LAC	63	753
171	Jimmy Butler	22	CHI	42	109
172	Rasual Butler	32	TOR	34	110
173	Derrick Byars	27	SAS	2	10
174	Andrew Bynum	24	LAL	60	1123
175	Will Bynum	29	DET	36	204
176	Jose Calderon	30	TOR	53	555
177	Marcus Camby	37	POR	40	152
178	Brian Cardinal	34	DAL	44	43
179	DeMarre Carroll	25	DEN	4	12
180	Matt Carroll	31	CHA	53	142
181	Anthony Carter	36	TOR	24	47
182	Vince Carter	35	DAL	61	615
183	Omri Casspi	23	CLE	65	459
184	Mario Chalmers	25	MIA	64	627
185	Tyson Chandler	29	NYK	62	699
186	Wilson Chandler	24	DEN	8	75
187	Josh Childress	28	PHO	34	100
188	Earl Clark	24	ORL	45	123
189	Norris Cole	23	MIA	65	441
190	Jason Collins	33	ATL	30	39
191	Darren Collison	24	IND	60	621
192	Nick Collison	31	OKC	63	284
193	Mike Conley	24	MEM	62	788
194	Brian Cook	31	LAC	16	31
195	Daequan Cook	24	OKC	57	311
196	DeMarcus Cousins	21	SAC	64	1160
197	Jamal Crawford	31	POR	60	837
198	Jordan Crawford	23	WAS	64	938
199	Dante Cunningham	24	MEM	64	333
200	Eddy Curry	29	MIA	14	30
201	Jeff Adrien	25	HOU	8	21
202	Arron Afflalo	26	DEN	62	943
203	Blake Ahearn	27	UTA	4	10
204	Solomon Alabi	23	TOR	14	33
205	Cole Aldrich	23	OKC	26	57
206	LaMarcus Aldridge	26	POR	55	1191
207	Lavoy Allen	22	PHI	41	169
208	Ray Allen	36	BOS	46	655
209	Tony Allen	30	MEM	58	568
210	Morris Almond	26	WAS	4	14
211	Al-Farouq Aminu	21	NOH	66	399
212	Louis Amundson	29	IND	60	213
213	Chris Andersen	33	DEN	32	168
214	Alan Anderson	29	TOR	17	163
215	James Anderson	22	SAS	51	190
216	Ryan Anderson	23	ORL	61	980
217	Carmelo Anthony	27	NYK	55	1245
218	Joel Anthony	29	MIA	64	219
219	Gilbert Arenas	30	MEM	17	72
220	Trevor Ariza	26	NOH	41	444
221	Omer Asik	25	CHI	66	205
222	D.J. Augustin	24	CHA	48	532
223	Gustavo Ayon	26	NOH	54	319
224	Kelenna Azubuike	28	DAL	3	7
225	Luke Babbitt	22	POR	40	202
226	Renaldo Balkman	27	NYK	14	42
227	Leandro Barbosa	29	TOR	42	512
228	Jose Barea	27	MIN	41	463
229	Andrea Bargnani	26	TOR	31	603
230	Matt Barnes	31	LAL	63	491
231	Earl Barron	30	GSW	2	4
232	Brandon Bass	26	BOS	59	738
233	Tony Battie	35	PHI	27	42
234	Shane Battier	33	MIA	65	311
235	Nicolas Batum	23	POR	59	818
236	Jerryd Bayless	23	TOR	31	353
237	Michael Beasley	23	MIN	47	541
238	Rodrigue Beaubois	23	DAL	53	472
239	Marco Belinelli	25	NOH	66	780
240	Raja Bell	35	UTA	34	217
241	Keith Benson	23	GSW	3	0
242	Mike Bibby	33	NYK	39	103
243	Andris Biedrins	25	GSW	47	79
244	Chauncey Billups	35	LAC	20	299
245	Bismack Biyombo	19	CHA	63	327
246	DeJuan Blair	22	SAS	64	611
247	Steve Blake	31	LAL	53	276
248	Andray Blatche	25	WAS	26	221
249	Eric Bledsoe	22	LAC	40	132
250	Keith Bogans	31	NJN	5	21
251	Andrew Bogut	27	MIL	12	136
252	Matt Bonner	31	SAS	65	429
253	Trevor Booker	24	WAS	50	419
254	Carlos Boozer	30	CHI	66	991
255	Chris Bosh	27	MIA	57	1025
256	Earl Boykins	35	HOU	8	39
257	Craig Brackins	24	PHI	14	22
258	Avery Bradley	21	BOS	64	484
259	Elton Brand	32	PHI	60	659
260	Corey Brewer	25	DEN	59	525
261	Ronnie Brewer	26	CHI	66	455
262	Jon Brockman	24	MIL	35	37
263	MarShon Brooks	23	NJN	56	708
264	Derrick Brown	24	CHA	65	524
265	Kwame Brown	29	GSW	9	57
266	Shannon Brown	26	PHO	59	650
267	Kobe Bryant	33	LAL	58	1616
268	Chase Budinger	23	HOU	58	558
269	Alec Burks	20	UTA	59	425
270	Caron Butler	31	LAC	63	753
271	Jimmy Butler	22	CHI	42	109
272	Rasual Butler	32	TOR	34	110
273	Derrick Byars	27	SAS	2	10
274	Andrew Bynum	24	LAL	60	1123
275	Will Bynum	29	DET	36	204
276	Jose Calderon	30	TOR	53	555
277	Marcus Camby	37	POR	40	152
278	Brian Cardinal	34	DAL	44	43
279	DeMarre Carroll	25	DEN	4	12
280	Matt Carroll	31	CHA	53	142
281	Anthony Carter	36	TOR	24	47
282	Vince Carter	35	DAL	61	615
283	Omri Casspi	23	CLE	65	459
284	Mario Chalmers	25	MIA	64	627
285	Tyson Chandler	29	NYK	62	699
286	Wilson Chandler	24	DEN	8	75
287	Josh Childress	28	PHO	34	100
288	Earl Clark	24	ORL	45	123
289	Norris Cole	23	MIA	65	441
290	Jason Collins	33	ATL	30	39
291	Darren Collison	24	IND	60	621
292	Nick Collison	31	OKC	63	284
293	Mike Conley	24	MEM	62	788
294	Brian Cook	31	LAC	16	31
295	Daequan Cook	24	OKC	57	311
296	DeMarcus Cousins	21	SAC	64	1160
297	Jamal Crawford	31	POR	60	837
298	Jordan Crawford	23	WAS	64	938
299	Dante Cunningham	24	MEM	64	333
300	Eddy Curry	29	MIA	14	30
301	Stephen Curry	23	GSW	26	383
302	Samuel Dalembert	30	HOU	65	490
303	Erick Dampier	36	ATL	15	2
304	Marquis Daniels	31	BOS	38	121
305	Baron Davis	32	NYK	29	178
306	Ed Davis	22	TOR	66	415
307	Glen Davis	26	ORL	61	566
308	Josh Davis	31	MEM	15	28
309	Eric Dawson	27	SAS	4	15
310	Austin Daye	23	DET	41	194
311	Carlos Delfino	29	MIL	54	488
312	Luol Deng	26	CHI	54	828
313	Justin Dentmon	26	SAS	2	4
314	DeMar DeRozan	22	TOR	63	1054
315	Boris Diaw	29	CHA	37	272
316	Ike Diogu	28	SAS	2	2
317	DeSagana Diop	30	CHA	27	31
318	Keyon Dooling	31	BOS	46	182
319	Toney Douglas	25	NYK	38	237
320	Goran Dragic	25	HOU	66	775
321	Jared Dudley	26	PHO	65	823
322	Chris Duhon	29	ORL	63	237
323	Tim Duncan	35	SAS	58	895
324	Mike Dunleavy	31	MIL	55	677
325	Kevin Durant	23	OKC	66	1850
326	Jerome Dyson	24	NOH	9	67
327	Devin Ebanks	22	LAL	24	97
328	Wayne Ellington	24	MIN	51	311
329	Monta Ellis	26	GSW	37	811
330	Francisco Elson	35	PHI	5	2
331	Andre Emmett	29	NJN	6	13
332	Semih Erden	25	CLE	28	99
333	Jeremy Evans	24	UTA	29	62
334	Maurice Evans	33	WAS	24	117
335	Reggie Evans	31	LAC	56	104
336	Tyreke Evans	22	SAC	63	1037
337	Christian Eyenga	22	CLE	6	9
338	Kenneth Faried	22	DEN	46	471
339	Jordan Farmar	25	NJN	39	406
340	Derrick Favors	20	UTA	65	570
341	Raymond Felton	27	POR	60	684
342	Rudy Fernandez	26	DEN	31	268
343	Kyrylo Fesenko	25	IND	3	8
344	Landry Fields	23	NYK	66	580
345	Derek Fisher	37	LAL	43	252
346	Jonny Flynn	22	HOU	11	37
347	Jeff Foote	24	NOH	4	4
348	Gary Forbes	26	TOR	48	319
349	T.J. Ford	28	SAS	14	51
350	Courtney Fortson	23	LAC	4	17
351	Jeff Foster	35	IND	11	25
352	Randy Foye	28	LAC	65	712
353	Jimmer Fredette	22	SAC	61	462
354	Channing Frye	28	PHO	64	674
355	Dan Gadzuric	33	NYK	2	0
356	Sundiata Gaines	25	NJN	57	291
357	Danilo Gallinari	23	DEN	43	628
358	Francisco Garcia	30	SAC	49	234
359	Kevin Garnett	35	BOS	60	947
360	Marc Gasol	27	MEM	65	952
361	Pau Gasol	31	LAL	65	1129
362	Rudy Gay	25	MEM	65	1232
363	Alonzo Gee	24	CLE	63	665
364	Paul George	21	IND	66	798
365	Daniel Gibson	25	CLE	35	263
366	Taj Gibson	26	CHI	63	484
367	Manu Ginobili	34	SAS	34	440
368	Mickell Gladness	25	MIA	8	2
369	Ryan Gomes	29	LAC	32	74
370	Drew Gooden	30	MIL	56	766
371	Ben Gordon	28	DET	52	648
372	Eric Gordon	23	NOH	9	185
373	Marcin Gortat	27	PHO	66	1017
374	Andrew Goudelock	23	LAL	40	175
375	Danny Granger	28	IND	62	1159
376	Aaron Gray	27	TOR	49	191
377	Danny Green	24	SAS	66	603
378	Gerald Green	26	NJN	31	400
379	Willie Green	30	ATL	53	404
380	Donte Greene	23	SAC	53	285
381	Blake Griffin	22	LAC	66	1368
382	Hamed Haddadi	26	MEM	35	70
383	Jordan Hamilton	21	DEN	26	115
384	Richard Hamilton	33	CHI	28	326
385	Tyler Hansbrough	26	IND	66	614
386	Luke Harangody	24	CLE	21	60
387	James Harden	22	OKC	62	1044
388	Justin Harper	22	ORL	14	20
389	Josh Harrellson	22	NYK	37	162
390	Al Harrington	31	DEN	64	910
391	Devin Harris	28	UTA	63	715
392	Manny Harris	22	CLE	26	173
393	Terrel Harris	24	MIA	22	80
394	Tobias Harris	19	MIL	42	208
395	Udonis Haslem	31	MIA	64	385
396	Spencer Hawes	23	PHI	37	355
397	Chuck Hayes	28	SAC	54	172
398	Gordon Hayward	21	UTA	66	782
399	Lazar Hayward	25	OKC	26	37
400	Brendan Haywood	32	DAL	54	281
401	Gerald Henderson	24	CHA	55	830
402	Xavier Henry	20	NOH	45	239
403	Roy Hibbert	25	IND	65	834
404	J.J. Hickson	23	SAC	35	165
405	Cory Higgins	22	CHA	38	150
406	Nene Hilario	29	DEN	28	376
407	George Hill	25	IND	50	481
408	Grant Hill	39	PHO	49	499
409	Jordan Hill	24	HOU	32	161
410	Kirk Hinrich	31	ATL	48	316
411	Darington Hobson	24	MIL	5	4
412	Jrue Holiday	21	PHI	65	879
413	Ryan Hollins	27	CLE	24	89
414	Tyler Honeycutt	21	SAC	15	20
415	Al Horford	25	ATL	11	136
416	Dennis Horner	23	NJN	8	5
417	Dwight Howard	26	ORL	54	1113
418	Josh Howard	31	UTA	43	372
419	Juwan Howard	38	MIA	28	42
420	Lester Hudson	27	CLE	13	165
421	Larry Hughes	33	ORL	9	12
422	Kris Humphries	26	NJN	62	855
423	Serge Ibaka	22	OKC	66	603
424	Andre Iguodala	28	PHI	62	771
425	Ersan Ilyasova	24	MIL	60	782
426	Kyrie Irving	19	CLE	51	944
427	Royal Ivey	30	OKC	34	71
428	Jarrett Jack	28	NOH	45	700
429	Reggie Jackson	21	OKC	45	140
430	Stephen Jackson	33	MIL	26	274
431	Damion James	24	NJN	7	34
432	LeBron James	27	MIA	62	1683
433	Mike James	36	CHI	11	53
434	Antawn Jamison	35	CLE	65	1118
435	Al Jefferson	27	UTA	61	1170
436	Richard Jefferson	31	SAS	41	379
437	Jared Jeffries	30	NYK	39	170
438	Charles Jenkins	22	GSW	51	297
439	Brandon Jennings	22	MIL	66	1260
440	Jonas Jerebko	24	DET	64	556
441	Yi Jianlian	24	DAL	30	79
442	Amir Johnson	24	TOR	64	452
443	Armon Johnson	22	POR	1	2
444	Carldell Johnson	29	NOH	15	27
445	Chris Johnson	26	POR	20	32
446	Ivan Johnson	27	ATL	56	356
447	JaJuan Johnson	22	BOS	36	114
448	James Johnson	24	TOR	62	566
449	Joe Johnson	30	ATL	60	1129
450	Trey Johnson	27	NOH	11	21
451	Wesley Johnson	24	MIN	65	393
452	Dahntay Jones	31	IND	65	346
453	Dominique Jones	23	DAL	33	88
454	James Jones	31	MIA	51	185
455	Solomon Jones	27	LAC	10	6
456	DeAndre Jordan	23	LAC	66	486
457	Jerome Jordan	25	NYK	21	42
458	Cory Joseph	20	SAS	29	58
459	Chris Kaman	29	NOH	47	616
460	Enes Kanter	19	UTA	66	304
461	Jason Kapono	30	LAL	27	54
462	D.J. Kennedy	22	CLE	2	12
463	Jason Kidd	38	DAL	48	299
464	Linas Kleiza	27	TOR	49	473
465	Brandon Knight	20	DET	66	847
466	Kyle Korver	30	CHI	65	529
467	Kosta Koufos	22	DEN	48	263
468	Carl Landry	28	NOH	41	511
469	Ty Lawson	24	DEN	61	999
470	Courtney Lee	26	HOU	58	660
471	David Lee	28	GSW	57	1147
472	Malcolm Lee	21	MIN	19	62
473	Kawhi Leonard	20	SAS	64	507
474	Travis Leslie	21	LAC	10	14
475	Jon Leuer	22	MIL	46	218
476	Rashard Lewis	32	WAS	28	217
477	DeAndre Liggins	23	ORL	17	33
478	Jeremy Lin	23	NYK	35	512
479	Shaun Livingston	26	MIL	58	318
480	Brook Lopez	23	NJN	5	96
481	Robin Lopez	23	PHO	64	348
482	Kevin Love	23	MIN	55	1432
483	Kyle Lowry	25	HOU	47	670
484	John Lucas	29	CHI	49	369
485	Shelvin Mack	22	WAS	64	230
486	Vernon Macklin	25	DET	23	46
487	Corey Maggette	32	CHA	32	480
488	Jamaal Magloire	33	TOR	34	41
489	Ian Mahinmi	25	DAL	61	354
490	Shawn Marion	33	DAL	63	670
491	Cartier Martin	27	WAS	17	158
492	Kenyon Martin	34	LAC	42	217
493	Kevin Martin	28	HOU	40	682
494	Roger Mason	31	WAS	52	286
495	Wesley Matthews	25	POR	66	904
496	Jason Maxiell	28	DET	65	424
497	Eric Maynor	24	OKC	9	38
498	O.J. Mayo	24	MEM	66	833
499	Luc Mbah a Moute	25	MIL	43	333
500	JaVale McGee	24	WAS	41	486
501	Tracy McGrady	32	ATL	52	273
502	Dominic McGuire	26	GSW	64	227
503	Josh McRoberts	24	LAL	50	138
504	Jodie Meeks	24	PHI	66	556
505	C.J. Miles	24	UTA	56	508
506	Darko Milicic	26	MIN	29	134
507	Andre Miller	35	DEN	66	639
508	Brad Miller	35	MIN	15	35
509	Mike Miller	31	MIA	39	237
510	Patrick Mills	23	SAS	16	165
511	Paul Millsap	26	UTA	64	1061
512	Nazr Mohammed	34	OKC	63	171
513	Greg Monroe	21	DET	66	1015
514	Jamario Moon	31	CHA	8	18
515	Jeff Adrien	25	HOU	8	21
516	Arron Afflalo	26	DEN	62	943
517	Blake Ahearn	27	UTA	4	10
518	Solomon Alabi	23	TOR	14	33
519	Cole Aldrich	23	OKC	26	57
520	LaMarcus Aldridge	26	POR	55	1191
521	Lavoy Allen	22	PHI	41	169
522	Ray Allen	36	BOS	46	655
523	Tony Allen	30	MEM	58	568
524	Morris Almond	26	WAS	4	14
525	Al-Farouq Aminu	21	NOH	66	399
526	Louis Amundson	29	IND	60	213
527	Chris Andersen	33	DEN	32	168
528	Alan Anderson	29	TOR	17	163
529	James Anderson	22	SAS	51	190
530	Ryan Anderson	23	ORL	61	980
531	Carmelo Anthony	27	NYK	55	1245
532	Joel Anthony	29	MIA	64	219
533	Gilbert Arenas	30	MEM	17	72
534	Trevor Ariza	26	NOH	41	444
535	Omer Asik	25	CHI	66	205
536	D.J. Augustin	24	CHA	48	532
537	Gustavo Ayon	26	NOH	54	319
538	Kelenna Azubuike	28	DAL	3	7
539	Luke Babbitt	22	POR	40	202
540	Renaldo Balkman	27	NYK	14	42
541	Leandro Barbosa	29	TOR	42	512
542	Jose Barea	27	MIN	41	463
543	Andrea Bargnani	26	TOR	31	603
544	Matt Barnes	31	LAL	63	491
545	Earl Barron	30	GSW	2	4
546	Brandon Bass	26	BOS	59	738
547	Tony Battie	35	PHI	27	42
548	Shane Battier	33	MIA	65	311
549	Nicolas Batum	23	POR	59	818
550	Jerryd Bayless	23	TOR	31	353
551	Michael Beasley	23	MIN	47	541
552	Rodrigue Beaubois	23	DAL	53	472
553	Marco Belinelli	25	NOH	66	780
554	Raja Bell	35	UTA	34	217
555	Keith Benson	23	GSW	3	0
556	Mike Bibby	33	NYK	39	103
557	Andris Biedrins	25	GSW	47	79
558	Chauncey Billups	35	LAC	20	299
559	Bismack Biyombo	19	CHA	63	327
560	DeJuan Blair	22	SAS	64	611
561	Steve Blake	31	LAL	53	276
562	Andray Blatche	25	WAS	26	221
563	Eric Bledsoe	22	LAC	40	132
564	Keith Bogans	31	NJN	5	21
565	Andrew Bogut	27	MIL	12	136
566	Matt Bonner	31	SAS	65	429
567	Trevor Booker	24	WAS	50	419
568	Carlos Boozer	30	CHI	66	991
569	Chris Bosh	27	MIA	57	1025
570	Earl Boykins	35	HOU	8	39
571	Craig Brackins	24	PHI	14	22
572	Avery Bradley	21	BOS	64	484
573	Elton Brand	32	PHI	60	659
574	Corey Brewer	25	DEN	59	525
575	Ronnie Brewer	26	CHI	66	455
576	Jon Brockman	24	MIL	35	37
577	MarShon Brooks	23	NJN	56	708
578	Derrick Brown	24	CHA	65	524
579	Kwame Brown	29	GSW	9	57
580	Shannon Brown	26	PHO	59	650
581	Kobe Bryant	33	LAL	58	1616
582	Chase Budinger	23	HOU	58	558
583	Alec Burks	20	UTA	59	425
584	Caron Butler	31	LAC	63	753
585	Jimmy Butler	22	CHI	42	109
586	Rasual Butler	32	TOR	34	110
587	Derrick Byars	27	SAS	2	10
588	Andrew Bynum	24	LAL	60	1123
589	Will Bynum	29	DET	36	204
590	Jose Calderon	30	TOR	53	555
591	Marcus Camby	37	POR	40	152
592	Brian Cardinal	34	DAL	44	43
593	DeMarre Carroll	25	DEN	4	12
594	Matt Carroll	31	CHA	53	142
595	Anthony Carter	36	TOR	24	47
596	Vince Carter	35	DAL	61	615
597	Omri Casspi	23	CLE	65	459
598	Mario Chalmers	25	MIA	64	627
599	Tyson Chandler	29	NYK	62	699
600	Wilson Chandler	24	DEN	8	75
601	Josh Childress	28	PHO	34	100
602	Earl Clark	24	ORL	45	123
603	Norris Cole	23	MIA	65	441
604	Jason Collins	33	ATL	30	39
605	Darren Collison	24	IND	60	621
606	Nick Collison	31	OKC	63	284
607	Mike Conley	24	MEM	62	788
608	Brian Cook	31	LAC	16	31
609	Daequan Cook	24	OKC	57	311
610	DeMarcus Cousins	21	SAC	64	1160
611	Jamal Crawford	31	POR	60	837
612	Jordan Crawford	23	WAS	64	938
613	Dante Cunningham	24	MEM	64	333
614	Eddy Curry	29	MIA	14	30
615	Stephen Curry	23	GSW	26	383
616	Samuel Dalembert	30	HOU	65	490
617	Erick Dampier	36	ATL	15	2
618	Marquis Daniels	31	BOS	38	121
619	Baron Davis	32	NYK	29	178
620	Ed Davis	22	TOR	66	415
621	Glen Davis	26	ORL	61	566
622	Josh Davis	31	MEM	15	28
623	Eric Dawson	27	SAS	4	15
624	Austin Daye	23	DET	41	194
625	Carlos Delfino	29	MIL	54	488
626	Luol Deng	26	CHI	54	828
627	Justin Dentmon	26	SAS	2	4
628	DeMar DeRozan	22	TOR	63	1054
629	Boris Diaw	29	CHA	37	272
630	Ike Diogu	28	SAS	2	2
631	DeSagana Diop	30	CHA	27	31
632	Keyon Dooling	31	BOS	46	182
633	Toney Douglas	25	NYK	38	237
634	Goran Dragic	25	HOU	66	775
635	Jared Dudley	26	PHO	65	823
636	Chris Duhon	29	ORL	63	237
637	Tim Duncan	35	SAS	58	895
638	Mike Dunleavy	31	MIL	55	677
639	Kevin Durant	23	OKC	66	1850
640	Jerome Dyson	24	NOH	9	67
641	Devin Ebanks	22	LAL	24	97
642	Wayne Ellington	24	MIN	51	311
643	Monta Ellis	26	GSW	37	811
644	Francisco Elson	35	PHI	5	2
645	Andre Emmett	29	NJN	6	13
646	Semih Erden	25	CLE	28	99
647	Jeremy Evans	24	UTA	29	62
648	Maurice Evans	33	WAS	24	117
649	Reggie Evans	31	LAC	56	104
650	Tyreke Evans	22	SAC	63	1037
651	Christian Eyenga	22	CLE	6	9
652	Kenneth Faried	22	DEN	46	471
653	Jordan Farmar	25	NJN	39	406
654	Derrick Favors	20	UTA	65	570
655	Raymond Felton	27	POR	60	684
656	Rudy Fernandez	26	DEN	31	268
657	Kyrylo Fesenko	25	IND	3	8
658	Landry Fields	23	NYK	66	580
659	Derek Fisher	37	LAL	43	252
660	Jonny Flynn	22	HOU	11	37
661	Jeff Foote	24	NOH	4	4
662	Gary Forbes	26	TOR	48	319
663	T.J. Ford	28	SAS	14	51
664	Courtney Fortson	23	LAC	4	17
665	Jeff Foster	35	IND	11	25
666	Randy Foye	28	LAC	65	712
667	Jimmer Fredette	22	SAC	61	462
668	Channing Frye	28	PHO	64	674
669	Dan Gadzuric	33	NYK	2	0
670	Sundiata Gaines	25	NJN	57	291
671	Danilo Gallinari	23	DEN	43	628
672	Francisco Garcia	30	SAC	49	234
673	Kevin Garnett	35	BOS	60	947
674	Marc Gasol	27	MEM	65	952
675	Pau Gasol	31	LAL	65	1129
676	Rudy Gay	25	MEM	65	1232
677	Alonzo Gee	24	CLE	63	665
678	Paul George	21	IND	66	798
679	Daniel Gibson	25	CLE	35	263
680	Taj Gibson	26	CHI	63	484
681	Manu Ginobili	34	SAS	34	440
682	Mickell Gladness	25	MIA	8	2
683	Ryan Gomes	29	LAC	32	74
684	Drew Gooden	30	MIL	56	766
685	Ben Gordon	28	DET	52	648
686	Eric Gordon	23	NOH	9	185
687	Marcin Gortat	27	PHO	66	1017
688	Andrew Goudelock	23	LAL	40	175
689	Danny Granger	28	IND	62	1159
690	Aaron Gray	27	TOR	49	191
691	Danny Green	24	SAS	66	603
692	Gerald Green	26	NJN	31	400
693	Willie Green	30	ATL	53	404
694	Donte Greene	23	SAC	53	285
695	Blake Griffin	22	LAC	66	1368
696	Hamed Haddadi	26	MEM	35	70
697	Jordan Hamilton	21	DEN	26	115
698	Richard Hamilton	33	CHI	28	326
699	Tyler Hansbrough	26	IND	66	614
700	Luke Harangody	24	CLE	21	60
701	James Harden	22	OKC	62	1044
702	Justin Harper	22	ORL	14	20
703	Josh Harrellson	22	NYK	37	162
704	Al Harrington	31	DEN	64	910
705	Devin Harris	28	UTA	63	715
706	Manny Harris	22	CLE	26	173
707	Terrel Harris	24	MIA	22	80
708	Tobias Harris	19	MIL	42	208
709	Udonis Haslem	31	MIA	64	385
710	Spencer Hawes	23	PHI	37	355
711	Chuck Hayes	28	SAC	54	172
712	Gordon Hayward	21	UTA	66	782
713	Lazar Hayward	25	OKC	26	37
714	Brendan Haywood	32	DAL	54	281
715	Gerald Henderson	24	CHA	55	830
716	Xavier Henry	20	NOH	45	239
717	Roy Hibbert	25	IND	65	834
718	J.J. Hickson	23	SAC	35	165
719	Cory Higgins	22	CHA	38	150
720	Nene Hilario	29	DEN	28	376
721	George Hill	25	IND	50	481
722	Grant Hill	39	PHO	49	499
723	Jordan Hill	24	HOU	32	161
724	Kirk Hinrich	31	ATL	48	316
725	Darington Hobson	24	MIL	5	4
726	Jrue Holiday	21	PHI	65	879
727	Ryan Hollins	27	CLE	24	89
728	Tyler Honeycutt	21	SAC	15	20
729	Al Horford	25	ATL	11	136
730	Dennis Horner	23	NJN	8	5
731	Dwight Howard	26	ORL	54	1113
732	Josh Howard	31	UTA	43	372
733	Juwan Howard	38	MIA	28	42
734	Lester Hudson	27	CLE	13	165
735	Larry Hughes	33	ORL	9	12
736	Kris Humphries	26	NJN	62	855
737	Serge Ibaka	22	OKC	66	603
738	Andre Iguodala	28	PHI	62	771
739	Ersan Ilyasova	24	MIL	60	782
740	Kyrie Irving	19	CLE	51	944
741	Royal Ivey	30	OKC	34	71
742	Jarrett Jack	28	NOH	45	700
743	Reggie Jackson	21	OKC	45	140
744	Stephen Jackson	33	MIL	26	274
745	Damion James	24	NJN	7	34
746	LeBron James	27	MIA	62	1683
747	Mike James	36	CHI	11	53
748	Antawn Jamison	35	CLE	65	1118
749	Al Jefferson	27	UTA	61	1170
750	Richard Jefferson	31	SAS	41	379
751	Jared Jeffries	30	NYK	39	170
752	Charles Jenkins	22	GSW	51	297
753	Brandon Jennings	22	MIL	66	1260
754	Jonas Jerebko	24	DET	64	556
755	Yi Jianlian	24	DAL	30	79
756	Amir Johnson	24	TOR	64	452
757	Armon Johnson	22	POR	1	2
758	Carldell Johnson	29	NOH	15	27
759	Chris Johnson	26	POR	20	32
760	Ivan Johnson	27	ATL	56	356
761	JaJuan Johnson	22	BOS	36	114
762	James Johnson	24	TOR	62	566
763	Joe Johnson	30	ATL	60	1129
764	Trey Johnson	27	NOH	11	21
765	Wesley Johnson	24	MIN	65	393
766	Dahntay Jones	31	IND	65	346
767	Dominique Jones	23	DAL	33	88
768	James Jones	31	MIA	51	185
769	Solomon Jones	27	LAC	10	6
770	DeAndre Jordan	23	LAC	66	486
771	Jerome Jordan	25	NYK	21	42
772	Cory Joseph	20	SAS	29	58
773	Chris Kaman	29	NOH	47	616
774	Enes Kanter	19	UTA	66	304
775	Jason Kapono	30	LAL	27	54
776	D.J. Kennedy	22	CLE	2	12
777	Jason Kidd	38	DAL	48	299
778	Linas Kleiza	27	TOR	49	473
779	Brandon Knight	20	DET	66	847
780	Kyle Korver	30	CHI	65	529
781	Kosta Koufos	22	DEN	48	263
782	Carl Landry	28	NOH	41	511
783	Ty Lawson	24	DEN	61	999
784	Courtney Lee	26	HOU	58	660
785	David Lee	28	GSW	57	1147
786	Malcolm Lee	21	MIN	19	62
787	Kawhi Leonard	20	SAS	64	507
788	Travis Leslie	21	LAC	10	14
789	Jon Leuer	22	MIL	46	218
790	Rashard Lewis	32	WAS	28	217
791	DeAndre Liggins	23	ORL	17	33
792	Jeremy Lin	23	NYK	35	512
793	Shaun Livingston	26	MIL	58	318
794	Brook Lopez	23	NJN	5	96
795	Robin Lopez	23	PHO	64	348
796	Kevin Love	23	MIN	55	1432
797	Kyle Lowry	25	HOU	47	670
798	John Lucas	29	CHI	49	369
799	Shelvin Mack	22	WAS	64	230
800	Vernon Macklin	25	DET	23	46
801	Corey Maggette	32	CHA	32	480
802	Jamaal Magloire	33	TOR	34	41
803	Ian Mahinmi	25	DAL	61	354
804	Shawn Marion	33	DAL	63	670
805	Cartier Martin	27	WAS	17	158
806	Kenyon Martin	34	LAC	42	217
807	Kevin Martin	28	HOU	40	682
808	Roger Mason	31	WAS	52	286
809	Wesley Matthews	25	POR	66	904
810	Jason Maxiell	28	DET	65	424
811	Eric Maynor	24	OKC	9	38
812	O.J. Mayo	24	MEM	66	833
813	Luc Mbah a Moute	25	MIL	43	333
814	JaVale McGee	24	WAS	41	486
815	Tracy McGrady	32	ATL	52	273
816	Dominic McGuire	26	GSW	64	227
817	Josh McRoberts	24	LAL	50	138
818	Jodie Meeks	24	PHI	66	556
819	C.J. Miles	24	UTA	56	508
820	Darko Milicic	26	MIN	29	134
821	Andre Miller	35	DEN	66	639
822	Brad Miller	35	MIN	15	35
823	Mike Miller	31	MIA	39	237
824	Patrick Mills	23	SAS	16	165
825	Paul Millsap	26	UTA	64	1061
826	Nazr Mohammed	34	OKC	63	171
827	Greg Monroe	21	DET	66	1015
828	Jamario Moon	31	CHA	8	18
829	ETwaun Moore	22	BOS	38	110
830	Mikki Moore	36	GSW	7	24
831	Darius Morris	21	LAL	19	46
832	Marcus Morris	22	HOU	17	40
833	Markieff Morris	22	PHO	63	467
834	Anthony Morrow	26	NJN	62	747
835	Timofey Mozgov	25	DEN	44	239
836	Byron Mullens	22	CHA	65	606
837	Troy Murphy	31	LAL	59	188
838	Hamady NDiaye	25	WAS	3	0
839	Eduardo Najera	35	CHA	22	58
840	Steve Nash	37	PHO	62	772
841	Gary Neal	27	SAS	56	557
842	Jameer Nelson	29	ORL	57	676
843	Joakim Noah	26	CHI	64	652
844	Andres Nocioni	32	PHI	11	17
845	Steve Novak	28	NYK	54	477
846	Dirk Nowitzki	33	DAL	62	1342
847	Jermaine ONeal	33	BOS	25	125
848	Lamar Odom	32	DAL	50	332
849	Emeka Okafor	29	NOH	27	266
850	Mehmet Okur	32	NJN	17	130
851	Daniel Orton	21	ORL	16	45
852	Travis Outlaw	27	SAC	39	167
853	Larry Owens	29	NJN	7	13
854	Zaza Pachulia	27	ATL	58	455
855	Jannero Pargo	32	ATL	50	282
856	Jeremy Pargo	25	MEM	44	126
857	Anthony Parker	36	CLE	51	367
858	Tony Parker	29	SAS	60	1095
859	Chandler Parsons	23	HOU	63	599
860	Patrick Patterson	22	HOU	64	490
861	Chris Paul	26	LAC	60	1189
862	Sasha Pavlovic	28	BOS	45	120
863	Nikola Pekovic	26	MIN	47	651
864	Jeff Pendergraph	24	IND	20	34
865	Kendrick Perkins	27	OKC	65	329
866	Johan Petro	26	NJN	59	250
867	Paul Pierce	34	BOS	61	1181
868	Mickael Pietrus	29	BOS	42	289
869	Dexter Pittman	23	MIA	35	106
870	Quincy Pondexter	23	MEM	64	271
871	A.J. Price	25	IND	44	172
872	Ronnie Price	28	PHO	36	131
873	Tayshaun Prince	31	DET	63	798
874	Joel Przybilla	32	POR	27	55
875	Vladimir Radmanovic	31	ATL	49	220
876	Anthony Randolph	22	MIN	34	252
877	Zach Randolph	30	MEM	28	324
878	Michael Redd	32	PHO	51	418
879	J.J. Redick	27	ORL	65	751
880	Ryan Reid	25	OKC	5	8
881	Jason Richardson	31	ORL	54	629
882	Quentin Richardson	31	ORL	48	215
883	Luke Ridnour	30	MIN	53	639
884	Nate Robinson	27	GSW	51	570
885	Rajon Rondo	25	BOS	53	630
886	Derrick Rose	23	CHI	39	852
887	Ricky Rubio	21	MIN	41	436
888	Brandon Rush	26	GSW	65	634
889	Walker Russell	29	DET	28	84
890	John Salmons	32	SAC	46	344
891	Samardo Samuels	23	CLE	54	292
892	Larry Sanders	23	MIL	52	186
893	Brian Scalabrine	33	CHI	28	32
894	Luis Scola	31	HOU	66	1025
895	Thabo Sefolosha	27	OKC	42	203
896	Josh Selby	20	MEM	28	63
897	Kevin Seraphin	22	WAS	57	453
898	Ramon Sessions	25	CLE	41	430
899	Iman Shumpert	21	NYK	59	563
900	Xavier Silas	24	PHI	2	11
901	Bobby Simmons	31	LAC	28	80
902	Chris Singleton	22	WAS	66	306
903	James Singleton	30	WAS	12	98
904	Brian Skinner	35	MEM	1	0
905	Donald Sloan	24	CLE	25	165
906	Craig Smith	28	POR	47	156
907	Greg Smith	21	HOU	8	14
908	Ishmael Smith	23	GSW	6	27
909	J.R. Smith	26	NYK	35	436
910	Jason Smith	25	NOH	40	396
911	Jerry Smith	24	NJN	5	7
912	Josh Smith	26	ATL	66	1239
913	Nolan Smith	23	POR	44	167
914	Marreese Speights	24	MEM	60	526
915	Tiago Splitter	27	SAS	59	549
916	Jerry Stackhouse	37	ATL	30	108
917	Lance Stephenson	21	IND	42	106
918	DeShawn Stevenson	30	NJN	51	148
919	Greg Stiemsma	26	BOS	55	161
920	Julyan Stone	23	DEN	22	36
921	Amare Stoudemire	29	NYK	47	823
922	Rodney Stuckey	25	DET	55	812
923	DaJuan Summers	24	NOH	15	68
924	Jeff Teague	23	ATL	66	831
925	Sebastian Telfair	26	PHO	60	368
926	Jason Terry	34	DAL	63	950
927	Hasheem Thabeet	24	HOU	5	6
928	Isaiah Thomas	22	SAC	65	749
929	Kurt Thomas	39	POR	53	160
930	Lance Thomas	23	NOH	42	166
931	Malcolm Thomas	23	SAS	3	1
932	Tyrus Thomas	25	CHA	54	304
933	Trey Thompkins	21	LAC	24	57
934	Jason Thompson	25	SAC	64	583
935	Klay Thompson	21	GSW	66	826
936	Mychel Thompson	23	CLE	5	18
937	Tristan Thompson	20	CLE	60	494
938	Marcus Thornton	24	SAC	51	952
939	Jamaal Tinsley	33	UTA	37	137
940	Anthony Tolliver	26	MIN	51	208
941	Ronny Turiaf	29	WAS	4	6
942	Hedo Turkoglu	32	ORL	53	576
943	Evan Turner	23	PHI	65	610
944	Jeremy Tyler	20	GSW	42	205
945	Edwin Ubiles	25	WAS	4	14
946	Ekpe Udoh	24	GSW	38	210
947	Beno Udrih	29	MIL	59	348
948	Ben Uzoh	23	CLE	2	4
949	Anderson Varejao	29	CLE	25	271
950	Greivis Vasquez	25	NOH	66	589
951	Jan Vesely	21	WAS	57	267
952	Charlie Villanueva	27	DET	13	91
953	Nikola Vucevic	21	PHI	51	283
954	Dwyane Wade	30	MIA	49	1082
955	Von Wafer	26	ORL	33	194
956	Bill Walker	24	NYK	32	189
957	Kemba Walker	21	CHA	66	799
958	John Wall	21	WAS	66	1076
959	Ben Wallace	37	DET	62	85
960	Gerald Wallace	29	POR	42	557
961	Luke Walton	31	LAL	9	12
962	Hakim Warrick	29	PHO	35	225
963	Darryl Watkins	27	NOH	5	23
964	C.J. Watson	27	CHI	49	474
965	Earl Watson	32	UTA	50	149
966	Martell Webster	25	MIN	47	324
967	David West	31	IND	66	842
968	Delonte West	28	DAL	44	421
969	Russell Westbrook	23	OKC	66	1558
970	D.J. White	25	CHA	58	392
971	Hassan Whiteside	22	SAC	18	29
972	Chris Wilcox	29	BOS	28	152
973	Damien Wilkins	32	DET	60	193
974	Deron Williams	27	NJN	55	1154
975	Derrick Williams	20	MIN	66	583
976	Elliot Williams	22	POR	24	88
977	Jordan Williams	21	NJN	43	197
978	Louis Williams	25	PHI	64	956
979	Marvin Williams	25	ATL	57	579
980	Mo Williams	29	LAC	52	685
981	Reggie Williams	25	CHA	33	274
982	Sean Williams	25	DAL	8	29
983	Shawne Williams	25	NJN	25	113
984	Shelden Williams	28	NJN	58	268
985	Terrence Williams	24	HOU	12	54
986	Metta World Peace	32	LAL	64	493
987	Brandan Wright	24	DAL	49	340
988	Chris Wright	23	GSW	24	70
989	Dorell Wright	26	GSW	61	629
990	Nick Young	26	WAS	40	665
991	Sam Young	26	MEM	21	74
992	Thaddeus Young	23	PHI	63	808
\.


--
-- Name: players_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('players_id_seq', 992, true);


--
-- Data for Name: trips; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY trips (id, name, num_trips) FROM stdin;
\.


--
-- Name: trips_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('trips_id_seq', 1, false);


--
-- Data for Name: venues; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY venues (id, address, latitude, longitude) FROM stdin;
1	5961 Chula Vista Way, los angeles, ca 90068	\N	\N
\.


--
-- Name: venues_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('venues_id_seq', 1, true);


--
-- Name: clown_cars_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY clown_cars
    ADD CONSTRAINT clown_cars_pkey PRIMARY KEY (id);


--
-- Name: clowns_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY clowns
    ADD CONSTRAINT clowns_pkey PRIMARY KEY (id);


--
-- Name: entries_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY entries
    ADD CONSTRAINT entries_pkey PRIMARY KEY (id);


--
-- Name: morning_kittens_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY morning_kittens
    ADD CONSTRAINT morning_kittens_pkey PRIMARY KEY (id);


--
-- Name: morning_users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY morning_users
    ADD CONSTRAINT morning_users_pkey PRIMARY KEY (id);


--
-- Name: musicals_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY musicals
    ADD CONSTRAINT musicals_pkey PRIMARY KEY (id);


--
-- Name: people_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY people
    ADD CONSTRAINT people_pkey PRIMARY KEY (id);


--
-- Name: players_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY players
    ADD CONSTRAINT players_pkey PRIMARY KEY (id);


--
-- Name: trips_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY trips
    ADD CONSTRAINT trips_pkey PRIMARY KEY (id);


--
-- Name: venues_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY venues
    ADD CONSTRAINT venues_pkey PRIMARY KEY (id);


--
-- Name: clowns_clown_car_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY clowns
    ADD CONSTRAINT clowns_clown_car_id_fkey FOREIGN KEY (clown_car_id) REFERENCES clown_cars(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect template1

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: template1; Type: COMMENT; Schema: -; Owner: Paris
--

COMMENT ON DATABASE template1 IS 'default template for new databases';


--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect todolly_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: todos; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE todos (
    id integer NOT NULL,
    task character varying(255) NOT NULL,
    completed boolean DEFAULT false
);


ALTER TABLE public.todos OWNER TO "Paris";

--
-- Name: todos_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE todos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.todos_id_seq OWNER TO "Paris";

--
-- Name: todos_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE todos_id_seq OWNED BY todos.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY todos ALTER COLUMN id SET DEFAULT nextval('todos_id_seq'::regclass);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131107191628
\.


--
-- Data for Name: todos; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY todos (id, task, completed) FROM stdin;
1	Wash the car	f
2	Check the mail	f
3	Eat pies	t
\.


--
-- Name: todos_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('todos_id_seq', 3, true);


--
-- Name: todos_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY todos
    ADD CONSTRAINT todos_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect tunr_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: artists; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE artists (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    string character varying(255) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.artists OWNER TO "Paris";

--
-- Name: artists_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE artists_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.artists_id_seq OWNER TO "Paris";

--
-- Name: artists_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE artists_id_seq OWNED BY artists.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: songs; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE songs (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    spotify_url character varying(255) NOT NULL,
    artist_id integer NOT NULL,
    price numeric DEFAULT 0.99 NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.songs OWNER TO "Paris";

--
-- Name: songs_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE songs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.songs_id_seq OWNER TO "Paris";

--
-- Name: songs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE songs_id_seq OWNED BY songs.id;


--
-- Name: songs_users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE songs_users (
    id integer NOT NULL,
    user_id integer NOT NULL,
    song_id integer NOT NULL
);


ALTER TABLE public.songs_users OWNER TO "Paris";

--
-- Name: songs_users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE songs_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.songs_users_id_seq OWNER TO "Paris";

--
-- Name: songs_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE songs_users_id_seq OWNED BY songs_users.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    email character varying(255) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    password_digest character varying(255) NOT NULL,
    balance numeric DEFAULT 0 NOT NULL
);


ALTER TABLE public.users OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY artists ALTER COLUMN id SET DEFAULT nextval('artists_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY songs ALTER COLUMN id SET DEFAULT nextval('songs_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY songs_users ALTER COLUMN id SET DEFAULT nextval('songs_users_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: artists; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY artists (id, name, string, created_at, updated_at) FROM stdin;
6	Ke$ha	whatever	2013-10-18 15:43:57.017311	2013-10-18 15:43:57.017311
\.


--
-- Name: artists_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('artists_id_seq', 6, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131017144115
20131017144614
20131017145638
20131017152437
20131017152850
20131017175335
20131018140449
20131021153245
20131021154935
\.


--
-- Data for Name: songs; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY songs (id, name, spotify_url, artist_id, price, created_at, updated_at) FROM stdin;
3	Warrior	spotify:track:0EX9OHeYY10o6QWPa1nuAQ	6	0.99	2013-10-18 15:43:57.056133	2013-10-18 15:43:57.056133
\.


--
-- Name: songs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('songs_id_seq', 3, true);


--
-- Data for Name: songs_users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY songs_users (id, user_id, song_id) FROM stdin;
1	11	3
2	11	3
\.


--
-- Name: songs_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('songs_users_id_seq', 2, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY users (id, email, created_at, updated_at, password_digest, balance) FROM stdin;
12	shmee2@gmail.com	2013-10-18 15:46:32.462488	2013-10-18 15:46:32.462488	$2a$10$kLzQrxqz62YftCXC1ylK7e3bikt7SmxhwU3xRt795PhsXWxKs0Xom	0
13	another@gmail.com	2013-10-18 16:11:54.013892	2013-10-18 16:11:54.013892	$2a$10$sx0IwaJsXcJGkZAuxpsGTO5jOw/.ILrK.mjAD4wzDcsXFlZBNBCuu	0
14	newnew@gmail.com	2013-10-18 16:18:46.675522	2013-10-18 16:18:46.675522	$2a$10$bUdxbxTrogT0DsXfLMIJuObb09ZepRIGPOcosQ0i0SiTjmDQEJAuq	0
11	shmee@gmail.com	2013-10-18 15:45:06.12603	2013-10-21 15:00:38.559718	$2a$10$uCDxIvh4AdrfTxNH2eYo2uBOiITt5oqWr35al0Md/nxDoTzhGoXk2	0
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('users_id_seq', 14, true);


--
-- Name: artists_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY artists
    ADD CONSTRAINT artists_pkey PRIMARY KEY (id);


--
-- Name: songs_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY songs
    ADD CONSTRAINT songs_pkey PRIMARY KEY (id);


--
-- Name: songs_users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY songs_users
    ADD CONSTRAINT songs_users_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: index_songs_on_artist_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_songs_on_artist_id ON songs USING btree (artist_id);


--
-- Name: index_users_on_email; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_email ON users USING btree (email);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: fk_songs; Type: FK CONSTRAINT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY songs_users
    ADD CONSTRAINT fk_songs FOREIGN KEY (song_id) REFERENCES songs(id);


--
-- Name: fk_songs_artists; Type: FK CONSTRAINT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY songs
    ADD CONSTRAINT fk_songs_artists FOREIGN KEY (artist_id) REFERENCES artists(id);


--
-- Name: fk_users; Type: FK CONSTRAINT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY songs_users
    ADD CONSTRAINT fk_users FOREIGN KEY (user_id) REFERENCES users(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect turkey_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: installs; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE installs (
    id integer NOT NULL,
    email character varying(255) DEFAULT ''::character varying NOT NULL,
    encrypted_password character varying(255) DEFAULT ''::character varying NOT NULL,
    reset_password_token character varying(255),
    reset_password_sent_at timestamp without time zone,
    remember_created_at timestamp without time zone,
    sign_in_count integer DEFAULT 0 NOT NULL,
    current_sign_in_at timestamp without time zone,
    last_sign_in_at timestamp without time zone,
    current_sign_in_ip character varying(255),
    last_sign_in_ip character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.installs OWNER TO "Paris";

--
-- Name: installs_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE installs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.installs_id_seq OWNER TO "Paris";

--
-- Name: installs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE installs_id_seq OWNED BY installs.id;


--
-- Name: messages; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE messages (
    id integer NOT NULL,
    sender_id character varying(255) NOT NULL,
    recipient_id character varying(255),
    sender_deleted boolean,
    recipient_deleted boolean,
    subject character varying(255) NOT NULL,
    body text,
    read_at timestamp without time zone,
    container character varying(255) DEFAULT 'draft'::character varying,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.messages OWNER TO "Paris";

--
-- Name: messages_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.messages_id_seq OWNER TO "Paris";

--
-- Name: messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE messages_id_seq OWNED BY messages.id;


--
-- Name: rates; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rates (
    id integer NOT NULL,
    rater_id integer,
    rateable_id integer,
    rateable_type character varying(255),
    stars double precision NOT NULL,
    dimension character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.rates OWNER TO "Paris";

--
-- Name: rates_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rates_id_seq OWNER TO "Paris";

--
-- Name: rates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rates_id_seq OWNED BY rates.id;


--
-- Name: rating_caches; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE rating_caches (
    id integer NOT NULL,
    cacheable_id integer,
    cacheable_type character varying(255),
    avg double precision NOT NULL,
    qty integer NOT NULL,
    dimension character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.rating_caches OWNER TO "Paris";

--
-- Name: rating_caches_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE rating_caches_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.rating_caches_id_seq OWNER TO "Paris";

--
-- Name: rating_caches_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE rating_caches_id_seq OWNED BY rating_caches.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: table_menus; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE table_menus (
    id integer NOT NULL,
    dish character varying(255) NOT NULL,
    type character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.table_menus OWNER TO "Paris";

--
-- Name: table_menus_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE table_menus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.table_menus_id_seq OWNER TO "Paris";

--
-- Name: table_menus_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE table_menus_id_seq OWNED BY table_menus.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    email character varying(255) DEFAULT ''::character varying NOT NULL,
    encrypted_password character varying(255) DEFAULT ''::character varying NOT NULL,
    reset_password_token character varying(255),
    reset_password_sent_at timestamp without time zone,
    remember_created_at timestamp without time zone,
    sign_in_count integer DEFAULT 0 NOT NULL,
    current_sign_in_at timestamp without time zone,
    last_sign_in_at timestamp without time zone,
    current_sign_in_ip character varying(255),
    last_sign_in_ip character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    name character varying(255),
    lastname character varying(255)
);


ALTER TABLE public.users OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO "Paris";

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY installs ALTER COLUMN id SET DEFAULT nextval('installs_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY messages ALTER COLUMN id SET DEFAULT nextval('messages_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rates ALTER COLUMN id SET DEFAULT nextval('rates_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY rating_caches ALTER COLUMN id SET DEFAULT nextval('rating_caches_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY table_menus ALTER COLUMN id SET DEFAULT nextval('table_menus_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: installs; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY installs (id, email, encrypted_password, reset_password_token, reset_password_sent_at, remember_created_at, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, created_at, updated_at) FROM stdin;
\.


--
-- Name: installs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('installs_id_seq', 1, false);


--
-- Data for Name: messages; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY messages (id, sender_id, recipient_id, sender_deleted, recipient_deleted, subject, body, read_at, container, created_at, updated_at) FROM stdin;
1	1	me	\N	\N	hi	hi	\N	draft	2013-11-23 17:28:52.433941	2013-11-23 17:28:52.433941
2	1	sally	\N	\N	hi	hi	\N	draft	2013-11-23 17:30:40.916293	2013-11-23 17:30:40.916293
4	1	mike	\N	\N	hi	hi	\N	draft	2013-11-23 21:43:51.882547	2013-11-23 21:43:51.882547
5	1	paris hyun	\N	\N	this	this	\N	draft	2013-11-23 22:13:50.881659	2013-11-23 22:13:50.881659
6	1	1	\N	\N	hello	hello	\N	draft	2013-11-23 22:14:46.740708	2013-11-23 22:14:46.740708
7	3	1	\N	\N	hi	hi	\N	draft	2013-11-24 01:43:04.160102	2013-11-24 01:43:04.160102
8	3	2	\N	\N	wow	wow	\N	draft	2013-11-24 01:49:00.366867	2013-11-24 01:49:00.366867
3	1	\N	\N	\N	hi	hi	\N	draft	2013-11-23 17:32:14.97767	2013-11-24 03:25:15.041889
9	2	\N	\N	\N	morning	morning	\N	draft	2013-11-24 13:54:21.985107	2013-11-24 13:54:22.069709
10	4	\N	\N	\N	new subject	new body	\N	draft	2013-11-24 15:04:17.041819	2013-11-24 15:04:17.041819
11	2	\N	\N	\N	hi shmee	hey	\N	draft	2013-11-24 15:28:51.906808	2013-11-24 15:28:51.906808
12	2	\N	\N	\N	message	this message	\N	draft	2013-11-24 15:29:57.287742	2013-11-24 15:29:57.287742
13	2	\N	\N	\N	hi shmee	save this	\N	draft	2013-11-24 15:36:54.740447	2013-11-24 15:36:54.740447
14	2	\N	\N	\N	hi shmee	save this	\N	draft	2013-11-24 15:37:41.517361	2013-11-24 15:37:41.517361
15	2	\N	\N	\N	another	another	\N	draft	2013-11-24 15:37:49.752482	2013-11-24 15:37:49.752482
16	2	2	\N	\N	self	self	\N	draft	2013-11-24 15:40:01.981982	2013-11-24 15:40:01.981982
17	2	2	\N	\N	hi paris	it's shmee.	\N	draft	2013-11-24 15:50:01.505311	2013-11-24 15:50:01.505311
18	2	2	\N	\N	hi patrick	it's shmee.	\N	draft	2013-11-24 15:51:38.56263	2013-11-24 15:51:38.56263
19	2	2	\N	\N	hi patrick	it's shmee	\N	draft	2013-11-24 15:51:49.610221	2013-11-24 15:51:49.610221
20	2	2	\N	\N	again	again	\N	draft	2013-11-24 15:54:21.145203	2013-11-24 15:54:21.145203
21	2	2	\N	\N	this	that	\N	draft	2013-11-24 15:54:31.809111	2013-11-24 15:54:31.809111
22	2	2	\N	\N	shmee	shmee	\N	draft	2013-11-24 15:55:41.494788	2013-11-24 15:55:41.494788
23	2	2	\N	\N	test	test	\N	draft	2013-11-24 16:00:59.556288	2013-11-24 16:00:59.556288
24	2	2	\N	\N	hello	hello	\N	draft	2013-11-24 16:18:30.049831	2013-11-24 16:18:30.049831
26	2	4	\N	\N	asdf	sdf	\N	draft	2013-11-24 16:39:07.638242	2013-11-24 16:39:07.638242
27	2	2	\N	\N	asdf	asdf	\N	draft	2013-11-24 16:40:28.924947	2013-11-24 16:40:28.924947
28	2	2	\N	\N	wee	wee	\N	draft	2013-11-24 16:40:39.324514	2013-11-24 16:40:39.324514
29	2	2	\N	\N	blee	blee	\N	draft	2013-11-24 17:08:22.640199	2013-11-24 17:08:22.640199
30	2	4	\N	\N	sdf	sdf	\N	draft	2013-11-24 17:09:14.342859	2013-11-24 17:09:14.342859
25	2	\N	\N	\N	coffee	coffee	\N	draft	2013-11-24 16:24:10.437024	2013-11-24 17:25:48.976747
31	2	\N	\N	\N	w	w	\N	draft	2013-11-24 17:38:19.535884	2013-11-24 17:38:19.535884
32	2	\N	\N	\N	message	message	\N	draft	2013-11-24 17:50:05.862142	2013-11-24 17:50:05.862142
33	2	4	\N	\N	working?	yes?	\N	draft	2013-11-24 18:22:00.937078	2013-11-24 18:22:00.937078
34	2	2	\N	\N	asdfk;ajsdf	asd;kfjsadfkjsdf	\N	draft	2013-11-24 18:42:38.170636	2013-11-24 18:42:38.170636
35	2	2	\N	\N	sdf	sdfasdf 	\N	draft	2013-11-24 18:43:12.75628	2013-11-24 18:43:12.75628
36	3	2	\N	\N	hellooooo	this is a new message from paris.	\N	draft	2013-11-24 20:08:51.561773	2013-11-24 20:08:51.561773
37	5	3	\N	\N	it's mary	mary poppins.	\N	draft	2013-11-25 02:55:34.77599	2013-11-25 02:55:34.77599
38	3	5	\N	\N	it's paris	hi	\N	draft	2013-11-25 13:39:18.547224	2013-11-25 13:39:18.547224
39	2	5	\N	\N	hey, it's the other paris	hi	\N	draft	2013-11-25 13:39:45.102646	2013-11-25 13:39:45.102646
40	5	5	\N	\N	hi mary	this is an email	\N	draft	2013-11-25 14:04:35.455902	2013-11-25 14:04:35.455902
41	5	5	\N	\N	hi, i'm you	this is an email.	\N	draft	2013-11-25 14:05:15.083463	2013-11-25 14:05:15.083463
42	3	3	\N	\N	asdfasdf	safasdfsaf	\N	draft	2013-12-17 18:40:54.760821	2013-12-17 18:40:54.760821
43	3	3	\N	\N	is this working?	is this working?	\N	draft	2013-12-19 04:07:12.961191	2013-12-19 04:07:12.961191
44	3	3	\N	\N	test	test	\N	draft	2014-01-26 19:27:28.79663	2014-01-26 19:27:28.79663
\.


--
-- Name: messages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('messages_id_seq', 44, true);


--
-- Data for Name: rates; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rates (id, rater_id, rateable_id, rateable_type, stars, dimension, created_at, updated_at) FROM stdin;
\.


--
-- Name: rates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rates_id_seq', 1, false);


--
-- Data for Name: rating_caches; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY rating_caches (id, cacheable_id, cacheable_type, avg, qty, dimension, created_at, updated_at) FROM stdin;
\.


--
-- Name: rating_caches_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('rating_caches_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131110151826
20131110163216
20131110171449
20131110171458
20131121210310
20131121211124
20131121213848
20131121213930
20131121224206
20131121224207
20131121224208
20131121224209
20131121224210
20131123150754
20131124004242
20131208191936473
20131208191936477
\.


--
-- Data for Name: table_menus; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY table_menus (id, dish, type, created_at, updated_at) FROM stdin;
\.


--
-- Name: table_menus_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('table_menus_id_seq', 1, false);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY users (id, email, encrypted_password, reset_password_token, reset_password_sent_at, remember_created_at, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, created_at, updated_at, name, lastname) FROM stdin;
2	parismaple@gmail.com	$2a$10$7OLmlQlLBnik.K58wba2TegZLy2osaie2qt0RcgtmXFXwhEwNei5O	\N	\N	\N	6	2013-11-25 13:39:29.828296	2013-11-24 20:09:05.631567	127.0.0.1	127.0.0.1	2013-11-24 01:33:06.153648	2013-11-25 13:39:29.830453	shmee	\N
5	mary@gmail.com	$2a$10$VUme/Vk.3lUwH.pnE2lJZ.paAHK9VePqk/EN7aP8tQFywjtyjxryW	\N	\N	\N	2	2013-11-25 13:40:14.716208	2013-11-25 02:54:53.188823	127.0.0.1	127.0.0.1	2013-11-25 02:54:52.36449	2013-11-25 13:40:14.717521	mary poppins	\N
3	parisliahyun@gmail.com	$2a$10$3.QhVJH8ZJ5e2oobeFxj6eVLtPTk83vYp0cMkhLdINB.sAj5WyB4u	\N	\N	\N	8	2014-01-26 19:27:19.367524	2013-12-19 04:06:56.505555	127.0.0.1	127.0.0.1	2013-11-24 01:42:39.406871	2014-01-26 19:27:19.369799	paris	\N
4	patrick@gmail.com	$2a$10$ZlSLZTLGEUaIne.dUXFdEOdd9GfMvNjQUvl8IYq0JfL8Ra7uebWIe	\N	\N	\N	1	2013-11-24 14:33:02.636463	2013-11-24 14:33:02.636463	127.0.0.1	127.0.0.1	2013-11-24 14:33:00.977387	2013-11-24 14:33:02.638419	patrick	\N
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('users_id_seq', 5, true);


--
-- Name: installs_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY installs
    ADD CONSTRAINT installs_pkey PRIMARY KEY (id);


--
-- Name: messages_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);


--
-- Name: rates_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rates
    ADD CONSTRAINT rates_pkey PRIMARY KEY (id);


--
-- Name: rating_caches_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY rating_caches
    ADD CONSTRAINT rating_caches_pkey PRIMARY KEY (id);


--
-- Name: table_menus_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY table_menus
    ADD CONSTRAINT table_menus_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: index_rates_on_rateable_id_and_rateable_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_rates_on_rateable_id_and_rateable_type ON rates USING btree (rateable_id, rateable_type);


--
-- Name: index_rates_on_rater_id; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_rates_on_rater_id ON rates USING btree (rater_id);


--
-- Name: index_rating_caches_on_cacheable_id_and_cacheable_type; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE INDEX index_rating_caches_on_cacheable_id_and_cacheable_type ON rating_caches USING btree (cacheable_id, cacheable_type);


--
-- Name: index_users_on_email; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_email ON users USING btree (email);


--
-- Name: index_users_on_reset_password_token; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX index_users_on_reset_password_token ON users USING btree (reset_password_token);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect users

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect watchio_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: movies; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE movies (
    id integer NOT NULL,
    title character varying(255) NOT NULL,
    poster_url character varying(255),
    plot text,
    seen boolean DEFAULT false,
    rating integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.movies OWNER TO "Paris";

--
-- Name: movies_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE movies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.movies_id_seq OWNER TO "Paris";

--
-- Name: movies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE movies_id_seq OWNED BY movies.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY movies ALTER COLUMN id SET DEFAULT nextval('movies_id_seq'::regclass);


--
-- Data for Name: movies; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY movies (id, title, poster_url, plot, seen, rating, created_at, updated_at) FROM stdin;
\.


--
-- Name: movies_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('movies_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131205185710
\.


--
-- Name: movies_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY movies
    ADD CONSTRAINT movies_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect wdinstagram

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: entries; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE entries (
    id integer NOT NULL,
    author character varying(25),
    photo text,
    post_date date
);


ALTER TABLE public.entries OWNER TO "Paris";

--
-- Name: entries_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE entries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.entries_id_seq OWNER TO "Paris";

--
-- Name: entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE entries_id_seq OWNED BY entries.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY entries ALTER COLUMN id SET DEFAULT nextval('entries_id_seq'::regclass);


--
-- Data for Name: entries; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY entries (id, author, photo, post_date) FROM stdin;
\.


--
-- Name: entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('entries_id_seq', 1, false);


--
-- Name: entries_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY entries
    ADD CONSTRAINT entries_pkey PRIMARY KEY (id);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

\connect wdinstagram2_app_development

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: entries; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE entries (
    id integer NOT NULL,
    author character varying(255),
    photo_url text,
    date_taken text
);


ALTER TABLE public.entries OWNER TO "Paris";

--
-- Name: entries_id_seq; Type: SEQUENCE; Schema: public; Owner: Paris
--

CREATE SEQUENCE entries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.entries_id_seq OWNER TO "Paris";

--
-- Name: entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: Paris
--

ALTER SEQUENCE entries_id_seq OWNED BY entries.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: Paris; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO "Paris";

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: Paris
--

ALTER TABLE ONLY entries ALTER COLUMN id SET DEFAULT nextval('entries_id_seq'::regclass);


--
-- Data for Name: entries; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY entries (id, author, photo_url, date_taken) FROM stdin;
1	Paris	http://3.bp.blogspot.com/-iMhPkmN9ae4/TfDWsB8Qz8I/AAAAAAAAF_Q/dDlOzsSpyWo/s1600/menudo2019811.jpg	January 1, 1980
2	Shmee	http://senoritasisa.files.wordpress.com/2012/02/menudo-band.jpg	February 1, 1980
3	Sally Jean Chamberlain	http://userserve-ak.last.fm/serve/_/32796023/Menudo%20%201993.jpg	March 1, 1980
4	Anne Perez	http://blu.stb.s-msn.com/i/7B/7F6D13302070345AEBC6969D9C138.jpg	April 1, 1980
5	Shmee2	http://blogs.babble.com/famecrawler/files/2012/01/Menudo-puerto-rico-357041_675_476.jpg	May 1, 1980
\.


--
-- Name: entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: Paris
--

SELECT pg_catalog.setval('entries_id_seq', 5, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: Paris
--

COPY schema_migrations (version) FROM stdin;
20131015205540
\.


--
-- Name: entries_pkey; Type: CONSTRAINT; Schema: public; Owner: Paris; Tablespace: 
--

ALTER TABLE ONLY entries
    ADD CONSTRAINT entries_pkey PRIMARY KEY (id);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: Paris; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: Paris
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM "Paris";
GRANT ALL ON SCHEMA public TO "Paris";
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

